{
	"id": "f36e9cf85c93ce212a6f097f0d1d70d5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.16",
	"solcLongVersion": "0.8.16+commit.07a7930e",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/DataAsserter.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol\";\r\nimport \"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// This contract allows assertions on any form of data to be made using the UMA Optimistic Oracle V3 and stores the\r\n// proposed value so that it may be retrieved on chain. The dataId is intended to be an arbitrary value that uniquely\r\n// identifies a specific piece of information in the consuming contract and is replaceable. Similarly, any data\r\n// structure can be used to replace the asserted data.\r\ncontract DataAsserter {\r\n    using SafeERC20 for IERC20;\r\n    IERC20 public immutable defaultCurrency;\r\n    OptimisticOracleV3Interface public immutable oo;\r\n    uint64 public constant assertionLiveness = 7200;\r\n    bytes32 public immutable defaultIdentifier;\r\n\r\n    struct DataAssertion {\r\n        bytes32 dataId; // The dataId that was asserted.\r\n        bytes32 data; // This could be an arbitrary data type.\r\n        address asserter; // The address that made the assertion.\r\n        bool resolved; // Whether the assertion has been resolved.\r\n    }\r\n\r\n    mapping(bytes32 => DataAssertion) public assertionsData;\r\n\r\n    event DataAsserted(\r\n        bytes32 indexed dataId,\r\n        bytes32 data,\r\n        address indexed asserter,\r\n        bytes32 indexed assertionId\r\n    );\r\n\r\n    event DataAssertionResolved(\r\n        bytes32 indexed dataId,\r\n        bytes32 data,\r\n        address indexed asserter,\r\n        bytes32 indexed assertionId\r\n    );\r\n\r\n    constructor(address _defaultCurrency, address _optimisticOracleV3) {\r\n        defaultCurrency = IERC20(_defaultCurrency);\r\n        oo = OptimisticOracleV3Interface(_optimisticOracleV3);\r\n        defaultIdentifier = oo.defaultIdentifier();\r\n    }\r\n\r\n    // For a given assertionId, returns a boolean indicating whether the data is accessible and the data itself.\r\n    function getData(bytes32 assertionId) public view returns (bool, bytes32) {\r\n        if (!assertionsData[assertionId].resolved) return (false, 0);\r\n        return (true, assertionsData[assertionId].data);\r\n    }\r\n\r\n    // Asserts data for a specific dataId on behalf of an asserter address.\r\n    // Data can be asserted many times with the same combination of arguments, resulting in unique assertionIds. This is\r\n    // because the block.timestamp is included in the claim. The consumer contract must store the returned assertionId\r\n    // identifiers to able to get the information using getData.\r\n    function assertDataFor(\r\n        bytes32 dataId,\r\n        bytes32 data,\r\n        address asserter\r\n    ) public returns (bytes32 assertionId) {\r\n        asserter = asserter == address(0) ? msg.sender : asserter;\r\n        uint256 bond = oo.getMinimumBond(address(defaultCurrency));\r\n        defaultCurrency.safeTransferFrom(msg.sender, address(this), bond);\r\n        defaultCurrency.safeApprove(address(oo), bond);\r\n\r\n        // The claim we want to assert is the first argument of assertTruth. It must contain all of the relevant\r\n        // details so that anyone may verify the claim without having to read any further information on chain. As a\r\n        // result, the claim must include both the data id and data, as well as a set of instructions that allow anyone\r\n        // to verify the information in publicly available sources.\r\n        // See the UMIP corresponding to the defaultIdentifier used in the OptimisticOracleV3 \"ASSERT_TRUTH\" for more\r\n        // information on how to construct the claim.\r\n        assertionId = oo.assertTruth(\r\n            abi.encodePacked(\r\n                \"Data asserted: 0x\", // in the example data is type bytes32 so we add the hex prefix 0x.\r\n                ClaimData.toUtf8Bytes(data),\r\n                \" for dataId: 0x\",\r\n                ClaimData.toUtf8Bytes(dataId),\r\n                \" and asserter: 0x\",\r\n                ClaimData.toUtf8BytesAddress(asserter),\r\n                \" at timestamp: \",\r\n                ClaimData.toUtf8BytesUint(block.timestamp),\r\n                \" in the DataAsserter contract at 0x\",\r\n                ClaimData.toUtf8BytesAddress(address(this)),\r\n                \" is valid.\"\r\n            ),\r\n            asserter,\r\n            address(this),\r\n            address(0), // No sovereign security.\r\n            assertionLiveness,\r\n            defaultCurrency,\r\n            bond,\r\n            defaultIdentifier,\r\n            bytes32(0) // No domain.\r\n        );\r\n        assertionsData[assertionId] = DataAssertion(\r\n            dataId,\r\n            data,\r\n            asserter,\r\n            false\r\n        );\r\n        emit DataAsserted(dataId, data, asserter, assertionId);\r\n    }\r\n\r\n    // OptimisticOracleV3 resolve callback.\r\n    function assertionResolvedCallback(\r\n        bytes32 assertionId,\r\n        bool assertedTruthfully\r\n    ) public {\r\n        require(msg.sender == address(oo));\r\n        // If the assertion was true, then the data assertion is resolved.\r\n        if (assertedTruthfully) {\r\n            assertionsData[assertionId].resolved = true;\r\n            DataAssertion memory dataAssertion = assertionsData[assertionId];\r\n            emit DataAssertionResolved(\r\n                dataAssertion.dataId,\r\n                dataAssertion.data,\r\n                dataAssertion.asserter,\r\n                assertionId\r\n            );\r\n            // Else delete the data assertion if it was false to save gas.\r\n        } else delete assertionsData[assertionId];\r\n    }\r\n\r\n    // If assertion is disputed, do nothing and wait for resolution.\r\n    // This OptimisticOracleV3 callback function needs to be defined so the OOv3 doesn't revert when it tries to call it.\r\n    function assertionDisputedCallback(bytes32 assertionId) public {}\r\n}\r\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
			},
			"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Optimistic Oracle V3 Interface that callers must use to assert truths about the world.\n */\ninterface OptimisticOracleV3Interface {\n    // Struct grouping together the settings related to the escalation manager stored in the assertion.\n    struct EscalationManagerSettings {\n        bool arbitrateViaEscalationManager; // False if the DVM is used as an oracle (EscalationManager on True).\n        bool discardOracle; // False if Oracle result is used for resolving assertion after dispute.\n        bool validateDisputers; // True if the EM isDisputeAllowed should be checked on disputes.\n        address assertingCaller; // Stores msg.sender when assertion was made.\n        address escalationManager; // Address of the escalation manager (zero address if not configured).\n    }\n\n    // Struct for storing properties and lifecycle of an assertion.\n    struct Assertion {\n        EscalationManagerSettings escalationManagerSettings; // Settings related to the escalation manager.\n        address asserter; // Address of the asserter.\n        uint64 assertionTime; // Time of the assertion.\n        bool settled; // True if the request is settled.\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\n        uint64 expirationTime; // Unix timestamp marking threshold when the assertion can no longer be disputed.\n        bool settlementResolution; // Resolution of the assertion (false till resolved).\n        bytes32 domainId; // Optional domain that can be used to relate the assertion to others in the escalationManager.\n        bytes32 identifier; // UMA DVM identifier to use for price requests in the event of a dispute.\n        uint256 bond; // Amount of currency that the asserter has bonded.\n        address callbackRecipient; // Address that receives the callback.\n        address disputer; // Address of the disputer.\n    }\n\n    // Struct for storing cached currency whitelist.\n    struct WhitelistedCurrency {\n        bool isWhitelisted; // True if the currency is whitelisted.\n        uint256 finalFee; // Final fee of the currency.\n    }\n\n    /**\n     * @notice Returns the default identifier used by the Optimistic Oracle V3.\n     * @return The default identifier.\n     */\n    function defaultIdentifier() external view returns (bytes32);\n\n    /**\n     * @notice Fetches information about a specific assertion and returns it.\n     * @param assertionId unique identifier for the assertion to fetch information for.\n     * @return assertion information about the assertion.\n     */\n    function getAssertion(bytes32 assertionId) external view returns (Assertion memory);\n\n    /**\n     * @notice Asserts a truth about the world, using the default currency and liveness. No callback recipient or\n     * escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage\n     * (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\n     * @dev The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\n     * any other account that the caller wants to receive the bond at settlement time.\n     * @return assertionId unique identifier for this assertion.\n     */\n    function assertTruthWithDefaults(bytes memory claim, address asserter) external returns (bytes32);\n\n    /**\n     * @notice Asserts a truth about the world, using a fully custom configuration.\n     * @dev The caller must approve this contract to spend at least bond amount of currency.\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\n     * any other account that the caller wants to receive the bond at settlement time.\n     * @param callbackRecipient if configured, this address will receive a function call assertionResolvedCallback and\n     * assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The\n     * recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\n     * @param escalationManager if configured, this address will control escalation properties of the assertion. This\n     * means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to\n     * validate disputes. Combining these, the asserter can define their own security properties for the assertion.\n     * escalationManager also _must_ implement the same callbacks as callbackRecipient.\n     * @param liveness time to wait before the assertion can be resolved. Assertion can be disputed in this time.\n     * @param currency bond currency pulled from the caller and held in escrow until the assertion is resolved.\n     * @param bond amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This\n     * must be >= getMinimumBond(address(currency)).\n     * @param identifier UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\n     * @param domainId optional domain that can be used to relate this assertion to others in the escalationManager and\n     * can be used by the configured escalationManager to define custom behavior for groups of assertions. This is\n     * typically used for \"escalation games\" by changing bonds or other assertion properties based on the other\n     * assertions that have come before. If not needed this value should be 0 to save gas.\n     * @return assertionId unique identifier for this assertion.\n     */\n    function assertTruth(\n        bytes memory claim,\n        address asserter,\n        address callbackRecipient,\n        address escalationManager,\n        uint64 liveness,\n        IERC20 currency,\n        uint256 bond,\n        bytes32 identifier,\n        bytes32 domainId\n    ) external returns (bytes32);\n\n    /**\n     * @notice Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy\n     * of the information within this contract. This is used to save gas when making assertions as we can avoid an\n     * external call to the UMA contracts to fetch this.\n     * @param identifier identifier to fetch information for and store locally.\n     * @param currency currency to fetch information for and store locally.\n     */\n    function syncUmaParams(bytes32 identifier, address currency) external;\n\n    /**\n     * @notice Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the\n     * asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle\n     * result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an\n     * amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of\n     * the bond is returned to the asserter or disputer.\n     * @param assertionId unique identifier for the assertion to resolve.\n     */\n    function settleAssertion(bytes32 assertionId) external;\n\n    /**\n     * @notice Settles an assertion and returns the resolution.\n     * @param assertionId unique identifier for the assertion to resolve and return the resolution for.\n     * @return resolution of the assertion.\n     */\n    function settleAndGetAssertionResult(bytes32 assertionId) external returns (bool);\n\n    /**\n     * @notice Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then\n     * this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\n     * @param assertionId unique identifier for the assertion to fetch the resolution for.\n     * @return resolution of the assertion.\n     */\n    function getAssertionResult(bytes32 assertionId) external view returns (bool);\n\n    /**\n     * @notice Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the\n     * currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\n     * @param currency currency to calculate the minimum bond for.\n     * @return minimum bond amount.\n     */\n    function getMinimumBond(address currency) external view returns (uint256);\n\n    event AssertionMade(\n        bytes32 indexed assertionId,\n        bytes32 domainId,\n        bytes claim,\n        address indexed asserter,\n        address callbackRecipient,\n        address escalationManager,\n        address caller,\n        uint64 expirationTime,\n        IERC20 currency,\n        uint256 bond,\n        bytes32 indexed identifier\n    );\n\n    event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer);\n\n    event AssertionSettled(\n        bytes32 indexed assertionId,\n        address indexed bondRecipient,\n        bool disputed,\n        bool settlementResolution,\n        address settleCaller\n    );\n\n    event AdminPropertiesSet(IERC20 defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage);\n}\n"
			},
			"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.16;\n\nimport { AncillaryData as ClaimData } from \"../../common/implementation/AncillaryData.sol\";\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@uma/core/contracts/common/implementation/AncillaryData.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Library for encoding and decoding ancillary data for DVM price requests.\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\n * smart contracts. More details on UMA's ancillary data guidelines below:\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\n */\nlibrary AncillaryData {\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\n        unchecked {\n            uint256 x = uint256(bytesIn);\n\n            // Nibble interleave\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\n            x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\n            x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\n            x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\n            x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\n            x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\n\n            // Hex encode\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\n\n            // Return the result.\n            return bytes32(x);\n        }\n    }\n\n    /**\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\n     * @param bytesIn bytes32 to encode.\n     * @return utf8 encoded bytes32.\n     */\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\n    }\n\n    /**\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\n     * @dev Will return address in all lower case characters and without the leading 0x.\n     * @param x address to encode.\n     * @return utf8 encoded address bytes.\n     */\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\n    }\n\n    /**\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\n     */\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\n        if (x == 0) {\n            return \"0\";\n        }\n        uint256 j = x;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (x != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            x /= 10;\n        }\n        return bstr;\n    }\n\n    function appendKeyValueBytes32(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        bytes32 value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\n    }\n\n    /**\n     * @notice Adds \"key:value\" to `currentAncillaryData` where `value` is an address that first needs to be converted\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\n     * @return Newly appended ancillary data.\n     */\n    function appendKeyValueAddress(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        address value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\n    }\n\n    /**\n     * @notice Adds \"key:value\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\n     * @return Newly appended ancillary data.\n     */\n    function appendKeyValueUint(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        uint256 value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\n    }\n\n    /**\n     * @notice Helper method that returns the left hand side of a \"key:value\" pair plus the colon \":\" and a leading\n     * comma \",\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\n     */\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\n        if (currentAncillaryData.length > 0) {\n            return abi.encodePacked(\",\", key, \":\");\n        } else {\n            return abi.encodePacked(key, \":\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:6912  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:6912  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220c011a0b2b3b64fbd1e41ca66aa04a0095efc3b5ea170581408b424ec08490ff664736f6c63430008100033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c011a0b2b3b64fbd1e41ca66aa04a0095efc3b5ea170581408b424ec08490ff664736f6c63430008100033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 GT LOG0 0xB2 0xB3 0xB6 0x4F 0xBD 0x1E COINBASE 0xCA PUSH7 0xAA04A0095EFC3B 0x5E LOG1 PUSH17 0x581408B424EC08490FF664736F6C634300 ADDMOD LT STOP CALLER ",
							"sourceMap": "701:6211:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c011a0b2b3b64fbd1e41ca66aa04a0095efc3b5ea170581408b424ec08490ff664736f6c63430008100033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC0 GT LOG0 0xB2 0xB3 0xB6 0x4F 0xBD 0x1E COINBASE 0xCA PUSH7 0xAA04A0095EFC3B 0x5E LOG1 PUSH17 0x581408B424EC08490FF664736F6C634300 ADDMOD LT STOP CALLER ",
							"sourceMap": "701:6211:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c011a0b2b3b64fbd1e41ca66aa04a0095efc3b5ea170581408b424ec08490ff664736f6c63430008100033",
									".code": [
										{
											"begin": 701,
											"end": 6912,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@uma/core/contracts/common/implementation/AncillaryData.sol",
								"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
								"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
								"src/DataAsserter.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://656cda26512ddd7373c2d5551c8fae759fc30f05b10f0fc2e738e9274199dbd4\",\"dweb:/ipfs/QmTSArSzQRFbQmHgq7U1PZXnsDFhvDZhKVu9CzMG4yo6Lx\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9363  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9363  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a1b19723c60ad821577de0d53da2dcf91bf2b007bf2da87098fad8cd0fcf4bae64736f6c63430008100033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a1b19723c60ad821577de0d53da2dcf91bf2b007bf2da87098fad8cd0fcf4bae64736f6c63430008100033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 0xB1 SWAP8 0x23 0xC6 EXP 0xD8 0x21 JUMPI PUSH30 0xE0D53DA2DCF91BF2B007BF2DA87098FAD8CD0FCF4BAE64736F6C63430008 LT STOP CALLER ",
							"sourceMap": "194:9169:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a1b19723c60ad821577de0d53da2dcf91bf2b007bf2da87098fad8cd0fcf4bae64736f6c63430008100033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 0xB1 SWAP8 0x23 0xC6 EXP 0xD8 0x21 JUMPI PUSH30 0xE0D53DA2DCF91BF2B007BF2DA87098FAD8CD0FCF4BAE64736F6C63430008 LT STOP CALLER ",
							"sourceMap": "194:9169:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a1b19723c60ad821577de0d53da2dcf91bf2b007bf2da87098fad8cd0fcf4bae64736f6c63430008100033",
									".code": [
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@uma/core/contracts/common/implementation/AncillaryData.sol",
								"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
								"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
								"src/DataAsserter.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uma/core/contracts/common/implementation/AncillaryData.sol": {
				"AncillaryData": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Library for encoding and decoding ancillary data for DVM price requests.",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":663:7225  library AncillaryData {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":663:7225  library AncillaryData {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208832c99e6c9ae0aaba6a1946d552275c1d6d2768902958ccd071ce9a5b9814fc64736f6c63430008100033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208832c99e6c9ae0aaba6a1946d552275c1d6d2768902958ccd071ce9a5b9814fc64736f6c63430008100033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 ORIGIN 0xC9 SWAP15 PUSH13 0x9AE0AABA6A1946D552275C1D6D 0x27 PUSH9 0x902958CCD071CE9A5B SWAP9 EQ 0xFC PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
							"sourceMap": "663:6562:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208832c99e6c9ae0aaba6a1946d552275c1d6d2768902958ccd071ce9a5b9814fc64736f6c63430008100033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 ORIGIN 0xC9 SWAP15 PUSH13 0x9AE0AABA6A1946D552275C1D6D 0x27 PUSH9 0x902958CCD071CE9A5B SWAP9 EQ 0xFC PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
							"sourceMap": "663:6562:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"appendKeyValueAddress(bytes memory,bytes memory,address)": "infinite",
								"appendKeyValueBytes32(bytes memory,bytes memory,bytes32)": "infinite",
								"appendKeyValueUint(bytes memory,bytes memory,uint256)": "infinite",
								"constructPrefix(bytes memory,bytes memory)": "infinite",
								"toUtf8Bytes(bytes32)": "infinite",
								"toUtf8Bytes32Bottom(bytes32)": "infinite",
								"toUtf8BytesAddress(address)": "infinite",
								"toUtf8BytesUint(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208832c99e6c9ae0aaba6a1946d552275c1d6d2768902958ccd071ce9a5b9814fc64736f6c63430008100033",
									".code": [
										{
											"begin": 663,
											"end": 7225,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@uma/core/contracts/common/implementation/AncillaryData.sol",
								"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
								"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
								"src/DataAsserter.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for encoding and decoding ancillary data for DVM price requests.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity smart contracts. More details on UMA's ancillary data guidelines below: https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uma/core/contracts/common/implementation/AncillaryData.sol\":\"AncillaryData\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uma/core/contracts/common/implementation/AncillaryData.sol\":{\"keccak256\":\"0x8ff33ac32d3e6de25de9e0ac2c0ff9a621f187fa97e9ee84092b327471baa3ce\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0bbaed49756e8cf7ef405e132f441cd7a735ac6186a200b0179147e7d137b74a\",\"dweb:/ipfs/QmeSBJX5a61LZPxbkUKS2NF4LSxemgDwjD65fCAmyP7PX2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity smart contracts. More details on UMA's ancillary data guidelines below: https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit",
						"version": 1
					}
				}
			},
			"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol": {
				"OptimisticOracleV3Interface": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract IERC20",
									"name": "defaultCurrency",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "defaultLiveness",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "burnedBondPercentage",
									"type": "uint256"
								}
							],
							"name": "AdminPropertiesSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "caller",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "disputer",
									"type": "address"
								}
							],
							"name": "AssertionDisputed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "domainId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "claim",
									"type": "bytes"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "callbackRecipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "escalationManager",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "expirationTime",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "contract IERC20",
									"name": "currency",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bond",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "identifier",
									"type": "bytes32"
								}
							],
							"name": "AssertionMade",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondRecipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "disputed",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "settlementResolution",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "settleCaller",
									"type": "address"
								}
							],
							"name": "AssertionSettled",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "claim",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "callbackRecipient",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "escalationManager",
									"type": "address"
								},
								{
									"internalType": "uint64",
									"name": "liveness",
									"type": "uint64"
								},
								{
									"internalType": "contract IERC20",
									"name": "currency",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "bond",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "identifier",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "domainId",
									"type": "bytes32"
								}
							],
							"name": "assertTruth",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "claim",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								}
							],
							"name": "assertTruthWithDefaults",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultIdentifier",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "getAssertion",
							"outputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "bool",
													"name": "arbitrateViaEscalationManager",
													"type": "bool"
												},
												{
													"internalType": "bool",
													"name": "discardOracle",
													"type": "bool"
												},
												{
													"internalType": "bool",
													"name": "validateDisputers",
													"type": "bool"
												},
												{
													"internalType": "address",
													"name": "assertingCaller",
													"type": "address"
												},
												{
													"internalType": "address",
													"name": "escalationManager",
													"type": "address"
												}
											],
											"internalType": "struct OptimisticOracleV3Interface.EscalationManagerSettings",
											"name": "escalationManagerSettings",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "asserter",
											"type": "address"
										},
										{
											"internalType": "uint64",
											"name": "assertionTime",
											"type": "uint64"
										},
										{
											"internalType": "bool",
											"name": "settled",
											"type": "bool"
										},
										{
											"internalType": "contract IERC20",
											"name": "currency",
											"type": "address"
										},
										{
											"internalType": "uint64",
											"name": "expirationTime",
											"type": "uint64"
										},
										{
											"internalType": "bool",
											"name": "settlementResolution",
											"type": "bool"
										},
										{
											"internalType": "bytes32",
											"name": "domainId",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "identifier",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "bond",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "callbackRecipient",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "disputer",
											"type": "address"
										}
									],
									"internalType": "struct OptimisticOracleV3Interface.Assertion",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "getAssertionResult",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "currency",
									"type": "address"
								}
							],
							"name": "getMinimumBond",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "settleAndGetAssertionResult",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "settleAssertion",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "identifier",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "currency",
									"type": "address"
								}
							],
							"name": "syncUmaParams",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)": {
								"details": "The caller must approve this contract to spend at least bond amount of currency.",
								"params": {
									"asserter": "receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.",
									"bond": "amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This must be >= getMinimumBond(address(currency)).",
									"callbackRecipient": "if configured, this address will receive a function call assertionResolvedCallback and assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.",
									"claim": "the truth claim being asserted. This is an assertion about the world, and is verified by disputers.",
									"currency": "bond currency pulled from the caller and held in escrow until the assertion is resolved.",
									"domainId": "optional domain that can be used to relate this assertion to others in the escalationManager and can be used by the configured escalationManager to define custom behavior for groups of assertions. This is typically used for \"escalation games\" by changing bonds or other assertion properties based on the other assertions that have come before. If not needed this value should be 0 to save gas.",
									"escalationManager": "if configured, this address will control escalation properties of the assertion. This means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to validate disputes. Combining these, the asserter can define their own security properties for the assertion. escalationManager also _must_ implement the same callbacks as callbackRecipient.",
									"identifier": "UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.",
									"liveness": "time to wait before the assertion can be resolved. Assertion can be disputed in this time."
								},
								"returns": {
									"_0": "assertionId unique identifier for this assertion."
								}
							},
							"assertTruthWithDefaults(bytes,address)": {
								"details": "The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).",
								"params": {
									"asserter": "receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.",
									"claim": "the truth claim being asserted. This is an assertion about the world, and is verified by disputers."
								},
								"returns": {
									"_0": "assertionId unique identifier for this assertion."
								}
							},
							"defaultIdentifier()": {
								"returns": {
									"_0": "The default identifier."
								}
							},
							"getAssertion(bytes32)": {
								"params": {
									"assertionId": "unique identifier for the assertion to fetch information for."
								},
								"returns": {
									"_0": "assertion information about the assertion."
								}
							},
							"getAssertionResult(bytes32)": {
								"params": {
									"assertionId": "unique identifier for the assertion to fetch the resolution for."
								},
								"returns": {
									"_0": "resolution of the assertion."
								}
							},
							"getMinimumBond(address)": {
								"params": {
									"currency": "currency to calculate the minimum bond for."
								},
								"returns": {
									"_0": "minimum bond amount."
								}
							},
							"settleAndGetAssertionResult(bytes32)": {
								"params": {
									"assertionId": "unique identifier for the assertion to resolve and return the resolution for."
								},
								"returns": {
									"_0": "resolution of the assertion."
								}
							},
							"settleAssertion(bytes32)": {
								"params": {
									"assertionId": "unique identifier for the assertion to resolve."
								}
							},
							"syncUmaParams(bytes32,address)": {
								"params": {
									"currency": "currency to fetch information for and store locally.",
									"identifier": "identifier to fetch information for and store locally."
								}
							}
						},
						"title": "Optimistic Oracle V3 Interface that callers must use to assert truths about the world.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)": "6457c979",
							"assertTruthWithDefaults(bytes,address)": "36b13af4",
							"defaultIdentifier()": "d509b017",
							"getAssertion(bytes32)": "88302884",
							"getAssertionResult(bytes32)": "e39dfd7f",
							"getMinimumBond(address)": "4360af3d",
							"settleAndGetAssertionResult(bytes32)": "8ea2f2ab",
							"settleAssertion(bytes32)": "4124beef",
							"syncUmaParams(bytes32,address)": "a8655785"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"defaultCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"defaultLiveness\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedBondPercentage\",\"type\":\"uint256\"}],\"name\":\"AdminPropertiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"}],\"name\":\"AssertionDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"AssertionMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disputed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settlementResolution\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"settleCaller\",\"type\":\"address\"}],\"name\":\"AssertionSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"liveness\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"}],\"name\":\"assertTruth\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"}],\"name\":\"assertTruthWithDefaults\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"arbitrateViaEscalationManager\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"discardOracle\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"validateDisputers\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"assertingCaller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"}],\"internalType\":\"struct OptimisticOracleV3Interface.EscalationManagerSettings\",\"name\":\"escalationManagerSettings\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"assertionTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"settlementResolution\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"}],\"internalType\":\"struct OptimisticOracleV3Interface.Assertion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"getAssertionResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getMinimumBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"settleAndGetAssertionResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"settleAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"syncUmaParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)\":{\"details\":\"The caller must approve this contract to spend at least bond amount of currency.\",\"params\":{\"asserter\":\"receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.\",\"bond\":\"amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This must be >= getMinimumBond(address(currency)).\",\"callbackRecipient\":\"if configured, this address will receive a function call assertionResolvedCallback and assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\",\"claim\":\"the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\",\"currency\":\"bond currency pulled from the caller and held in escrow until the assertion is resolved.\",\"domainId\":\"optional domain that can be used to relate this assertion to others in the escalationManager and can be used by the configured escalationManager to define custom behavior for groups of assertions. This is typically used for \\\"escalation games\\\" by changing bonds or other assertion properties based on the other assertions that have come before. If not needed this value should be 0 to save gas.\",\"escalationManager\":\"if configured, this address will control escalation properties of the assertion. This means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to validate disputes. Combining these, the asserter can define their own security properties for the assertion. escalationManager also _must_ implement the same callbacks as callbackRecipient.\",\"identifier\":\"UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\",\"liveness\":\"time to wait before the assertion can be resolved. Assertion can be disputed in this time.\"},\"returns\":{\"_0\":\"assertionId unique identifier for this assertion.\"}},\"assertTruthWithDefaults(bytes,address)\":{\"details\":\"The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\",\"params\":{\"asserter\":\"receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.\",\"claim\":\"the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\"},\"returns\":{\"_0\":\"assertionId unique identifier for this assertion.\"}},\"defaultIdentifier()\":{\"returns\":{\"_0\":\"The default identifier.\"}},\"getAssertion(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to fetch information for.\"},\"returns\":{\"_0\":\"assertion information about the assertion.\"}},\"getAssertionResult(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to fetch the resolution for.\"},\"returns\":{\"_0\":\"resolution of the assertion.\"}},\"getMinimumBond(address)\":{\"params\":{\"currency\":\"currency to calculate the minimum bond for.\"},\"returns\":{\"_0\":\"minimum bond amount.\"}},\"settleAndGetAssertionResult(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to resolve and return the resolution for.\"},\"returns\":{\"_0\":\"resolution of the assertion.\"}},\"settleAssertion(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to resolve.\"}},\"syncUmaParams(bytes32,address)\":{\"params\":{\"currency\":\"currency to fetch information for and store locally.\",\"identifier\":\"identifier to fetch information for and store locally.\"}}},\"title\":\"Optimistic Oracle V3 Interface that callers must use to assert truths about the world.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)\":{\"notice\":\"Asserts a truth about the world, using a fully custom configuration.\"},\"assertTruthWithDefaults(bytes,address)\":{\"notice\":\"Asserts a truth about the world, using the default currency and liveness. No callback recipient or escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\"},\"defaultIdentifier()\":{\"notice\":\"Returns the default identifier used by the Optimistic Oracle V3.\"},\"getAssertion(bytes32)\":{\"notice\":\"Fetches information about a specific assertion and returns it.\"},\"getAssertionResult(bytes32)\":{\"notice\":\"Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\"},\"getMinimumBond(address)\":{\"notice\":\"Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\"},\"settleAndGetAssertionResult(bytes32)\":{\"notice\":\"Settles an assertion and returns the resolution.\"},\"settleAssertion(bytes32)\":{\"notice\":\"Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of the bond is returned to the asserter or disputer.\"},\"syncUmaParams(bytes32,address)\":{\"notice\":\"Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy of the information within this contract. This is used to save gas when making assertions as we can avoid an external call to the UMA contracts to fetch this.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\":\"OptimisticOracleV3Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\":{\"keccak256\":\"0x06c16f033cb100a20286b0f9c866a33a227a9e534544d5da6e5e20103d182d00\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://a354805eab907d5e9e7910f66ef5c5c5594bb5144a77541d6d30c6cb3cbd6871\",\"dweb:/ipfs/QmTfUDPJrsuUQ2aPwsbQwTaSvjUzBQFvFxXtmscZFymM4X\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)": {
								"notice": "Asserts a truth about the world, using a fully custom configuration."
							},
							"assertTruthWithDefaults(bytes,address)": {
								"notice": "Asserts a truth about the world, using the default currency and liveness. No callback recipient or escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency."
							},
							"defaultIdentifier()": {
								"notice": "Returns the default identifier used by the Optimistic Oracle V3."
							},
							"getAssertion(bytes32)": {
								"notice": "Fetches information about a specific assertion and returns it."
							},
							"getAssertionResult(bytes32)": {
								"notice": "Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then this will revert. If the assertion was disputed and configured to discard the oracle resolution return false."
							},
							"getMinimumBond(address)": {
								"notice": "Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee."
							},
							"settleAndGetAssertionResult(bytes32)": {
								"notice": "Settles an assertion and returns the resolution."
							},
							"settleAssertion(bytes32)": {
								"notice": "Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of the bond is returned to the asserter or disputer."
							},
							"syncUmaParams(bytes32,address)": {
								"notice": "Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy of the information within this contract. This is used to save gas when making assertions as we can avoid an external call to the UMA contracts to fetch this."
							}
						},
						"version": 1
					}
				}
			},
			"src/DataAsserter.sol": {
				"DataAsserter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_defaultCurrency",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_optimisticOracleV3",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "dataId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "data",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "DataAsserted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "dataId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "data",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "DataAssertionResolved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "dataId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "data",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								}
							],
							"name": "assertDataFor",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "assertionDisputedCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "assertionLiveness",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								},
								{
									"internalType": "bool",
									"name": "assertedTruthfully",
									"type": "bool"
								}
							],
							"name": "assertionResolvedCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "assertionsData",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "dataId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "data",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "resolved",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultCurrency",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultIdentifier",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "getData",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "oo",
							"outputs": [
								{
									"internalType": "contract OptimisticOracleV3Interface",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/DataAsserter.sol\":720:5876  contract DataAsserter {... */\n  mstore(0x40, 0xe0)\n    /* \"src/DataAsserter.sol\":1680:1925  constructor(address _defaultCurrency, address _optimisticOracleV3) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"src/DataAsserter.sol\":1783:1799  _defaultCurrency */\n  dup2\n    /* \"src/DataAsserter.sol\":1758:1800  defaultCurrency = IERC20(_defaultCurrency) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x80\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"src/DataAsserter.sol\":1844:1863  _optimisticOracleV3 */\n  dup1\n    /* \"src/DataAsserter.sol\":1811:1864  oo = OptimisticOracleV3Interface(_optimisticOracleV3) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xa0\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"src/DataAsserter.sol\":1895:1897  oo */\n  mload(0xa0)\n    /* \"src/DataAsserter.sol\":1895:1915  oo.defaultIdentifier */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xd509b017\n    /* \"src/DataAsserter.sol\":1895:1917  oo.defaultIdentifier() */\n  mload(0x40)\n  dup2\n  0xffffffff\n  and\n  0xe0\n  shl\n  dup2\n  mstore\n  0x04\n  add\n  0x20\n  mload(0x40)\n  dup1\n  dup4\n  sub\n  dup2\n  dup7\n  gas\n  staticcall\n  iszero\n  dup1\n  iszero\n  tag_7\n  jumpi\n  returndatasize\n  0x00\n  dup1\n  returndatacopy\n  revert(0x00, returndatasize)\ntag_7:\n  pop\n  pop\n  pop\n  pop\n  mload(0x40)\n  returndatasize\n  not(0x1f)\n  0x1f\n  dup3\n  add\n  and\n  dup3\n  add\n  dup1\n  0x40\n  mstore\n  pop\n  dup2\n  add\n  swap1\n  tag_8\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_8:\n    /* \"src/DataAsserter.sol\":1875:1917  defaultIdentifier = oo.defaultIdentifier() */\n  0xc0\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"src/DataAsserter.sol\":1680:1925  constructor(address _defaultCurrency, address _optimisticOracleV3) {... */\n  pop\n  pop\n    /* \"src/DataAsserter.sol\":720:5876  contract DataAsserter {... */\n  jump(tag_10)\n    /* \"#utility.yul\":88:205   */\ntag_12:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_14:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_15:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_27\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_14\n  jump\t// in\ntag_27:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_16:\n    /* \"#utility.yul\":641:665   */\n  tag_29\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_15\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_30\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_30:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_17:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_32\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_16\n  jump\t// in\ntag_32:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1352   */\ntag_3:\n    /* \"#utility.yul\":924:930   */\n  0x00\n    /* \"#utility.yul\":932:938   */\n  dup1\n    /* \"#utility.yul\":981:983   */\n  0x40\n    /* \"#utility.yul\":969:978   */\n  dup4\n    /* \"#utility.yul\":960:967   */\n  dup6\n    /* \"#utility.yul\":956:979   */\n  sub\n    /* \"#utility.yul\":952:984   */\n  slt\n    /* \"#utility.yul\":949:1068   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":987:1066   */\n  tag_35\n  tag_12\n  jump\t// in\ntag_35:\n    /* \"#utility.yul\":949:1068   */\ntag_34:\n    /* \"#utility.yul\":1107:1108   */\n  0x00\n    /* \"#utility.yul\":1132:1196   */\n  tag_36\n    /* \"#utility.yul\":1188:1195   */\n  dup6\n    /* \"#utility.yul\":1179:1185   */\n  dup3\n    /* \"#utility.yul\":1168:1177   */\n  dup7\n    /* \"#utility.yul\":1164:1186   */\n  add\n    /* \"#utility.yul\":1132:1196   */\n  tag_17\n  jump\t// in\ntag_36:\n    /* \"#utility.yul\":1122:1196   */\n  swap3\n  pop\n    /* \"#utility.yul\":1078:1206   */\n  pop\n    /* \"#utility.yul\":1245:1247   */\n  0x20\n    /* \"#utility.yul\":1271:1335   */\n  tag_37\n    /* \"#utility.yul\":1327:1334   */\n  dup6\n    /* \"#utility.yul\":1318:1324   */\n  dup3\n    /* \"#utility.yul\":1307:1316   */\n  dup7\n    /* \"#utility.yul\":1303:1325   */\n  add\n    /* \"#utility.yul\":1271:1335   */\n  tag_17\n  jump\t// in\ntag_37:\n    /* \"#utility.yul\":1261:1335   */\n  swap2\n  pop\n    /* \"#utility.yul\":1216:1345   */\n  pop\n    /* \"#utility.yul\":845:1352   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1358:1435   */\ntag_18:\n    /* \"#utility.yul\":1395:1402   */\n  0x00\n    /* \"#utility.yul\":1424:1429   */\n  dup2\n    /* \"#utility.yul\":1413:1429   */\n  swap1\n  pop\n    /* \"#utility.yul\":1358:1435   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1441:1563   */\ntag_19:\n    /* \"#utility.yul\":1514:1538   */\n  tag_40\n    /* \"#utility.yul\":1532:1537   */\n  dup2\n    /* \"#utility.yul\":1514:1538   */\n  tag_18\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1507:1512   */\n  dup2\n    /* \"#utility.yul\":1504:1539   */\n  eq\n    /* \"#utility.yul\":1494:1557   */\n  tag_41\n  jumpi\n    /* \"#utility.yul\":1553:1554   */\n  0x00\n    /* \"#utility.yul\":1550:1551   */\n  dup1\n    /* \"#utility.yul\":1543:1555   */\n  revert\n    /* \"#utility.yul\":1494:1557   */\ntag_41:\n    /* \"#utility.yul\":1441:1563   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1569:1712   */\ntag_20:\n    /* \"#utility.yul\":1626:1631   */\n  0x00\n    /* \"#utility.yul\":1657:1663   */\n  dup2\n    /* \"#utility.yul\":1651:1664   */\n  mload\n    /* \"#utility.yul\":1642:1664   */\n  swap1\n  pop\n    /* \"#utility.yul\":1673:1706   */\n  tag_43\n    /* \"#utility.yul\":1700:1705   */\n  dup2\n    /* \"#utility.yul\":1673:1706   */\n  tag_19\n  jump\t// in\ntag_43:\n    /* \"#utility.yul\":1569:1712   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1718:2069   */\ntag_9:\n    /* \"#utility.yul\":1788:1794   */\n  0x00\n    /* \"#utility.yul\":1837:1839   */\n  0x20\n    /* \"#utility.yul\":1825:1834   */\n  dup3\n    /* \"#utility.yul\":1816:1823   */\n  dup5\n    /* \"#utility.yul\":1812:1835   */\n  sub\n    /* \"#utility.yul\":1808:1840   */\n  slt\n    /* \"#utility.yul\":1805:1924   */\n  iszero\n  tag_45\n  jumpi\n    /* \"#utility.yul\":1843:1922   */\n  tag_46\n  tag_12\n  jump\t// in\ntag_46:\n    /* \"#utility.yul\":1805:1924   */\ntag_45:\n    /* \"#utility.yul\":1963:1964   */\n  0x00\n    /* \"#utility.yul\":1988:2052   */\n  tag_47\n    /* \"#utility.yul\":2044:2051   */\n  dup5\n    /* \"#utility.yul\":2035:2041   */\n  dup3\n    /* \"#utility.yul\":2024:2033   */\n  dup6\n    /* \"#utility.yul\":2020:2042   */\n  add\n    /* \"#utility.yul\":1988:2052   */\n  tag_20\n  jump\t// in\ntag_47:\n    /* \"#utility.yul\":1978:2052   */\n  swap2\n  pop\n    /* \"#utility.yul\":1934:2062   */\n  pop\n    /* \"#utility.yul\":1718:2069   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"src/DataAsserter.sol\":720:5876  contract DataAsserter {... */\ntag_10:\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x375233033f6f7a51b2a505507d1552dc6bc5c4e8ff14db1fff78baf8d68bce47\")\n  0x00\n  assignImmutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n  0x00\n  assignImmutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"src/DataAsserter.sol\":720:5876  contract DataAsserter {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xb33893da\n      gt\n      tag_12\n      jumpi\n      dup1\n      0xb33893da\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xb75d4e24\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xd448a4ec\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd509b017\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xf1b156b2\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_12:\n      dup1\n      0x20402e1d\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x54f6127f\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8921a614\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x93ee663b\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/DataAsserter.sol\":782:821  IERC20 public immutable defaultCurrency */\n    tag_3:\n      tag_13\n      tag_14\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/DataAsserter.sol\":2047:2258  function getData(bytes32 assertionId) public view returns (bool, bytes32) {... */\n    tag_4:\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_18\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      tag_20\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      tag_21\n      swap3\n      swap2\n      swap1\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/DataAsserter.sol\":828:875  OptimisticOracleV3Interface public immutable oo */\n    tag_5:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/DataAsserter.sol\":2651:4809  function assertDataFor(... */\n    tag_6:\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_28\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_28:\n      tag_30\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_31\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/DataAsserter.sol\":1281:1336  mapping(bytes32 => DataAssertion) public assertionsData */\n    tag_7:\n      tag_33\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_34\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_34:\n      tag_35\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      tag_36\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/DataAsserter.sol\":882:929  uint64 public constant assertionLiveness = 7200 */\n    tag_8:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_40\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/DataAsserter.sol\":5808:5873  function assertionDisputedCallback(bytes32 assertionId) public {} */\n    tag_9:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_43:\n      tag_44\n      jump\t// in\n    tag_42:\n      stop\n        /* \"src/DataAsserter.sol\":936:978  bytes32 public immutable defaultIdentifier */\n    tag_10:\n      tag_45\n      tag_46\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_47\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/DataAsserter.sol\":4862:5607  function assertionResolvedCallback(... */\n    tag_11:\n      tag_48\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n    tag_48:\n      stop\n        /* \"src/DataAsserter.sol\":782:821  IERC20 public immutable defaultCurrency */\n    tag_14:\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n      dup2\n      jump\t// out\n        /* \"src/DataAsserter.sol\":2047:2258  function getData(bytes32 assertionId) public view returns (bool, bytes32) {... */\n    tag_20:\n        /* \"src/DataAsserter.sol\":2106:2110  bool */\n      0x00\n        /* \"src/DataAsserter.sol\":2112:2119  bytes32 */\n      dup1\n        /* \"src/DataAsserter.sol\":2137:2151  assertionsData */\n      0x00\n        /* \"src/DataAsserter.sol\":2137:2164  assertionsData[assertionId] */\n      dup1\n        /* \"src/DataAsserter.sol\":2152:2163  assertionId */\n      dup5\n        /* \"src/DataAsserter.sol\":2137:2164  assertionsData[assertionId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/DataAsserter.sol\":2137:2173  assertionsData[assertionId].resolved */\n      0x02\n      add\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"src/DataAsserter.sol\":2132:2192  if (!assertionsData[assertionId].resolved) return (false, 0) */\n      tag_53\n      jumpi\n        /* \"src/DataAsserter.sol\":2183:2188  false */\n      0x00\n        /* \"src/DataAsserter.sol\":2190:2191  0 */\n      dup1\n        /* \"src/DataAsserter.sol\":2175:2192  return (false, 0) */\n      dup1\n      0x00\n      shl\n      swap1\n      pop\n      swap2\n      pop\n      swap2\n      pop\n      jump(tag_52)\n        /* \"src/DataAsserter.sol\":2132:2192  if (!assertionsData[assertionId].resolved) return (false, 0) */\n    tag_53:\n        /* \"src/DataAsserter.sol\":2211:2215  true */\n      0x01\n        /* \"src/DataAsserter.sol\":2217:2231  assertionsData */\n      0x00\n        /* \"src/DataAsserter.sol\":2217:2244  assertionsData[assertionId] */\n      dup1\n        /* \"src/DataAsserter.sol\":2232:2243  assertionId */\n      dup6\n        /* \"src/DataAsserter.sol\":2217:2244  assertionsData[assertionId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/DataAsserter.sol\":2217:2249  assertionsData[assertionId].data */\n      0x01\n      add\n      sload\n        /* \"src/DataAsserter.sol\":2203:2250  return (true, assertionsData[assertionId].data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"src/DataAsserter.sol\":2047:2258  function getData(bytes32 assertionId) public view returns (bool, bytes32) {... */\n    tag_52:\n      swap2\n      pop\n      swap2\n      jump\t// out\n        /* \"src/DataAsserter.sol\":828:875  OptimisticOracleV3Interface public immutable oo */\n    tag_24:\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n      dup2\n      jump\t// out\n        /* \"src/DataAsserter.sol\":2651:4809  function assertDataFor(... */\n    tag_30:\n        /* \"src/DataAsserter.sol\":2772:2791  bytes32 assertionId */\n      0x00\n        /* \"src/DataAsserter.sol\":2835:2836  0 */\n      dup1\n        /* \"src/DataAsserter.sol\":2815:2837  asserter == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/DataAsserter.sol\":2815:2823  asserter */\n      dup3\n        /* \"src/DataAsserter.sol\":2815:2837  asserter == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"src/DataAsserter.sol\":2815:2861  asserter == address(0) ? msg.sender : asserter */\n      tag_55\n      jumpi\n        /* \"src/DataAsserter.sol\":2853:2861  asserter */\n      dup2\n        /* \"src/DataAsserter.sol\":2815:2861  asserter == address(0) ? msg.sender : asserter */\n      jump(tag_56)\n    tag_55:\n        /* \"src/DataAsserter.sol\":2840:2850  msg.sender */\n      caller\n        /* \"src/DataAsserter.sol\":2815:2861  asserter == address(0) ? msg.sender : asserter */\n    tag_56:\n        /* \"src/DataAsserter.sol\":2804:2861  asserter = asserter == address(0) ? msg.sender : asserter */\n      swap2\n      pop\n        /* \"src/DataAsserter.sol\":2872:2884  uint256 bond */\n      0x00\n        /* \"src/DataAsserter.sol\":2887:2889  oo */\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n        /* \"src/DataAsserter.sol\":2887:2904  oo.getMinimumBond */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x4360af3d\n        /* \"src/DataAsserter.sol\":2913:2928  defaultCurrency */\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n        /* \"src/DataAsserter.sol\":2887:2930  oo.getMinimumBond(address(defaultCurrency)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_57\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n    tag_57:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_60\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_60:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_61\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n        /* \"src/DataAsserter.sol\":2872:2930  uint256 bond = oo.getMinimumBond(address(defaultCurrency)) */\n      swap1\n      pop\n        /* \"src/DataAsserter.sol\":2941:3006  defaultCurrency.safeTransferFrom(msg.sender, address(this), bond) */\n      tag_63\n        /* \"src/DataAsserter.sol\":2974:2984  msg.sender */\n      caller\n        /* \"src/DataAsserter.sol\":2994:2998  this */\n      address\n        /* \"src/DataAsserter.sol\":3001:3005  bond */\n      dup4\n        /* \"src/DataAsserter.sol\":2941:2956  defaultCurrency */\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n        /* \"src/DataAsserter.sol\":2941:2973  defaultCurrency.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_64\n      swap1\n        /* \"src/DataAsserter.sol\":2941:3006  defaultCurrency.safeTransferFrom(msg.sender, address(this), bond) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_63:\n        /* \"src/DataAsserter.sol\":3017:3063  defaultCurrency.safeApprove(address(oo), bond) */\n      tag_65\n        /* \"src/DataAsserter.sol\":3053:3055  oo */\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n        /* \"src/DataAsserter.sol\":3058:3062  bond */\n      dup3\n        /* \"src/DataAsserter.sol\":3017:3032  defaultCurrency */\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n        /* \"src/DataAsserter.sol\":3017:3044  defaultCurrency.safeApprove */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_66\n      swap1\n        /* \"src/DataAsserter.sol\":3017:3063  defaultCurrency.safeApprove(address(oo), bond) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_65:\n        /* \"src/DataAsserter.sol\":3686:3688  oo */\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n        /* \"src/DataAsserter.sol\":3686:3700  oo.assertTruth */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x6457c979\n        /* \"src/DataAsserter.sol\":3856:3883  ClaimData.toUtf8Bytes(data) */\n      tag_67\n        /* \"src/DataAsserter.sol\":3878:3882  data */\n      dup7\n        /* \"src/DataAsserter.sol\":3856:3877  ClaimData.toUtf8Bytes */\n      tag_68\n        /* \"src/DataAsserter.sol\":3856:3883  ClaimData.toUtf8Bytes(data) */\n      jump\t// in\n    tag_67:\n        /* \"src/DataAsserter.sol\":3938:3967  ClaimData.toUtf8Bytes(dataId) */\n      tag_69\n        /* \"src/DataAsserter.sol\":3960:3966  dataId */\n      dup9\n        /* \"src/DataAsserter.sol\":3938:3959  ClaimData.toUtf8Bytes */\n      tag_68\n        /* \"src/DataAsserter.sol\":3938:3967  ClaimData.toUtf8Bytes(dataId) */\n      jump\t// in\n    tag_69:\n        /* \"src/DataAsserter.sol\":4024:4062  ClaimData.toUtf8BytesAddress(asserter) */\n      tag_70\n        /* \"src/DataAsserter.sol\":4053:4061  asserter */\n      dup8\n        /* \"src/DataAsserter.sol\":4024:4052  ClaimData.toUtf8BytesAddress */\n      tag_71\n        /* \"src/DataAsserter.sol\":4024:4062  ClaimData.toUtf8BytesAddress(asserter) */\n      jump\t// in\n    tag_70:\n        /* \"src/DataAsserter.sol\":4117:4159  ClaimData.toUtf8BytesUint(block.timestamp) */\n      tag_72\n        /* \"src/DataAsserter.sol\":4143:4158  block.timestamp */\n      timestamp\n        /* \"src/DataAsserter.sol\":4117:4142  ClaimData.toUtf8BytesUint */\n      tag_73\n        /* \"src/DataAsserter.sol\":4117:4159  ClaimData.toUtf8BytesUint(block.timestamp) */\n      jump\t// in\n    tag_72:\n        /* \"src/DataAsserter.sol\":4234:4277  ClaimData.toUtf8BytesAddress(address(this)) */\n      tag_74\n        /* \"src/DataAsserter.sol\":4271:4275  this */\n      address\n        /* \"src/DataAsserter.sol\":4234:4262  ClaimData.toUtf8BytesAddress */\n      tag_71\n        /* \"src/DataAsserter.sol\":4234:4277  ClaimData.toUtf8BytesAddress(address(this)) */\n      jump\t// in\n    tag_74:\n        /* \"src/DataAsserter.sol\":3715:4323  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_75\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_76\n      jump\t// in\n    tag_75:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/DataAsserter.sol\":4338:4346  asserter */\n      dup6\n        /* \"src/DataAsserter.sol\":4369:4373  this */\n      address\n        /* \"src/DataAsserter.sol\":4397:4398  0 */\n      0x00\n        /* \"src/DataAsserter.sol\":925:929  7200 */\n      0x1c20\n        /* \"src/DataAsserter.sol\":4472:4487  defaultCurrency */\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n        /* \"src/DataAsserter.sol\":4502:4506  bond */\n      dup9\n        /* \"src/DataAsserter.sol\":4521:4538  defaultIdentifier */\n      immutable(\"0x375233033f6f7a51b2a505507d1552dc6bc5c4e8ff14db1fff78baf8d68bce47\")\n        /* \"src/DataAsserter.sol\":4561:4562  0 */\n      0x00\n        /* \"src/DataAsserter.sol\":4553:4563  bytes32(0) */\n      dup1\n      shl\n        /* \"src/DataAsserter.sol\":3686:4588  oo.assertTruth(... */\n      mload(0x40)\n      dup11\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_77\n      swap10\n      swap9\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_78\n      jump\t// in\n    tag_77:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_80\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_80:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_81\n      swap2\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n        /* \"src/DataAsserter.sol\":3672:4588  assertionId = oo.assertTruth(... */\n      swap2\n      pop\n        /* \"src/DataAsserter.sol\":4629:4736  DataAssertion(... */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n        /* \"src/DataAsserter.sol\":4657:4663  dataId */\n      dup7\n        /* \"src/DataAsserter.sol\":4629:4736  DataAssertion(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"src/DataAsserter.sol\":4678:4682  data */\n      dup6\n        /* \"src/DataAsserter.sol\":4629:4736  DataAssertion(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"src/DataAsserter.sol\":4697:4705  asserter */\n      dup5\n        /* \"src/DataAsserter.sol\":4629:4736  DataAssertion(... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"src/DataAsserter.sol\":4720:4725  false */\n      0x00\n        /* \"src/DataAsserter.sol\":4629:4736  DataAssertion(... */\n      iszero\n      iszero\n      dup2\n      mstore\n      pop\n        /* \"src/DataAsserter.sol\":4599:4613  assertionsData */\n      0x00\n        /* \"src/DataAsserter.sol\":4599:4626  assertionsData[assertionId] */\n      dup1\n        /* \"src/DataAsserter.sol\":4614:4625  assertionId */\n      dup5\n        /* \"src/DataAsserter.sol\":4599:4626  assertionsData[assertionId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/DataAsserter.sol\":4599:4736  assertionsData[assertionId] = DataAssertion(... */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      sstore\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      sstore\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      exp(0x0100, 0x14)\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n      swap1\n      pop\n      pop\n        /* \"src/DataAsserter.sol\":4789:4800  assertionId */\n      dup2\n        /* \"src/DataAsserter.sol\":4779:4787  asserter */\n      dup4\n        /* \"src/DataAsserter.sol\":4752:4801  DataAsserted(dataId, data, asserter, assertionId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/DataAsserter.sol\":4765:4771  dataId */\n      dup7\n        /* \"src/DataAsserter.sol\":4752:4801  DataAsserted(dataId, data, asserter, assertionId) */\n      0x29ae27364abd65b112ad0ac18e7e4f97360c20afa9636864dc91195d4d9204ec\n        /* \"src/DataAsserter.sol\":4773:4777  data */\n      dup8\n        /* \"src/DataAsserter.sol\":4752:4801  DataAsserted(dataId, data, asserter, assertionId) */\n      mload(0x40)\n      tag_83\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_83:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"src/DataAsserter.sol\":2793:4809  {... */\n      pop\n        /* \"src/DataAsserter.sol\":2651:4809  function assertDataFor(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/DataAsserter.sol\":1281:1336  mapping(bytes32 => DataAssertion) public assertionsData */\n    tag_35:\n      mstore(0x20, 0x00)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      dup1\n      0x00\n      add\n      sload\n      swap1\n      dup1\n      0x01\n      add\n      sload\n      swap1\n      dup1\n      0x02\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      dup1\n      0x02\n      add\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      swap1\n      pop\n      dup5\n      jump\t// out\n        /* \"src/DataAsserter.sol\":882:929  uint64 public constant assertionLiveness = 7200 */\n    tag_39:\n        /* \"src/DataAsserter.sol\":925:929  7200 */\n      0x1c20\n        /* \"src/DataAsserter.sol\":882:929  uint64 public constant assertionLiveness = 7200 */\n      dup2\n      jump\t// out\n        /* \"src/DataAsserter.sol\":5808:5873  function assertionDisputedCallback(bytes32 assertionId) public {} */\n    tag_44:\n      pop\n      jump\t// out\n        /* \"src/DataAsserter.sol\":936:978  bytes32 public immutable defaultIdentifier */\n    tag_46:\n      immutable(\"0x375233033f6f7a51b2a505507d1552dc6bc5c4e8ff14db1fff78baf8d68bce47\")\n      dup2\n      jump\t// out\n        /* \"src/DataAsserter.sol\":4862:5607  function assertionResolvedCallback(... */\n    tag_51:\n        /* \"src/DataAsserter.sol\":5016:5018  oo */\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n        /* \"src/DataAsserter.sol\":4994:5019  msg.sender == address(oo) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/DataAsserter.sol\":4994:5004  msg.sender */\n      caller\n        /* \"src/DataAsserter.sol\":4994:5019  msg.sender == address(oo) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"src/DataAsserter.sol\":4986:5020  require(msg.sender == address(oo)) */\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n        /* \"src/DataAsserter.sol\":5111:5129  assertedTruthfully */\n      dup1\n        /* \"src/DataAsserter.sol\":5107:5599  if (assertedTruthfully) {... */\n      iszero\n      tag_87\n      jumpi\n        /* \"src/DataAsserter.sol\":5185:5189  true */\n      0x01\n        /* \"src/DataAsserter.sol\":5146:5160  assertionsData */\n      0x00\n        /* \"src/DataAsserter.sol\":5146:5173  assertionsData[assertionId] */\n      dup1\n        /* \"src/DataAsserter.sol\":5161:5172  assertionId */\n      dup5\n        /* \"src/DataAsserter.sol\":5146:5173  assertionsData[assertionId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/DataAsserter.sol\":5146:5182  assertionsData[assertionId].resolved */\n      0x02\n      add\n      0x14\n        /* \"src/DataAsserter.sol\":5146:5189  assertionsData[assertionId].resolved = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"src/DataAsserter.sol\":5204:5238  DataAssertion memory dataAssertion */\n      0x00\n        /* \"src/DataAsserter.sol\":5241:5255  assertionsData */\n      dup1\n        /* \"src/DataAsserter.sol\":5241:5268  assertionsData[assertionId] */\n      0x00\n        /* \"src/DataAsserter.sol\":5256:5267  assertionId */\n      dup5\n        /* \"src/DataAsserter.sol\":5241:5268  assertionsData[assertionId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"src/DataAsserter.sol\":5204:5268  DataAssertion memory dataAssertion = assertionsData[assertionId] */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"src/DataAsserter.sol\":5445:5456  assertionId */\n      dup3\n        /* \"src/DataAsserter.sol\":5404:5417  dataAssertion */\n      dup2\n        /* \"src/DataAsserter.sol\":5404:5426  dataAssertion.asserter */\n      0x40\n      add\n      mload\n        /* \"src/DataAsserter.sol\":5288:5471  DataAssertionResolved(... */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/DataAsserter.sol\":5328:5341  dataAssertion */\n      dup3\n        /* \"src/DataAsserter.sol\":5328:5348  dataAssertion.dataId */\n      0x00\n      add\n      mload\n        /* \"src/DataAsserter.sol\":5288:5471  DataAssertionResolved(... */\n      0xe49ab75dd8ad20084c43aacc9218434d61af074f44263f887212c41ad2d41c9d\n        /* \"src/DataAsserter.sol\":5367:5380  dataAssertion */\n      dup5\n        /* \"src/DataAsserter.sol\":5367:5385  dataAssertion.data */\n      0x20\n      add\n      mload\n        /* \"src/DataAsserter.sol\":5288:5471  DataAssertionResolved(... */\n      mload(0x40)\n      tag_88\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_88:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"src/DataAsserter.sol\":5131:5559  {... */\n      pop\n        /* \"src/DataAsserter.sol\":5107:5599  if (assertedTruthfully) {... */\n      jump(tag_89)\n    tag_87:\n        /* \"src/DataAsserter.sol\":5572:5586  assertionsData */\n      0x00\n        /* \"src/DataAsserter.sol\":5572:5599  assertionsData[assertionId] */\n      dup1\n        /* \"src/DataAsserter.sol\":5587:5598  assertionId */\n      dup4\n        /* \"src/DataAsserter.sol\":5572:5599  assertionsData[assertionId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"src/DataAsserter.sol\":5565:5599  delete assertionsData[assertionId] */\n      dup1\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x01\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      exp(0x0100, 0x14)\n      dup2\n      sload\n      swap1\n      0xff\n      mul\n      not\n      and\n      swap1\n      sstore\n      pop\n      pop\n        /* \"src/DataAsserter.sol\":5107:5599  if (assertedTruthfully) {... */\n    tag_89:\n        /* \"src/DataAsserter.sol\":4862:5607  function assertionResolvedCallback(... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1355:1558  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_64:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1455:1551  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1475:1480  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1505:1532  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1534:1538  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1540:1542  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1544:1549  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1482:1550  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_92\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_93\n      jump\t// in\n    tag_92:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1455:1474  _callOptionalReturn */\n      tag_94\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1455:1551  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_91:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1355:1558  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1818:2391  function safeApprove(IERC20 token, address spender, uint256 value) internal {... */\n    tag_66:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2152:2153  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2143:2148  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2143:2153  value == 0 */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2142:2204  (value == 0) || (token.allowance(address(this), spender) == 0) */\n      dup1\n      tag_96\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2202:2203  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2164  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2174  token.allowance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xdd62ed3e\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2183:2187  this */\n      address\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2190:2197  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2198  token.allowance(address(this), spender) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap3\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_97:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_100\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_100:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_101\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_101:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2203  token.allowance(address(this), spender) == 0 */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2142:2204  (value == 0) || (token.allowance(address(this), spender) == 0) */\n    tag_96:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2121:2284  require(... */\n      tag_102\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_104\n      jump\t// in\n    tag_103:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_102:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2294:2384  _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)) */\n      tag_105\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2314:2319  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2344:2366  token.approve.selector */\n      shl(0xe0, 0x095ea7b3)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2368:2375  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2377:2382  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2321:2383  abi.encodeWithSelector(token.approve.selector, spender, value) */\n      add(0x24, mload(0x40))\n      tag_106\n      swap3\n      swap2\n      swap1\n      tag_107\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2294:2313  _callOptionalReturn */\n      tag_94\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":2294:2384  _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)) */\n      jump\t// in\n    tag_105:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1818:2391  function safeApprove(IERC20 token, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2586:2768  function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {... */\n    tag_68:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2647:2659  bytes memory */\n      0x60\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2695:2730  toUtf8Bytes32Bottom(bytesIn >> 128) */\n      tag_109\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2726:2729  128 */\n      0x80\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2715:2722  bytesIn */\n      dup4\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2715:2729  bytesIn >> 128 */\n      swap1\n      shr\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2695:2714  toUtf8Bytes32Bottom */\n      tag_110\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2695:2730  toUtf8Bytes32Bottom(bytesIn >> 128) */\n      jump\t// in\n    tag_109:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2732:2760  toUtf8Bytes32Bottom(bytesIn) */\n      tag_111\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2752:2759  bytesIn */\n      dup4\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2732:2751  toUtf8Bytes32Bottom */\n      tag_110\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2732:2760  toUtf8Bytes32Bottom(bytesIn) */\n      jump\t// in\n    tag_111:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2678:2761  abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn)) */\n      add(0x20, mload(0x40))\n      tag_112\n      swap3\n      swap2\n      swap1\n      tag_113\n      jump\t// in\n    tag_112:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2671:2761  return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn)) */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2586:2768  function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3145:3363  function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {... */\n    tag_71:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3207:3219  bytes memory */\n      0x60\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3267:3314  toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128) */\n      tag_115\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3310:3313  128 */\n      0x80\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3303:3304  x */\n      dup4\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3295:3305  bytes20(x) */\n      0x60\n      shl\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3287:3306  bytes32(bytes20(x)) */\n      not(0xffffffffffffffffffffffff)\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3287:3313  bytes32(bytes20(x)) >> 128 */\n      swap1\n      shr\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3267:3286  toUtf8Bytes32Bottom */\n      tag_110\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3267:3314  toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128) */\n      jump\t// in\n    tag_115:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3323:3354  toUtf8Bytes32Bottom(bytes20(x)) */\n      tag_116\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3351:3352  x */\n      dup4\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3343:3353  bytes20(x) */\n      0x60\n      shl\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3323:3354  toUtf8Bytes32Bottom(bytes20(x)) */\n      not(0xffffffffffffffffffffffff)\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3323:3342  toUtf8Bytes32Bottom */\n      tag_110\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3323:3354  toUtf8Bytes32Bottom(bytes20(x)) */\n      jump\t// in\n    tag_116:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3250:3356  abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x)))) */\n      add(0x20, mload(0x40))\n      tag_117\n      swap3\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3231:3356  return... */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3145:3363  function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3569:4115  function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {... */\n    tag_73:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3628:3640  bytes memory */\n      0x60\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3661:3662  0 */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3656:3657  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3656:3662  x == 0 */\n      sub\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3652:3699  if (x == 0) {... */\n      tag_120\n      jumpi\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3678:3688  return \"0\" */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      0x3000000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n      jump(tag_119)\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3652:3699  if (x == 0) {... */\n    tag_120:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3708:3717  uint256 j */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3720:3721  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3708:3721  uint256 j = x */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3731:3742  uint256 len */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3752:3818  while (j != 0) {... */\n    tag_121:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3764:3765  0 */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3759:3760  j */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3759:3765  j != 0 */\n      eq\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3752:3818  while (j != 0) {... */\n      tag_122\n      jumpi\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3781:3786  len++ */\n      dup1\n      dup1\n      tag_123\n      swap1\n      tag_124\n      jump\t// in\n    tag_123:\n      swap2\n      pop\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3805:3807  10 */\n      0x0a\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3800:3807  j /= 10 */\n      dup3\n      tag_125\n      swap2\n      swap1\n      tag_126\n      jump\t// in\n    tag_125:\n      swap2\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3752:3818  while (j != 0) {... */\n      jump(tag_121)\n    tag_122:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3827:3844  bytes memory bstr */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3857:3860  len */\n      dup2\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3847:3861  new bytes(len) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_127\n      jumpi\n      tag_128\n      tag_129\n      jump\t// in\n    tag_128:\n    tag_127:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_130\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_130:\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3827:3861  bytes memory bstr = new bytes(len) */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3871:3880  uint256 k */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3883:3886  len */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3871:3886  uint256 k = len */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3896:4088  while (x != 0) {... */\n    tag_131:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3908:3909  0 */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3903:3904  x */\n      dup7\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3903:3909  x != 0 */\n      eq\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3896:4088  while (x != 0) {... */\n      tag_132\n      jumpi\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3933:3934  1 */\n      0x01\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3929:3930  k */\n      dup2\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3929:3934  k - 1 */\n      tag_133\n      swap2\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3925:3934  k = k - 1 */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3948:3958  uint8 temp */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3988:3990  10 */\n      0x0a\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3982:3984  10 */\n      dup1\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3978:3979  x */\n      dup9\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3978:3984  x / 10 */\n      tag_135\n      swap2\n      swap1\n      tag_126\n      jump\t// in\n    tag_135:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3977:3990  (x / 10) * 10 */\n      tag_136\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_136:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3973:3974  x */\n      dup8\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3973:3990  x - (x / 10) * 10 */\n      tag_138\n      swap2\n      swap1\n      tag_134\n      jump\t// in\n    tag_138:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3962:3964  48 */\n      0x30\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3962:3991  48 + uint8(x - (x / 10) * 10) */\n      tag_139\n      swap2\n      swap1\n      tag_140\n      jump\t// in\n    tag_139:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3948:3992  uint8 temp = (48 + uint8(x - (x / 10) * 10)) */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4006:4015  bytes1 b1 */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4025:4029  temp */\n      dup2\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4018:4030  bytes1(temp) */\n      0xf8\n      shl\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4006:4030  bytes1 b1 = bytes1(temp) */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4054:4056  b1 */\n      dup1\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4044:4048  bstr */\n      dup5\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4049:4050  k */\n      dup5\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4044:4051  bstr[k] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_141\n      jumpi\n      tag_142\n      tag_143\n      jump\t// in\n    tag_142:\n    tag_141:\n      0x20\n      add\n      add\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4044:4056  bstr[k] = b1 */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4075:4077  10 */\n      0x0a\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4070:4077  x /= 10 */\n      dup9\n      tag_144\n      swap2\n      swap1\n      tag_126\n      jump\t// in\n    tag_144:\n      swap8\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3911:4088  {... */\n      pop\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3896:4088  while (x != 0) {... */\n      jump(tag_131)\n    tag_132:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4104:4108  bstr */\n      dup2\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":4097:4108  return bstr */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":3569:4115  function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {... */\n    tag_119:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5173:5815  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_94:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5592:5615  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5618:5687  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_146\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5646:5650  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5618:5687  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5626:5631  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5618:5645  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_147\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5618:5687  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_146:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5592:5687  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5726:5727  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5715  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5722  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5727  returndata.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5761  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      dup1\n      tag_148\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5742:5752  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5731:5761  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_149\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_149:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5761  returndata.length == 0 || abi.decode(returndata, (bool)) */\n    tag_148:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5697:5808  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_151\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_152\n      swap1\n      tag_153\n      jump\t// in\n    tag_152:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_151:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5243:5815  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":5173:5815  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":897:2203  function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {... */\n    tag_110:\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":965:972  bytes32 */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1008:1017  uint256 x */\n      dup1\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1028:1035  bytesIn */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1020:1036  uint256(bytesIn) */\n      0x00\n      shr\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1008:1036  uint256 x = uint256(bytesIn) */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1092:1158  0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff */\n      0xffffffffffffffffffffffffffffffff\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1088:1089  x */\n      dup2\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1088:1158  x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1084:1158  x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1196:1262  0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff */\n      0xffffffffffffffff0000000000000000ffffffffffffffff\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1186:1191  2**64 */\n      0x010000000000000000\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1182:1183  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1182:1191  x * 2**64 */\n      mul\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1177:1178  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1177:1192  x | (x * 2**64) */\n      or\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1176:1262  (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1172:1262  x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1300:1366  0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff */\n      0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1290:1295  2**32 */\n      0x0100000000\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1286:1287  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1286:1295  x * 2**32 */\n      mul\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1281:1282  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1281:1296  x | (x * 2**32) */\n      or\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1280:1366  (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1276:1366  x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1404:1470  0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff */\n      0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1394:1399  2**16 */\n      0x010000\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1390:1391  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1390:1399  x * 2**16 */\n      mul\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1385:1386  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1385:1400  x | (x * 2**16) */\n      or\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1384:1470  (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1380:1470  x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1507:1573  0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff */\n      0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1498:1502  2**8 */\n      0x0100\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1494:1495  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1494:1502  x * 2**8 */\n      mul\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1489:1490  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1489:1503  x | (x * 2**8) */\n      or\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1488:1573  (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1484:1573  x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1610:1676  0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f */\n      0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1601:1605  2**4 */\n      0x10\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1597:1598  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1597:1605  x * 2**4 */\n      mul\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1592:1593  x */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1592:1606  x | (x * 2**4) */\n      or\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1591:1676  (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1587:1676  x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1717:1726  uint256 h */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1804:1805  8 */\n      0x08\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1734:1800  0x0808080808080808080808080808080808080808080808080808080808080808 */\n      0x0808080808080808080808080808080808080808080808080808080808080808\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1730:1731  x */\n      dup4\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1730:1800  x & 0x0808080808080808080808080808080808080808080808080808080808080808 */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1729:1805  (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8 */\n      dup2\n      tag_155\n      jumpi\n      tag_156\n      tag_157\n      jump\t// in\n    tag_156:\n    tag_155:\n      div\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1717:1805  uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8 */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1819:1828  uint256 i */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1906:1907  4 */\n      0x04\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1836:1902  0x0404040404040404040404040404040404040404040404040404040404040404 */\n      0x0404040404040404040404040404040404040404040404040404040404040404\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1832:1833  x */\n      dup5\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1832:1902  x & 0x0404040404040404040404040404040404040404040404040404040404040404 */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1831:1907  (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4 */\n      dup2\n      tag_158\n      jumpi\n      tag_159\n      tag_157\n      jump\t// in\n    tag_159:\n    tag_158:\n      div\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1819:1907  uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4 */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1921:1930  uint256 j */\n      0x00\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2008:2009  2 */\n      0x02\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1938:2004  0x0202020202020202020202020202020202020202020202020202020202020202 */\n      0x0202020202020202020202020202020202020202020202020202020202020202\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1934:1935  x */\n      dup6\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1934:2004  x & 0x0202020202020202020202020202020202020202020202020202020202020202 */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1933:2009  (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2 */\n      dup2\n      tag_160\n      jumpi\n      tag_161\n      tag_157\n      jump\t// in\n    tag_161:\n    tag_160:\n      div\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":1921:2009  uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2 */\n      swap1\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2054:2120  0x3030303030303030303030303030303030303030303030303030303030303030 */\n      0x3030303030303030303030303030303030303030303030303030303030303030\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2047:2051  0x27 */\n      0x27\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2041:2042  j */\n      dup3\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2037:2038  i */\n      dup5\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2037:2042  i | j */\n      or\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2032:2033  h */\n      dup6\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2032:2043  h & (i | j) */\n      and\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2031:2051  (h & (i | j)) * 0x27 */\n      mul\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2027:2028  x */\n      dup6\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2027:2051  x + (h & (i | j)) * 0x27 */\n      add\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2027:2120  x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030 */\n      add\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2023:2120  x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030 */\n      swap4\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2184:2185  x */\n      dup4\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2176:2186  bytes32(x) */\n      0x00\n      shl\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":2169:2186  return bytes32(x) */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@uma/core/contracts/common/implementation/AncillaryData.sol\":897:2203  function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4108:4331  function functionCall(... */\n    tag_147:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4241:4253  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4272:4324  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_163\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4294:4300  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4302:4306  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4308:4309  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4311:4323  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4272:4293  functionCallWithValue */\n      tag_164\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4272:4324  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_163:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4265:4324  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4108:4331  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5165:5611  function functionCallWithValue(... */\n    tag_164:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5342  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5387:5392  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5362:5383  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5362:5392  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5354:5435  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_166\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_167\n      swap1\n      tag_168\n      jump\t// in\n    tag_167:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_166:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5446:5458  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5460:5483  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5487:5493  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5487:5498  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5506:5511  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5513:5517  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5487:5518  target.call{value: value}(data) */\n      mload(0x40)\n      tag_169\n      swap2\n      swap1\n      tag_170\n      jump\t// in\n    tag_169:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_173\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_172)\n    tag_173:\n      0x60\n      swap2\n      pop\n    tag_172:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5445:5518  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5535:5604  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_174\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5562:5568  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5570:5577  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5579:5589  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5591:5603  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5535:5561  verifyCallResultFromTarget */\n      tag_175\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5535:5604  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_174:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5528:5604  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5165:5611  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7671:8299  function verifyCallResultFromTarget(... */\n    tag_175:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7851:7863  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7879:7886  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7875:8293  if (success) {... */\n      iszero\n      tag_177\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7927:7928  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7906:7916  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7906:7923  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7906:7928  returndata.length == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7902:8188  if (returndata.length == 0) {... */\n      tag_178\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8121:8139  isContract(target) */\n      tag_179\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8132:8138  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8121:8131  isContract */\n      tag_180\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8121:8139  isContract(target) */\n      jump\t// in\n    tag_179:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n      tag_181\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_182\n      swap1\n      tag_183\n      jump\t// in\n    tag_182:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_181:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7902:8188  if (returndata.length == 0) {... */\n    tag_178:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8208:8218  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8201:8218  return returndata */\n      swap1\n      pop\n      jump(tag_176)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7875:8293  if (success) {... */\n    tag_177:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8249:8282  _revert(returndata, errorMessage) */\n      tag_185\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8257:8267  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8269:8281  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8249:8256  _revert */\n      tag_186\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8249:8282  _revert(returndata, errorMessage) */\n      jump\t// in\n    tag_185:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7671:8299  function verifyCallResultFromTarget(... */\n    tag_176:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1412:1732  function isContract(address account) internal view returns (bool) {... */\n    tag_180:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1472:1476  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1724:1725  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1709  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1702:1725  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1695:1725  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1412:1732  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8821:9361  function _revert(bytes memory returndata, string memory errorMessage) private pure {... */\n    tag_186:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9000:9001  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8980:8990  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8980:8997  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8980:9001  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8976:9355  if (returndata.length > 0) {... */\n      iszero\n      tag_189\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9208:9218  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9202:9219  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9264:9279  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9251:9261  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9247:9249  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9243:9262  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9236:9280  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8976:9355  if (returndata.length > 0) {... */\n    tag_189:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9331:9343  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9324:9344  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_191\n      swap2\n      swap1\n      tag_192\n      jump\t// in\n    tag_191:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":7:133   */\n    tag_193:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":84:126   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":77:82   */\n      dup3\n        /* \"#utility.yul\":73:127   */\n      and\n        /* \"#utility.yul\":62:127   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:133   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":139:199   */\n    tag_194:\n        /* \"#utility.yul\":167:170   */\n      0x00\n        /* \"#utility.yul\":188:193   */\n      dup2\n        /* \"#utility.yul\":181:193   */\n      swap1\n      pop\n        /* \"#utility.yul\":139:199   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":205:347   */\n    tag_195:\n        /* \"#utility.yul\":255:264   */\n      0x00\n        /* \"#utility.yul\":288:341   */\n      tag_266\n        /* \"#utility.yul\":306:340   */\n      tag_267\n        /* \"#utility.yul\":315:339   */\n      tag_268\n        /* \"#utility.yul\":333:338   */\n      dup5\n        /* \"#utility.yul\":315:339   */\n      tag_193\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":306:340   */\n      tag_194\n      jump\t// in\n    tag_267:\n        /* \"#utility.yul\":288:341   */\n      tag_193\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":275:341   */\n      swap1\n      pop\n        /* \"#utility.yul\":205:347   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":353:479   */\n    tag_196:\n        /* \"#utility.yul\":403:412   */\n      0x00\n        /* \"#utility.yul\":436:473   */\n      tag_270\n        /* \"#utility.yul\":467:472   */\n      dup3\n        /* \"#utility.yul\":436:473   */\n      tag_195\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":423:473   */\n      swap1\n      pop\n        /* \"#utility.yul\":353:479   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":485:624   */\n    tag_197:\n        /* \"#utility.yul\":548:557   */\n      0x00\n        /* \"#utility.yul\":581:618   */\n      tag_272\n        /* \"#utility.yul\":612:617   */\n      dup3\n        /* \"#utility.yul\":581:618   */\n      tag_196\n      jump\t// in\n    tag_272:\n        /* \"#utility.yul\":568:618   */\n      swap1\n      pop\n        /* \"#utility.yul\":485:624   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":630:787   */\n    tag_198:\n        /* \"#utility.yul\":730:780   */\n      tag_274\n        /* \"#utility.yul\":774:779   */\n      dup2\n        /* \"#utility.yul\":730:780   */\n      tag_197\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":725:728   */\n      dup3\n        /* \"#utility.yul\":718:781   */\n      mstore\n        /* \"#utility.yul\":630:787   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":793:1041   */\n    tag_16:\n        /* \"#utility.yul\":899:903   */\n      0x00\n        /* \"#utility.yul\":937:939   */\n      0x20\n        /* \"#utility.yul\":926:935   */\n      dup3\n        /* \"#utility.yul\":922:940   */\n      add\n        /* \"#utility.yul\":914:940   */\n      swap1\n      pop\n        /* \"#utility.yul\":950:1034   */\n      tag_276\n        /* \"#utility.yul\":1031:1032   */\n      0x00\n        /* \"#utility.yul\":1020:1029   */\n      dup4\n        /* \"#utility.yul\":1016:1033   */\n      add\n        /* \"#utility.yul\":1007:1013   */\n      dup5\n        /* \"#utility.yul\":950:1034   */\n      tag_198\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":793:1041   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1128:1245   */\n    tag_200:\n        /* \"#utility.yul\":1237:1238   */\n      0x00\n        /* \"#utility.yul\":1234:1235   */\n      dup1\n        /* \"#utility.yul\":1227:1239   */\n      revert\n        /* \"#utility.yul\":1374:1451   */\n    tag_202:\n        /* \"#utility.yul\":1411:1418   */\n      0x00\n        /* \"#utility.yul\":1440:1445   */\n      dup2\n        /* \"#utility.yul\":1429:1445   */\n      swap1\n      pop\n        /* \"#utility.yul\":1374:1451   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1457:1579   */\n    tag_203:\n        /* \"#utility.yul\":1530:1554   */\n      tag_282\n        /* \"#utility.yul\":1548:1553   */\n      dup2\n        /* \"#utility.yul\":1530:1554   */\n      tag_202\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":1523:1528   */\n      dup2\n        /* \"#utility.yul\":1520:1555   */\n      eq\n        /* \"#utility.yul\":1510:1573   */\n      tag_283\n      jumpi\n        /* \"#utility.yul\":1569:1570   */\n      0x00\n        /* \"#utility.yul\":1566:1567   */\n      dup1\n        /* \"#utility.yul\":1559:1571   */\n      revert\n        /* \"#utility.yul\":1510:1573   */\n    tag_283:\n        /* \"#utility.yul\":1457:1579   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1585:1724   */\n    tag_204:\n        /* \"#utility.yul\":1631:1636   */\n      0x00\n        /* \"#utility.yul\":1669:1675   */\n      dup2\n        /* \"#utility.yul\":1656:1676   */\n      calldataload\n        /* \"#utility.yul\":1647:1676   */\n      swap1\n      pop\n        /* \"#utility.yul\":1685:1718   */\n      tag_285\n        /* \"#utility.yul\":1712:1717   */\n      dup2\n        /* \"#utility.yul\":1685:1718   */\n      tag_203\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":1585:1724   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1730:2059   */\n    tag_19:\n        /* \"#utility.yul\":1789:1795   */\n      0x00\n        /* \"#utility.yul\":1838:1840   */\n      0x20\n        /* \"#utility.yul\":1826:1835   */\n      dup3\n        /* \"#utility.yul\":1817:1824   */\n      dup5\n        /* \"#utility.yul\":1813:1836   */\n      sub\n        /* \"#utility.yul\":1809:1841   */\n      slt\n        /* \"#utility.yul\":1806:1925   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":1844:1923   */\n      tag_288\n      tag_200\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":1806:1925   */\n    tag_287:\n        /* \"#utility.yul\":1964:1965   */\n      0x00\n        /* \"#utility.yul\":1989:2042   */\n      tag_289\n        /* \"#utility.yul\":2034:2041   */\n      dup5\n        /* \"#utility.yul\":2025:2031   */\n      dup3\n        /* \"#utility.yul\":2014:2023   */\n      dup6\n        /* \"#utility.yul\":2010:2032   */\n      add\n        /* \"#utility.yul\":1989:2042   */\n      tag_204\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":1979:2042   */\n      swap2\n      pop\n        /* \"#utility.yul\":1935:2052   */\n      pop\n        /* \"#utility.yul\":1730:2059   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2065:2155   */\n    tag_205:\n        /* \"#utility.yul\":2099:2106   */\n      0x00\n        /* \"#utility.yul\":2142:2147   */\n      dup2\n        /* \"#utility.yul\":2135:2148   */\n      iszero\n        /* \"#utility.yul\":2128:2149   */\n      iszero\n        /* \"#utility.yul\":2117:2149   */\n      swap1\n      pop\n        /* \"#utility.yul\":2065:2155   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2161:2270   */\n    tag_206:\n        /* \"#utility.yul\":2242:2263   */\n      tag_292\n        /* \"#utility.yul\":2257:2262   */\n      dup2\n        /* \"#utility.yul\":2242:2263   */\n      tag_205\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":2237:2240   */\n      dup3\n        /* \"#utility.yul\":2230:2264   */\n      mstore\n        /* \"#utility.yul\":2161:2270   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2276:2394   */\n    tag_207:\n        /* \"#utility.yul\":2363:2387   */\n      tag_294\n        /* \"#utility.yul\":2381:2386   */\n      dup2\n        /* \"#utility.yul\":2363:2387   */\n      tag_202\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":2358:2361   */\n      dup3\n        /* \"#utility.yul\":2351:2388   */\n      mstore\n        /* \"#utility.yul\":2276:2394   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2400:2720   */\n    tag_22:\n        /* \"#utility.yul\":2515:2519   */\n      0x00\n        /* \"#utility.yul\":2553:2555   */\n      0x40\n        /* \"#utility.yul\":2542:2551   */\n      dup3\n        /* \"#utility.yul\":2538:2556   */\n      add\n        /* \"#utility.yul\":2530:2556   */\n      swap1\n      pop\n        /* \"#utility.yul\":2566:2631   */\n      tag_296\n        /* \"#utility.yul\":2628:2629   */\n      0x00\n        /* \"#utility.yul\":2617:2626   */\n      dup4\n        /* \"#utility.yul\":2613:2630   */\n      add\n        /* \"#utility.yul\":2604:2610   */\n      dup6\n        /* \"#utility.yul\":2566:2631   */\n      tag_206\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":2641:2713   */\n      tag_297\n        /* \"#utility.yul\":2709:2711   */\n      0x20\n        /* \"#utility.yul\":2698:2707   */\n      dup4\n        /* \"#utility.yul\":2694:2712   */\n      add\n        /* \"#utility.yul\":2685:2691   */\n      dup5\n        /* \"#utility.yul\":2641:2713   */\n      tag_207\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":2400:2720   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2726:2888   */\n    tag_208:\n        /* \"#utility.yul\":2812:2821   */\n      0x00\n        /* \"#utility.yul\":2845:2882   */\n      tag_299\n        /* \"#utility.yul\":2876:2881   */\n      dup3\n        /* \"#utility.yul\":2845:2882   */\n      tag_196\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":2832:2882   */\n      swap1\n      pop\n        /* \"#utility.yul\":2726:2888   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2894:3097   */\n    tag_209:\n        /* \"#utility.yul\":3017:3090   */\n      tag_301\n        /* \"#utility.yul\":3084:3089   */\n      dup2\n        /* \"#utility.yul\":3017:3090   */\n      tag_208\n      jump\t// in\n    tag_301:\n        /* \"#utility.yul\":3012:3015   */\n      dup3\n        /* \"#utility.yul\":3005:3091   */\n      mstore\n        /* \"#utility.yul\":2894:3097   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3103:3397   */\n    tag_26:\n        /* \"#utility.yul\":3232:3236   */\n      0x00\n        /* \"#utility.yul\":3270:3272   */\n      0x20\n        /* \"#utility.yul\":3259:3268   */\n      dup3\n        /* \"#utility.yul\":3255:3273   */\n      add\n        /* \"#utility.yul\":3247:3273   */\n      swap1\n      pop\n        /* \"#utility.yul\":3283:3390   */\n      tag_303\n        /* \"#utility.yul\":3387:3388   */\n      0x00\n        /* \"#utility.yul\":3376:3385   */\n      dup4\n        /* \"#utility.yul\":3372:3389   */\n      add\n        /* \"#utility.yul\":3363:3369   */\n      dup5\n        /* \"#utility.yul\":3283:3390   */\n      tag_209\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":3103:3397   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3403:3499   */\n    tag_210:\n        /* \"#utility.yul\":3440:3447   */\n      0x00\n        /* \"#utility.yul\":3469:3493   */\n      tag_305\n        /* \"#utility.yul\":3487:3492   */\n      dup3\n        /* \"#utility.yul\":3469:3493   */\n      tag_193\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":3458:3493   */\n      swap1\n      pop\n        /* \"#utility.yul\":3403:3499   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3505:3627   */\n    tag_211:\n        /* \"#utility.yul\":3578:3602   */\n      tag_307\n        /* \"#utility.yul\":3596:3601   */\n      dup2\n        /* \"#utility.yul\":3578:3602   */\n      tag_210\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":3571:3576   */\n      dup2\n        /* \"#utility.yul\":3568:3603   */\n      eq\n        /* \"#utility.yul\":3558:3621   */\n      tag_308\n      jumpi\n        /* \"#utility.yul\":3617:3618   */\n      0x00\n        /* \"#utility.yul\":3614:3615   */\n      dup1\n        /* \"#utility.yul\":3607:3619   */\n      revert\n        /* \"#utility.yul\":3558:3621   */\n    tag_308:\n        /* \"#utility.yul\":3505:3627   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3633:3772   */\n    tag_212:\n        /* \"#utility.yul\":3679:3684   */\n      0x00\n        /* \"#utility.yul\":3717:3723   */\n      dup2\n        /* \"#utility.yul\":3704:3724   */\n      calldataload\n        /* \"#utility.yul\":3695:3724   */\n      swap1\n      pop\n        /* \"#utility.yul\":3733:3766   */\n      tag_310\n        /* \"#utility.yul\":3760:3765   */\n      dup2\n        /* \"#utility.yul\":3733:3766   */\n      tag_211\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":3633:3772   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3778:4397   */\n    tag_29:\n        /* \"#utility.yul\":3855:3861   */\n      0x00\n        /* \"#utility.yul\":3863:3869   */\n      dup1\n        /* \"#utility.yul\":3871:3877   */\n      0x00\n        /* \"#utility.yul\":3920:3922   */\n      0x60\n        /* \"#utility.yul\":3908:3917   */\n      dup5\n        /* \"#utility.yul\":3899:3906   */\n      dup7\n        /* \"#utility.yul\":3895:3918   */\n      sub\n        /* \"#utility.yul\":3891:3923   */\n      slt\n        /* \"#utility.yul\":3888:4007   */\n      iszero\n      tag_312\n      jumpi\n        /* \"#utility.yul\":3926:4005   */\n      tag_313\n      tag_200\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":3888:4007   */\n    tag_312:\n        /* \"#utility.yul\":4046:4047   */\n      0x00\n        /* \"#utility.yul\":4071:4124   */\n      tag_314\n        /* \"#utility.yul\":4116:4123   */\n      dup7\n        /* \"#utility.yul\":4107:4113   */\n      dup3\n        /* \"#utility.yul\":4096:4105   */\n      dup8\n        /* \"#utility.yul\":4092:4114   */\n      add\n        /* \"#utility.yul\":4071:4124   */\n      tag_204\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":4061:4124   */\n      swap4\n      pop\n        /* \"#utility.yul\":4017:4134   */\n      pop\n        /* \"#utility.yul\":4173:4175   */\n      0x20\n        /* \"#utility.yul\":4199:4252   */\n      tag_315\n        /* \"#utility.yul\":4244:4251   */\n      dup7\n        /* \"#utility.yul\":4235:4241   */\n      dup3\n        /* \"#utility.yul\":4224:4233   */\n      dup8\n        /* \"#utility.yul\":4220:4242   */\n      add\n        /* \"#utility.yul\":4199:4252   */\n      tag_204\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":4189:4252   */\n      swap3\n      pop\n        /* \"#utility.yul\":4144:4262   */\n      pop\n        /* \"#utility.yul\":4301:4303   */\n      0x40\n        /* \"#utility.yul\":4327:4380   */\n      tag_316\n        /* \"#utility.yul\":4372:4379   */\n      dup7\n        /* \"#utility.yul\":4363:4369   */\n      dup3\n        /* \"#utility.yul\":4352:4361   */\n      dup8\n        /* \"#utility.yul\":4348:4370   */\n      add\n        /* \"#utility.yul\":4327:4380   */\n      tag_212\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":4317:4380   */\n      swap2\n      pop\n        /* \"#utility.yul\":4272:4390   */\n      pop\n        /* \"#utility.yul\":3778:4397   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4403:4625   */\n    tag_32:\n        /* \"#utility.yul\":4496:4500   */\n      0x00\n        /* \"#utility.yul\":4534:4536   */\n      0x20\n        /* \"#utility.yul\":4523:4532   */\n      dup3\n        /* \"#utility.yul\":4519:4537   */\n      add\n        /* \"#utility.yul\":4511:4537   */\n      swap1\n      pop\n        /* \"#utility.yul\":4547:4618   */\n      tag_318\n        /* \"#utility.yul\":4615:4616   */\n      0x00\n        /* \"#utility.yul\":4604:4613   */\n      dup4\n        /* \"#utility.yul\":4600:4617   */\n      add\n        /* \"#utility.yul\":4591:4597   */\n      dup5\n        /* \"#utility.yul\":4547:4618   */\n      tag_207\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":4403:4625   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4631:4749   */\n    tag_213:\n        /* \"#utility.yul\":4718:4742   */\n      tag_320\n        /* \"#utility.yul\":4736:4741   */\n      dup2\n        /* \"#utility.yul\":4718:4742   */\n      tag_210\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":4713:4716   */\n      dup3\n        /* \"#utility.yul\":4706:4743   */\n      mstore\n        /* \"#utility.yul\":4631:4749   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4755:5296   */\n    tag_37:\n        /* \"#utility.yul\":4926:4930   */\n      0x00\n        /* \"#utility.yul\":4964:4967   */\n      0x80\n        /* \"#utility.yul\":4953:4962   */\n      dup3\n        /* \"#utility.yul\":4949:4968   */\n      add\n        /* \"#utility.yul\":4941:4968   */\n      swap1\n      pop\n        /* \"#utility.yul\":4978:5049   */\n      tag_322\n        /* \"#utility.yul\":5046:5047   */\n      0x00\n        /* \"#utility.yul\":5035:5044   */\n      dup4\n        /* \"#utility.yul\":5031:5048   */\n      add\n        /* \"#utility.yul\":5022:5028   */\n      dup8\n        /* \"#utility.yul\":4978:5049   */\n      tag_207\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":5059:5131   */\n      tag_323\n        /* \"#utility.yul\":5127:5129   */\n      0x20\n        /* \"#utility.yul\":5116:5125   */\n      dup4\n        /* \"#utility.yul\":5112:5130   */\n      add\n        /* \"#utility.yul\":5103:5109   */\n      dup7\n        /* \"#utility.yul\":5059:5131   */\n      tag_207\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":5141:5213   */\n      tag_324\n        /* \"#utility.yul\":5209:5211   */\n      0x40\n        /* \"#utility.yul\":5198:5207   */\n      dup4\n        /* \"#utility.yul\":5194:5212   */\n      add\n        /* \"#utility.yul\":5185:5191   */\n      dup6\n        /* \"#utility.yul\":5141:5213   */\n      tag_213\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":5223:5289   */\n      tag_325\n        /* \"#utility.yul\":5285:5287   */\n      0x60\n        /* \"#utility.yul\":5274:5283   */\n      dup4\n        /* \"#utility.yul\":5270:5288   */\n      add\n        /* \"#utility.yul\":5261:5267   */\n      dup5\n        /* \"#utility.yul\":5223:5289   */\n      tag_206\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":4755:5296   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5302:5403   */\n    tag_214:\n        /* \"#utility.yul\":5338:5345   */\n      0x00\n        /* \"#utility.yul\":5378:5396   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5371:5376   */\n      dup3\n        /* \"#utility.yul\":5367:5397   */\n      and\n        /* \"#utility.yul\":5356:5397   */\n      swap1\n      pop\n        /* \"#utility.yul\":5302:5403   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5409:5524   */\n    tag_215:\n        /* \"#utility.yul\":5494:5517   */\n      tag_328\n        /* \"#utility.yul\":5511:5516   */\n      dup2\n        /* \"#utility.yul\":5494:5517   */\n      tag_214\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":5489:5492   */\n      dup3\n        /* \"#utility.yul\":5482:5518   */\n      mstore\n        /* \"#utility.yul\":5409:5524   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5530:5748   */\n    tag_41:\n        /* \"#utility.yul\":5621:5625   */\n      0x00\n        /* \"#utility.yul\":5659:5661   */\n      0x20\n        /* \"#utility.yul\":5648:5657   */\n      dup3\n        /* \"#utility.yul\":5644:5662   */\n      add\n        /* \"#utility.yul\":5636:5662   */\n      swap1\n      pop\n        /* \"#utility.yul\":5672:5741   */\n      tag_330\n        /* \"#utility.yul\":5738:5739   */\n      0x00\n        /* \"#utility.yul\":5727:5736   */\n      dup4\n        /* \"#utility.yul\":5723:5740   */\n      add\n        /* \"#utility.yul\":5714:5720   */\n      dup5\n        /* \"#utility.yul\":5672:5741   */\n      tag_215\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":5530:5748   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5754:5870   */\n    tag_216:\n        /* \"#utility.yul\":5824:5845   */\n      tag_332\n        /* \"#utility.yul\":5839:5844   */\n      dup2\n        /* \"#utility.yul\":5824:5845   */\n      tag_205\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":5817:5822   */\n      dup2\n        /* \"#utility.yul\":5814:5846   */\n      eq\n        /* \"#utility.yul\":5804:5864   */\n      tag_333\n      jumpi\n        /* \"#utility.yul\":5860:5861   */\n      0x00\n        /* \"#utility.yul\":5857:5858   */\n      dup1\n        /* \"#utility.yul\":5850:5862   */\n      revert\n        /* \"#utility.yul\":5804:5864   */\n    tag_333:\n        /* \"#utility.yul\":5754:5870   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5876:6009   */\n    tag_217:\n        /* \"#utility.yul\":5919:5924   */\n      0x00\n        /* \"#utility.yul\":5957:5963   */\n      dup2\n        /* \"#utility.yul\":5944:5964   */\n      calldataload\n        /* \"#utility.yul\":5935:5964   */\n      swap1\n      pop\n        /* \"#utility.yul\":5973:6003   */\n      tag_335\n        /* \"#utility.yul\":5997:6002   */\n      dup2\n        /* \"#utility.yul\":5973:6003   */\n      tag_216\n      jump\t// in\n    tag_335:\n        /* \"#utility.yul\":5876:6009   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6015:6483   */\n    tag_50:\n        /* \"#utility.yul\":6080:6086   */\n      0x00\n        /* \"#utility.yul\":6088:6094   */\n      dup1\n        /* \"#utility.yul\":6137:6139   */\n      0x40\n        /* \"#utility.yul\":6125:6134   */\n      dup4\n        /* \"#utility.yul\":6116:6123   */\n      dup6\n        /* \"#utility.yul\":6112:6135   */\n      sub\n        /* \"#utility.yul\":6108:6140   */\n      slt\n        /* \"#utility.yul\":6105:6224   */\n      iszero\n      tag_337\n      jumpi\n        /* \"#utility.yul\":6143:6222   */\n      tag_338\n      tag_200\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":6105:6224   */\n    tag_337:\n        /* \"#utility.yul\":6263:6264   */\n      0x00\n        /* \"#utility.yul\":6288:6341   */\n      tag_339\n        /* \"#utility.yul\":6333:6340   */\n      dup6\n        /* \"#utility.yul\":6324:6330   */\n      dup3\n        /* \"#utility.yul\":6313:6322   */\n      dup7\n        /* \"#utility.yul\":6309:6331   */\n      add\n        /* \"#utility.yul\":6288:6341   */\n      tag_204\n      jump\t// in\n    tag_339:\n        /* \"#utility.yul\":6278:6341   */\n      swap3\n      pop\n        /* \"#utility.yul\":6234:6351   */\n      pop\n        /* \"#utility.yul\":6390:6392   */\n      0x20\n        /* \"#utility.yul\":6416:6466   */\n      tag_340\n        /* \"#utility.yul\":6458:6465   */\n      dup6\n        /* \"#utility.yul\":6449:6455   */\n      dup3\n        /* \"#utility.yul\":6438:6447   */\n      dup7\n        /* \"#utility.yul\":6434:6456   */\n      add\n        /* \"#utility.yul\":6416:6466   */\n      tag_217\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":6406:6466   */\n      swap2\n      pop\n        /* \"#utility.yul\":6361:6476   */\n      pop\n        /* \"#utility.yul\":6015:6483   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6489:6711   */\n    tag_58:\n        /* \"#utility.yul\":6582:6586   */\n      0x00\n        /* \"#utility.yul\":6620:6622   */\n      0x20\n        /* \"#utility.yul\":6609:6618   */\n      dup3\n        /* \"#utility.yul\":6605:6623   */\n      add\n        /* \"#utility.yul\":6597:6623   */\n      swap1\n      pop\n        /* \"#utility.yul\":6633:6704   */\n      tag_342\n        /* \"#utility.yul\":6701:6702   */\n      0x00\n        /* \"#utility.yul\":6690:6699   */\n      dup4\n        /* \"#utility.yul\":6686:6703   */\n      add\n        /* \"#utility.yul\":6677:6683   */\n      dup5\n        /* \"#utility.yul\":6633:6704   */\n      tag_213\n      jump\t// in\n    tag_342:\n        /* \"#utility.yul\":6489:6711   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6717:6794   */\n    tag_218:\n        /* \"#utility.yul\":6754:6761   */\n      0x00\n        /* \"#utility.yul\":6783:6788   */\n      dup2\n        /* \"#utility.yul\":6772:6788   */\n      swap1\n      pop\n        /* \"#utility.yul\":6717:6794   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6800:6922   */\n    tag_219:\n        /* \"#utility.yul\":6873:6897   */\n      tag_345\n        /* \"#utility.yul\":6891:6896   */\n      dup2\n        /* \"#utility.yul\":6873:6897   */\n      tag_218\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":6866:6871   */\n      dup2\n        /* \"#utility.yul\":6863:6898   */\n      eq\n        /* \"#utility.yul\":6853:6916   */\n      tag_346\n      jumpi\n        /* \"#utility.yul\":6912:6913   */\n      0x00\n        /* \"#utility.yul\":6909:6910   */\n      dup1\n        /* \"#utility.yul\":6902:6914   */\n      revert\n        /* \"#utility.yul\":6853:6916   */\n    tag_346:\n        /* \"#utility.yul\":6800:6922   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6928:7071   */\n    tag_220:\n        /* \"#utility.yul\":6985:6990   */\n      0x00\n        /* \"#utility.yul\":7016:7022   */\n      dup2\n        /* \"#utility.yul\":7010:7023   */\n      mload\n        /* \"#utility.yul\":7001:7023   */\n      swap1\n      pop\n        /* \"#utility.yul\":7032:7065   */\n      tag_348\n        /* \"#utility.yul\":7059:7064   */\n      dup2\n        /* \"#utility.yul\":7032:7065   */\n      tag_219\n      jump\t// in\n    tag_348:\n        /* \"#utility.yul\":6928:7071   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7077:7428   */\n    tag_62:\n        /* \"#utility.yul\":7147:7153   */\n      0x00\n        /* \"#utility.yul\":7196:7198   */\n      0x20\n        /* \"#utility.yul\":7184:7193   */\n      dup3\n        /* \"#utility.yul\":7175:7182   */\n      dup5\n        /* \"#utility.yul\":7171:7194   */\n      sub\n        /* \"#utility.yul\":7167:7199   */\n      slt\n        /* \"#utility.yul\":7164:7283   */\n      iszero\n      tag_350\n      jumpi\n        /* \"#utility.yul\":7202:7281   */\n      tag_351\n      tag_200\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":7164:7283   */\n    tag_350:\n        /* \"#utility.yul\":7322:7323   */\n      0x00\n        /* \"#utility.yul\":7347:7411   */\n      tag_352\n        /* \"#utility.yul\":7403:7410   */\n      dup5\n        /* \"#utility.yul\":7394:7400   */\n      dup3\n        /* \"#utility.yul\":7383:7392   */\n      dup6\n        /* \"#utility.yul\":7379:7401   */\n      add\n        /* \"#utility.yul\":7347:7411   */\n      tag_220\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":7337:7411   */\n      swap2\n      pop\n        /* \"#utility.yul\":7293:7421   */\n      pop\n        /* \"#utility.yul\":7077:7428   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7434:7582   */\n    tag_221:\n        /* \"#utility.yul\":7536:7547   */\n      0x00\n        /* \"#utility.yul\":7573:7576   */\n      dup2\n        /* \"#utility.yul\":7558:7576   */\n      swap1\n      pop\n        /* \"#utility.yul\":7434:7582   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7588:7755   */\n    tag_222:\n        /* \"#utility.yul\":7728:7747   */\n      0x446174612061737365727465643a203078000000000000000000000000000000\n        /* \"#utility.yul\":7724:7725   */\n      0x00\n        /* \"#utility.yul\":7716:7722   */\n      dup3\n        /* \"#utility.yul\":7712:7726   */\n      add\n        /* \"#utility.yul\":7705:7748   */\n      mstore\n        /* \"#utility.yul\":7588:7755   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7761:8163   */\n    tag_223:\n        /* \"#utility.yul\":7921:7924   */\n      0x00\n        /* \"#utility.yul\":7942:8027   */\n      tag_356\n        /* \"#utility.yul\":8024:8026   */\n      0x11\n        /* \"#utility.yul\":8019:8022   */\n      dup4\n        /* \"#utility.yul\":7942:8027   */\n      tag_221\n      jump\t// in\n    tag_356:\n        /* \"#utility.yul\":7935:8027   */\n      swap2\n      pop\n        /* \"#utility.yul\":8036:8129   */\n      tag_357\n        /* \"#utility.yul\":8125:8128   */\n      dup3\n        /* \"#utility.yul\":8036:8129   */\n      tag_222\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":8154:8156   */\n      0x11\n        /* \"#utility.yul\":8149:8152   */\n      dup3\n        /* \"#utility.yul\":8145:8157   */\n      add\n        /* \"#utility.yul\":8138:8157   */\n      swap1\n      pop\n        /* \"#utility.yul\":7761:8163   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8169:8267   */\n    tag_224:\n        /* \"#utility.yul\":8220:8226   */\n      0x00\n        /* \"#utility.yul\":8254:8259   */\n      dup2\n        /* \"#utility.yul\":8248:8260   */\n      mload\n        /* \"#utility.yul\":8238:8260   */\n      swap1\n      pop\n        /* \"#utility.yul\":8169:8267   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8273:8420   */\n    tag_225:\n        /* \"#utility.yul\":8374:8385   */\n      0x00\n        /* \"#utility.yul\":8411:8414   */\n      dup2\n        /* \"#utility.yul\":8396:8414   */\n      swap1\n      pop\n        /* \"#utility.yul\":8273:8420   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8426:8672   */\n    tag_226:\n        /* \"#utility.yul\":8507:8508   */\n      0x00\n        /* \"#utility.yul\":8517:8630   */\n    tag_361:\n        /* \"#utility.yul\":8531:8537   */\n      dup4\n        /* \"#utility.yul\":8528:8529   */\n      dup2\n        /* \"#utility.yul\":8525:8538   */\n      lt\n        /* \"#utility.yul\":8517:8630   */\n      iszero\n      tag_363\n      jumpi\n        /* \"#utility.yul\":8616:8617   */\n      dup1\n        /* \"#utility.yul\":8611:8614   */\n      dup3\n        /* \"#utility.yul\":8607:8618   */\n      add\n        /* \"#utility.yul\":8601:8619   */\n      mload\n        /* \"#utility.yul\":8597:8598   */\n      dup2\n        /* \"#utility.yul\":8592:8595   */\n      dup5\n        /* \"#utility.yul\":8588:8599   */\n      add\n        /* \"#utility.yul\":8581:8620   */\n      mstore\n        /* \"#utility.yul\":8553:8555   */\n      0x20\n        /* \"#utility.yul\":8550:8551   */\n      dup2\n        /* \"#utility.yul\":8546:8556   */\n      add\n        /* \"#utility.yul\":8541:8556   */\n      swap1\n      pop\n        /* \"#utility.yul\":8517:8630   */\n      jump(tag_361)\n    tag_363:\n        /* \"#utility.yul\":8664:8665   */\n      0x00\n        /* \"#utility.yul\":8655:8661   */\n      dup5\n        /* \"#utility.yul\":8650:8653   */\n      dup5\n        /* \"#utility.yul\":8646:8662   */\n      add\n        /* \"#utility.yul\":8639:8666   */\n      mstore\n        /* \"#utility.yul\":8488:8672   */\n      pop\n        /* \"#utility.yul\":8426:8672   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8678:9064   */\n    tag_227:\n        /* \"#utility.yul\":8782:8785   */\n      0x00\n        /* \"#utility.yul\":8810:8848   */\n      tag_365\n        /* \"#utility.yul\":8842:8847   */\n      dup3\n        /* \"#utility.yul\":8810:8848   */\n      tag_224\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":8864:8952   */\n      tag_366\n        /* \"#utility.yul\":8945:8951   */\n      dup2\n        /* \"#utility.yul\":8940:8943   */\n      dup6\n        /* \"#utility.yul\":8864:8952   */\n      tag_225\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":8857:8952   */\n      swap4\n      pop\n        /* \"#utility.yul\":8961:9026   */\n      tag_367\n        /* \"#utility.yul\":9019:9025   */\n      dup2\n        /* \"#utility.yul\":9014:9017   */\n      dup6\n        /* \"#utility.yul\":9007:9011   */\n      0x20\n        /* \"#utility.yul\":9000:9005   */\n      dup7\n        /* \"#utility.yul\":8996:9012   */\n      add\n        /* \"#utility.yul\":8961:9026   */\n      tag_226\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":9051:9057   */\n      dup1\n        /* \"#utility.yul\":9046:9049   */\n      dup5\n        /* \"#utility.yul\":9042:9058   */\n      add\n        /* \"#utility.yul\":9035:9058   */\n      swap2\n      pop\n        /* \"#utility.yul\":8786:9064   */\n      pop\n        /* \"#utility.yul\":8678:9064   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9070:9235   */\n    tag_228:\n        /* \"#utility.yul\":9210:9227   */\n      0x20666f72206461746149643a2030780000000000000000000000000000000000\n        /* \"#utility.yul\":9206:9207   */\n      0x00\n        /* \"#utility.yul\":9198:9204   */\n      dup3\n        /* \"#utility.yul\":9194:9208   */\n      add\n        /* \"#utility.yul\":9187:9228   */\n      mstore\n        /* \"#utility.yul\":9070:9235   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9241:9643   */\n    tag_229:\n        /* \"#utility.yul\":9401:9404   */\n      0x00\n        /* \"#utility.yul\":9422:9507   */\n      tag_370\n        /* \"#utility.yul\":9504:9506   */\n      0x0f\n        /* \"#utility.yul\":9499:9502   */\n      dup4\n        /* \"#utility.yul\":9422:9507   */\n      tag_221\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":9415:9507   */\n      swap2\n      pop\n        /* \"#utility.yul\":9516:9609   */\n      tag_371\n        /* \"#utility.yul\":9605:9608   */\n      dup3\n        /* \"#utility.yul\":9516:9609   */\n      tag_228\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":9634:9636   */\n      0x0f\n        /* \"#utility.yul\":9629:9632   */\n      dup3\n        /* \"#utility.yul\":9625:9637   */\n      add\n        /* \"#utility.yul\":9618:9637   */\n      swap1\n      pop\n        /* \"#utility.yul\":9241:9643   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9649:9816   */\n    tag_230:\n        /* \"#utility.yul\":9789:9808   */\n      0x20616e642061737365727465723a203078000000000000000000000000000000\n        /* \"#utility.yul\":9785:9786   */\n      0x00\n        /* \"#utility.yul\":9777:9783   */\n      dup3\n        /* \"#utility.yul\":9773:9787   */\n      add\n        /* \"#utility.yul\":9766:9809   */\n      mstore\n        /* \"#utility.yul\":9649:9816   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9822:10224   */\n    tag_231:\n        /* \"#utility.yul\":9982:9985   */\n      0x00\n        /* \"#utility.yul\":10003:10088   */\n      tag_374\n        /* \"#utility.yul\":10085:10087   */\n      0x11\n        /* \"#utility.yul\":10080:10083   */\n      dup4\n        /* \"#utility.yul\":10003:10088   */\n      tag_221\n      jump\t// in\n    tag_374:\n        /* \"#utility.yul\":9996:10088   */\n      swap2\n      pop\n        /* \"#utility.yul\":10097:10190   */\n      tag_375\n        /* \"#utility.yul\":10186:10189   */\n      dup3\n        /* \"#utility.yul\":10097:10190   */\n      tag_230\n      jump\t// in\n    tag_375:\n        /* \"#utility.yul\":10215:10217   */\n      0x11\n        /* \"#utility.yul\":10210:10213   */\n      dup3\n        /* \"#utility.yul\":10206:10218   */\n      add\n        /* \"#utility.yul\":10199:10218   */\n      swap1\n      pop\n        /* \"#utility.yul\":9822:10224   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10230:10395   */\n    tag_232:\n        /* \"#utility.yul\":10370:10387   */\n      0x2061742074696d657374616d703a200000000000000000000000000000000000\n        /* \"#utility.yul\":10366:10367   */\n      0x00\n        /* \"#utility.yul\":10358:10364   */\n      dup3\n        /* \"#utility.yul\":10354:10368   */\n      add\n        /* \"#utility.yul\":10347:10388   */\n      mstore\n        /* \"#utility.yul\":10230:10395   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10401:10803   */\n    tag_233:\n        /* \"#utility.yul\":10561:10564   */\n      0x00\n        /* \"#utility.yul\":10582:10667   */\n      tag_378\n        /* \"#utility.yul\":10664:10666   */\n      0x0f\n        /* \"#utility.yul\":10659:10662   */\n      dup4\n        /* \"#utility.yul\":10582:10667   */\n      tag_221\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":10575:10667   */\n      swap2\n      pop\n        /* \"#utility.yul\":10676:10769   */\n      tag_379\n        /* \"#utility.yul\":10765:10768   */\n      dup3\n        /* \"#utility.yul\":10676:10769   */\n      tag_232\n      jump\t// in\n    tag_379:\n        /* \"#utility.yul\":10794:10796   */\n      0x0f\n        /* \"#utility.yul\":10789:10792   */\n      dup3\n        /* \"#utility.yul\":10785:10797   */\n      add\n        /* \"#utility.yul\":10778:10797   */\n      swap1\n      pop\n        /* \"#utility.yul\":10401:10803   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10809:11031   */\n    tag_234:\n        /* \"#utility.yul\":10949:10983   */\n      0x20696e207468652044617461417373657274657220636f6e7472616374206174\n        /* \"#utility.yul\":10945:10946   */\n      0x00\n        /* \"#utility.yul\":10937:10943   */\n      dup3\n        /* \"#utility.yul\":10933:10947   */\n      add\n        /* \"#utility.yul\":10926:10984   */\n      mstore\n        /* \"#utility.yul\":11018:11023   */\n      0x2030780000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11013:11015   */\n      0x20\n        /* \"#utility.yul\":11005:11011   */\n      dup3\n        /* \"#utility.yul\":11001:11016   */\n      add\n        /* \"#utility.yul\":10994:11024   */\n      mstore\n        /* \"#utility.yul\":10809:11031   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11037:11439   */\n    tag_235:\n        /* \"#utility.yul\":11197:11200   */\n      0x00\n        /* \"#utility.yul\":11218:11303   */\n      tag_382\n        /* \"#utility.yul\":11300:11302   */\n      0x23\n        /* \"#utility.yul\":11295:11298   */\n      dup4\n        /* \"#utility.yul\":11218:11303   */\n      tag_221\n      jump\t// in\n    tag_382:\n        /* \"#utility.yul\":11211:11303   */\n      swap2\n      pop\n        /* \"#utility.yul\":11312:11405   */\n      tag_383\n        /* \"#utility.yul\":11401:11404   */\n      dup3\n        /* \"#utility.yul\":11312:11405   */\n      tag_234\n      jump\t// in\n    tag_383:\n        /* \"#utility.yul\":11430:11432   */\n      0x23\n        /* \"#utility.yul\":11425:11428   */\n      dup3\n        /* \"#utility.yul\":11421:11433   */\n      add\n        /* \"#utility.yul\":11414:11433   */\n      swap1\n      pop\n        /* \"#utility.yul\":11037:11439   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11445:11605   */\n    tag_236:\n        /* \"#utility.yul\":11585:11597   */\n      0x2069732076616c69642e00000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11581:11582   */\n      0x00\n        /* \"#utility.yul\":11573:11579   */\n      dup3\n        /* \"#utility.yul\":11569:11583   */\n      add\n        /* \"#utility.yul\":11562:11598   */\n      mstore\n        /* \"#utility.yul\":11445:11605   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11611:12013   */\n    tag_237:\n        /* \"#utility.yul\":11771:11774   */\n      0x00\n        /* \"#utility.yul\":11792:11877   */\n      tag_386\n        /* \"#utility.yul\":11874:11876   */\n      0x0a\n        /* \"#utility.yul\":11869:11872   */\n      dup4\n        /* \"#utility.yul\":11792:11877   */\n      tag_221\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":11785:11877   */\n      swap2\n      pop\n        /* \"#utility.yul\":11886:11979   */\n      tag_387\n        /* \"#utility.yul\":11975:11978   */\n      dup3\n        /* \"#utility.yul\":11886:11979   */\n      tag_236\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":12004:12006   */\n      0x0a\n        /* \"#utility.yul\":11999:12002   */\n      dup3\n        /* \"#utility.yul\":11995:12007   */\n      add\n        /* \"#utility.yul\":11988:12007   */\n      swap1\n      pop\n        /* \"#utility.yul\":11611:12013   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12019:14510   */\n    tag_76:\n        /* \"#utility.yul\":12939:12942   */\n      0x00\n        /* \"#utility.yul\":12961:13109   */\n      tag_389\n        /* \"#utility.yul\":13105:13108   */\n      dup3\n        /* \"#utility.yul\":12961:13109   */\n      tag_223\n      jump\t// in\n    tag_389:\n        /* \"#utility.yul\":12954:13109   */\n      swap2\n      pop\n        /* \"#utility.yul\":13126:13219   */\n      tag_390\n        /* \"#utility.yul\":13215:13218   */\n      dup3\n        /* \"#utility.yul\":13206:13212   */\n      dup9\n        /* \"#utility.yul\":13126:13219   */\n      tag_227\n      jump\t// in\n    tag_390:\n        /* \"#utility.yul\":13119:13219   */\n      swap2\n      pop\n        /* \"#utility.yul\":13236:13384   */\n      tag_391\n        /* \"#utility.yul\":13380:13383   */\n      dup3\n        /* \"#utility.yul\":13236:13384   */\n      tag_229\n      jump\t// in\n    tag_391:\n        /* \"#utility.yul\":13229:13384   */\n      swap2\n      pop\n        /* \"#utility.yul\":13401:13494   */\n      tag_392\n        /* \"#utility.yul\":13490:13493   */\n      dup3\n        /* \"#utility.yul\":13481:13487   */\n      dup8\n        /* \"#utility.yul\":13401:13494   */\n      tag_227\n      jump\t// in\n    tag_392:\n        /* \"#utility.yul\":13394:13494   */\n      swap2\n      pop\n        /* \"#utility.yul\":13511:13659   */\n      tag_393\n        /* \"#utility.yul\":13655:13658   */\n      dup3\n        /* \"#utility.yul\":13511:13659   */\n      tag_231\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":13504:13659   */\n      swap2\n      pop\n        /* \"#utility.yul\":13676:13769   */\n      tag_394\n        /* \"#utility.yul\":13765:13768   */\n      dup3\n        /* \"#utility.yul\":13756:13762   */\n      dup7\n        /* \"#utility.yul\":13676:13769   */\n      tag_227\n      jump\t// in\n    tag_394:\n        /* \"#utility.yul\":13669:13769   */\n      swap2\n      pop\n        /* \"#utility.yul\":13786:13934   */\n      tag_395\n        /* \"#utility.yul\":13930:13933   */\n      dup3\n        /* \"#utility.yul\":13786:13934   */\n      tag_233\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":13779:13934   */\n      swap2\n      pop\n        /* \"#utility.yul\":13951:14044   */\n      tag_396\n        /* \"#utility.yul\":14040:14043   */\n      dup3\n        /* \"#utility.yul\":14031:14037   */\n      dup6\n        /* \"#utility.yul\":13951:14044   */\n      tag_227\n      jump\t// in\n    tag_396:\n        /* \"#utility.yul\":13944:14044   */\n      swap2\n      pop\n        /* \"#utility.yul\":14061:14209   */\n      tag_397\n        /* \"#utility.yul\":14205:14208   */\n      dup3\n        /* \"#utility.yul\":14061:14209   */\n      tag_235\n      jump\t// in\n    tag_397:\n        /* \"#utility.yul\":14054:14209   */\n      swap2\n      pop\n        /* \"#utility.yul\":14226:14319   */\n      tag_398\n        /* \"#utility.yul\":14315:14318   */\n      dup3\n        /* \"#utility.yul\":14306:14312   */\n      dup5\n        /* \"#utility.yul\":14226:14319   */\n      tag_227\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":14219:14319   */\n      swap2\n      pop\n        /* \"#utility.yul\":14336:14484   */\n      tag_399\n        /* \"#utility.yul\":14480:14483   */\n      dup3\n        /* \"#utility.yul\":14336:14484   */\n      tag_237\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":14329:14484   */\n      swap2\n      pop\n        /* \"#utility.yul\":14501:14504   */\n      dup2\n        /* \"#utility.yul\":14494:14504   */\n      swap1\n      pop\n        /* \"#utility.yul\":12019:14510   */\n      swap7\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14516:14684   */\n    tag_238:\n        /* \"#utility.yul\":14599:14610   */\n      0x00\n        /* \"#utility.yul\":14633:14639   */\n      dup3\n        /* \"#utility.yul\":14628:14631   */\n      dup3\n        /* \"#utility.yul\":14621:14640   */\n      mstore\n        /* \"#utility.yul\":14673:14677   */\n      0x20\n        /* \"#utility.yul\":14668:14671   */\n      dup3\n        /* \"#utility.yul\":14664:14678   */\n      add\n        /* \"#utility.yul\":14649:14678   */\n      swap1\n      pop\n        /* \"#utility.yul\":14516:14684   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14690:14792   */\n    tag_239:\n        /* \"#utility.yul\":14731:14737   */\n      0x00\n        /* \"#utility.yul\":14782:14784   */\n      0x1f\n        /* \"#utility.yul\":14778:14785   */\n      not\n        /* \"#utility.yul\":14773:14775   */\n      0x1f\n        /* \"#utility.yul\":14766:14771   */\n      dup4\n        /* \"#utility.yul\":14762:14776   */\n      add\n        /* \"#utility.yul\":14758:14786   */\n      and\n        /* \"#utility.yul\":14748:14786   */\n      swap1\n      pop\n        /* \"#utility.yul\":14690:14792   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14798:15171   */\n    tag_240:\n        /* \"#utility.yul\":14884:14887   */\n      0x00\n        /* \"#utility.yul\":14912:14950   */\n      tag_403\n        /* \"#utility.yul\":14944:14949   */\n      dup3\n        /* \"#utility.yul\":14912:14950   */\n      tag_224\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":14966:15036   */\n      tag_404\n        /* \"#utility.yul\":15029:15035   */\n      dup2\n        /* \"#utility.yul\":15024:15027   */\n      dup6\n        /* \"#utility.yul\":14966:15036   */\n      tag_238\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":14959:15036   */\n      swap4\n      pop\n        /* \"#utility.yul\":15045:15110   */\n      tag_405\n        /* \"#utility.yul\":15103:15109   */\n      dup2\n        /* \"#utility.yul\":15098:15101   */\n      dup6\n        /* \"#utility.yul\":15091:15095   */\n      0x20\n        /* \"#utility.yul\":15084:15089   */\n      dup7\n        /* \"#utility.yul\":15080:15096   */\n      add\n        /* \"#utility.yul\":15045:15110   */\n      tag_226\n      jump\t// in\n    tag_405:\n        /* \"#utility.yul\":15135:15164   */\n      tag_406\n        /* \"#utility.yul\":15157:15163   */\n      dup2\n        /* \"#utility.yul\":15135:15164   */\n      tag_239\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":15130:15133   */\n      dup5\n        /* \"#utility.yul\":15126:15165   */\n      add\n        /* \"#utility.yul\":15119:15165   */\n      swap2\n      pop\n        /* \"#utility.yul\":14888:15171   */\n      pop\n        /* \"#utility.yul\":14798:15171   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15177:15295   */\n    tag_241:\n        /* \"#utility.yul\":15264:15288   */\n      tag_408\n        /* \"#utility.yul\":15282:15287   */\n      dup2\n        /* \"#utility.yul\":15264:15288   */\n      tag_218\n      jump\t// in\n    tag_408:\n        /* \"#utility.yul\":15259:15262   */\n      dup3\n        /* \"#utility.yul\":15252:15289   */\n      mstore\n        /* \"#utility.yul\":15177:15295   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15301:16518   */\n    tag_78:\n        /* \"#utility.yul\":15647:15651   */\n      0x00\n        /* \"#utility.yul\":15685:15688   */\n      0x0120\n        /* \"#utility.yul\":15674:15683   */\n      dup3\n        /* \"#utility.yul\":15670:15689   */\n      add\n        /* \"#utility.yul\":15662:15689   */\n      swap1\n      pop\n        /* \"#utility.yul\":15735:15744   */\n      dup2\n        /* \"#utility.yul\":15729:15733   */\n      dup2\n        /* \"#utility.yul\":15725:15745   */\n      sub\n        /* \"#utility.yul\":15721:15722   */\n      0x00\n        /* \"#utility.yul\":15710:15719   */\n      dup4\n        /* \"#utility.yul\":15706:15723   */\n      add\n        /* \"#utility.yul\":15699:15746   */\n      mstore\n        /* \"#utility.yul\":15763:15839   */\n      tag_410\n        /* \"#utility.yul\":15834:15838   */\n      dup2\n        /* \"#utility.yul\":15825:15831   */\n      dup13\n        /* \"#utility.yul\":15763:15839   */\n      tag_240\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":15755:15839   */\n      swap1\n      pop\n        /* \"#utility.yul\":15849:15921   */\n      tag_411\n        /* \"#utility.yul\":15917:15919   */\n      0x20\n        /* \"#utility.yul\":15906:15915   */\n      dup4\n        /* \"#utility.yul\":15902:15920   */\n      add\n        /* \"#utility.yul\":15893:15899   */\n      dup12\n        /* \"#utility.yul\":15849:15921   */\n      tag_213\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":15931:16003   */\n      tag_412\n        /* \"#utility.yul\":15999:16001   */\n      0x40\n        /* \"#utility.yul\":15988:15997   */\n      dup4\n        /* \"#utility.yul\":15984:16002   */\n      add\n        /* \"#utility.yul\":15975:15981   */\n      dup11\n        /* \"#utility.yul\":15931:16003   */\n      tag_213\n      jump\t// in\n    tag_412:\n        /* \"#utility.yul\":16013:16085   */\n      tag_413\n        /* \"#utility.yul\":16081:16083   */\n      0x60\n        /* \"#utility.yul\":16070:16079   */\n      dup4\n        /* \"#utility.yul\":16066:16084   */\n      add\n        /* \"#utility.yul\":16057:16063   */\n      dup10\n        /* \"#utility.yul\":16013:16085   */\n      tag_213\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":16095:16166   */\n      tag_414\n        /* \"#utility.yul\":16161:16164   */\n      0x80\n        /* \"#utility.yul\":16150:16159   */\n      dup4\n        /* \"#utility.yul\":16146:16165   */\n      add\n        /* \"#utility.yul\":16137:16143   */\n      dup9\n        /* \"#utility.yul\":16095:16166   */\n      tag_215\n      jump\t// in\n    tag_414:\n        /* \"#utility.yul\":16176:16262   */\n      tag_415\n        /* \"#utility.yul\":16257:16260   */\n      0xa0\n        /* \"#utility.yul\":16246:16255   */\n      dup4\n        /* \"#utility.yul\":16242:16261   */\n      add\n        /* \"#utility.yul\":16233:16239   */\n      dup8\n        /* \"#utility.yul\":16176:16262   */\n      tag_198\n      jump\t// in\n    tag_415:\n        /* \"#utility.yul\":16272:16345   */\n      tag_416\n        /* \"#utility.yul\":16340:16343   */\n      0xc0\n        /* \"#utility.yul\":16329:16338   */\n      dup4\n        /* \"#utility.yul\":16325:16344   */\n      add\n        /* \"#utility.yul\":16316:16322   */\n      dup7\n        /* \"#utility.yul\":16272:16345   */\n      tag_241\n      jump\t// in\n    tag_416:\n        /* \"#utility.yul\":16355:16428   */\n      tag_417\n        /* \"#utility.yul\":16423:16426   */\n      0xe0\n        /* \"#utility.yul\":16412:16421   */\n      dup4\n        /* \"#utility.yul\":16408:16427   */\n      add\n        /* \"#utility.yul\":16399:16405   */\n      dup6\n        /* \"#utility.yul\":16355:16428   */\n      tag_207\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":16438:16511   */\n      tag_418\n        /* \"#utility.yul\":16506:16509   */\n      0x0100\n        /* \"#utility.yul\":16495:16504   */\n      dup4\n        /* \"#utility.yul\":16491:16510   */\n      add\n        /* \"#utility.yul\":16482:16488   */\n      dup5\n        /* \"#utility.yul\":16438:16511   */\n      tag_207\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":15301:16518   */\n      swap11\n      swap10\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16524:16667   */\n    tag_242:\n        /* \"#utility.yul\":16581:16586   */\n      0x00\n        /* \"#utility.yul\":16612:16618   */\n      dup2\n        /* \"#utility.yul\":16606:16619   */\n      mload\n        /* \"#utility.yul\":16597:16619   */\n      swap1\n      pop\n        /* \"#utility.yul\":16628:16661   */\n      tag_420\n        /* \"#utility.yul\":16655:16660   */\n      dup2\n        /* \"#utility.yul\":16628:16661   */\n      tag_203\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":16524:16667   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16673:17024   */\n    tag_82:\n        /* \"#utility.yul\":16743:16749   */\n      0x00\n        /* \"#utility.yul\":16792:16794   */\n      0x20\n        /* \"#utility.yul\":16780:16789   */\n      dup3\n        /* \"#utility.yul\":16771:16778   */\n      dup5\n        /* \"#utility.yul\":16767:16790   */\n      sub\n        /* \"#utility.yul\":16763:16795   */\n      slt\n        /* \"#utility.yul\":16760:16879   */\n      iszero\n      tag_422\n      jumpi\n        /* \"#utility.yul\":16798:16877   */\n      tag_423\n      tag_200\n      jump\t// in\n    tag_423:\n        /* \"#utility.yul\":16760:16879   */\n    tag_422:\n        /* \"#utility.yul\":16918:16919   */\n      0x00\n        /* \"#utility.yul\":16943:17007   */\n      tag_424\n        /* \"#utility.yul\":16999:17006   */\n      dup5\n        /* \"#utility.yul\":16990:16996   */\n      dup3\n        /* \"#utility.yul\":16979:16988   */\n      dup6\n        /* \"#utility.yul\":16975:16997   */\n      add\n        /* \"#utility.yul\":16943:17007   */\n      tag_242\n      jump\t// in\n    tag_424:\n        /* \"#utility.yul\":16933:17007   */\n      swap2\n      pop\n        /* \"#utility.yul\":16889:17017   */\n      pop\n        /* \"#utility.yul\":16673:17024   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17030:17472   */\n    tag_93:\n        /* \"#utility.yul\":17179:17183   */\n      0x00\n        /* \"#utility.yul\":17217:17219   */\n      0x60\n        /* \"#utility.yul\":17206:17215   */\n      dup3\n        /* \"#utility.yul\":17202:17220   */\n      add\n        /* \"#utility.yul\":17194:17220   */\n      swap1\n      pop\n        /* \"#utility.yul\":17230:17301   */\n      tag_426\n        /* \"#utility.yul\":17298:17299   */\n      0x00\n        /* \"#utility.yul\":17287:17296   */\n      dup4\n        /* \"#utility.yul\":17283:17300   */\n      add\n        /* \"#utility.yul\":17274:17280   */\n      dup7\n        /* \"#utility.yul\":17230:17301   */\n      tag_213\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":17311:17383   */\n      tag_427\n        /* \"#utility.yul\":17379:17381   */\n      0x20\n        /* \"#utility.yul\":17368:17377   */\n      dup4\n        /* \"#utility.yul\":17364:17382   */\n      add\n        /* \"#utility.yul\":17355:17361   */\n      dup6\n        /* \"#utility.yul\":17311:17383   */\n      tag_213\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":17393:17465   */\n      tag_428\n        /* \"#utility.yul\":17461:17463   */\n      0x40\n        /* \"#utility.yul\":17450:17459   */\n      dup4\n        /* \"#utility.yul\":17446:17464   */\n      add\n        /* \"#utility.yul\":17437:17443   */\n      dup5\n        /* \"#utility.yul\":17393:17465   */\n      tag_241\n      jump\t// in\n    tag_428:\n        /* \"#utility.yul\":17030:17472   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17478:17810   */\n    tag_98:\n        /* \"#utility.yul\":17599:17603   */\n      0x00\n        /* \"#utility.yul\":17637:17639   */\n      0x40\n        /* \"#utility.yul\":17626:17635   */\n      dup3\n        /* \"#utility.yul\":17622:17640   */\n      add\n        /* \"#utility.yul\":17614:17640   */\n      swap1\n      pop\n        /* \"#utility.yul\":17650:17721   */\n      tag_430\n        /* \"#utility.yul\":17718:17719   */\n      0x00\n        /* \"#utility.yul\":17707:17716   */\n      dup4\n        /* \"#utility.yul\":17703:17720   */\n      add\n        /* \"#utility.yul\":17694:17700   */\n      dup6\n        /* \"#utility.yul\":17650:17721   */\n      tag_213\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":17731:17803   */\n      tag_431\n        /* \"#utility.yul\":17799:17801   */\n      0x20\n        /* \"#utility.yul\":17788:17797   */\n      dup4\n        /* \"#utility.yul\":17784:17802   */\n      add\n        /* \"#utility.yul\":17775:17781   */\n      dup5\n        /* \"#utility.yul\":17731:17803   */\n      tag_213\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":17478:17810   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17816:17985   */\n    tag_243:\n        /* \"#utility.yul\":17900:17911   */\n      0x00\n        /* \"#utility.yul\":17934:17940   */\n      dup3\n        /* \"#utility.yul\":17929:17932   */\n      dup3\n        /* \"#utility.yul\":17922:17941   */\n      mstore\n        /* \"#utility.yul\":17974:17978   */\n      0x20\n        /* \"#utility.yul\":17969:17972   */\n      dup3\n        /* \"#utility.yul\":17965:17979   */\n      add\n        /* \"#utility.yul\":17950:17979   */\n      swap1\n      pop\n        /* \"#utility.yul\":17816:17985   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17991:18232   */\n    tag_244:\n        /* \"#utility.yul\":18131:18165   */\n      0x5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f\n        /* \"#utility.yul\":18127:18128   */\n      0x00\n        /* \"#utility.yul\":18119:18125   */\n      dup3\n        /* \"#utility.yul\":18115:18129   */\n      add\n        /* \"#utility.yul\":18108:18166   */\n      mstore\n        /* \"#utility.yul\":18200:18224   */\n      0x20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000\n        /* \"#utility.yul\":18195:18197   */\n      0x20\n        /* \"#utility.yul\":18187:18193   */\n      dup3\n        /* \"#utility.yul\":18183:18198   */\n      add\n        /* \"#utility.yul\":18176:18225   */\n      mstore\n        /* \"#utility.yul\":17991:18232   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18238:18604   */\n    tag_245:\n        /* \"#utility.yul\":18380:18383   */\n      0x00\n        /* \"#utility.yul\":18401:18468   */\n      tag_435\n        /* \"#utility.yul\":18465:18467   */\n      0x36\n        /* \"#utility.yul\":18460:18463   */\n      dup4\n        /* \"#utility.yul\":18401:18468   */\n      tag_243\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":18394:18468   */\n      swap2\n      pop\n        /* \"#utility.yul\":18477:18570   */\n      tag_436\n        /* \"#utility.yul\":18566:18569   */\n      dup3\n        /* \"#utility.yul\":18477:18570   */\n      tag_244\n      jump\t// in\n    tag_436:\n        /* \"#utility.yul\":18595:18597   */\n      0x40\n        /* \"#utility.yul\":18590:18593   */\n      dup3\n        /* \"#utility.yul\":18586:18598   */\n      add\n        /* \"#utility.yul\":18579:18598   */\n      swap1\n      pop\n        /* \"#utility.yul\":18238:18604   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18610:19029   */\n    tag_104:\n        /* \"#utility.yul\":18776:18780   */\n      0x00\n        /* \"#utility.yul\":18814:18816   */\n      0x20\n        /* \"#utility.yul\":18803:18812   */\n      dup3\n        /* \"#utility.yul\":18799:18817   */\n      add\n        /* \"#utility.yul\":18791:18817   */\n      swap1\n      pop\n        /* \"#utility.yul\":18863:18872   */\n      dup2\n        /* \"#utility.yul\":18857:18861   */\n      dup2\n        /* \"#utility.yul\":18853:18873   */\n      sub\n        /* \"#utility.yul\":18849:18850   */\n      0x00\n        /* \"#utility.yul\":18838:18847   */\n      dup4\n        /* \"#utility.yul\":18834:18851   */\n      add\n        /* \"#utility.yul\":18827:18874   */\n      mstore\n        /* \"#utility.yul\":18891:19022   */\n      tag_438\n        /* \"#utility.yul\":19017:19021   */\n      dup2\n        /* \"#utility.yul\":18891:19022   */\n      tag_245\n      jump\t// in\n    tag_438:\n        /* \"#utility.yul\":18883:19022   */\n      swap1\n      pop\n        /* \"#utility.yul\":18610:19029   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19035:19367   */\n    tag_107:\n        /* \"#utility.yul\":19156:19160   */\n      0x00\n        /* \"#utility.yul\":19194:19196   */\n      0x40\n        /* \"#utility.yul\":19183:19192   */\n      dup3\n        /* \"#utility.yul\":19179:19197   */\n      add\n        /* \"#utility.yul\":19171:19197   */\n      swap1\n      pop\n        /* \"#utility.yul\":19207:19278   */\n      tag_440\n        /* \"#utility.yul\":19275:19276   */\n      0x00\n        /* \"#utility.yul\":19264:19273   */\n      dup4\n        /* \"#utility.yul\":19260:19277   */\n      add\n        /* \"#utility.yul\":19251:19257   */\n      dup6\n        /* \"#utility.yul\":19207:19278   */\n      tag_213\n      jump\t// in\n    tag_440:\n        /* \"#utility.yul\":19288:19360   */\n      tag_441\n        /* \"#utility.yul\":19356:19358   */\n      0x20\n        /* \"#utility.yul\":19345:19354   */\n      dup4\n        /* \"#utility.yul\":19341:19359   */\n      add\n        /* \"#utility.yul\":19332:19338   */\n      dup5\n        /* \"#utility.yul\":19288:19360   */\n      tag_241\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":19035:19367   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19373:19452   */\n    tag_246:\n        /* \"#utility.yul\":19412:19419   */\n      0x00\n        /* \"#utility.yul\":19441:19446   */\n      dup2\n        /* \"#utility.yul\":19430:19446   */\n      swap1\n      pop\n        /* \"#utility.yul\":19373:19452   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19458:19615   */\n    tag_247:\n        /* \"#utility.yul\":19563:19608   */\n      tag_444\n        /* \"#utility.yul\":19583:19607   */\n      tag_445\n        /* \"#utility.yul\":19601:19606   */\n      dup3\n        /* \"#utility.yul\":19583:19607   */\n      tag_202\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":19563:19608   */\n      tag_246\n      jump\t// in\n    tag_444:\n        /* \"#utility.yul\":19558:19561   */\n      dup3\n        /* \"#utility.yul\":19551:19609   */\n      mstore\n        /* \"#utility.yul\":19458:19615   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19621:20018   */\n    tag_113:\n        /* \"#utility.yul\":19761:19764   */\n      0x00\n        /* \"#utility.yul\":19776:19851   */\n      tag_447\n        /* \"#utility.yul\":19847:19850   */\n      dup3\n        /* \"#utility.yul\":19838:19844   */\n      dup6\n        /* \"#utility.yul\":19776:19851   */\n      tag_247\n      jump\t// in\n    tag_447:\n        /* \"#utility.yul\":19876:19878   */\n      0x20\n        /* \"#utility.yul\":19871:19874   */\n      dup3\n        /* \"#utility.yul\":19867:19879   */\n      add\n        /* \"#utility.yul\":19860:19879   */\n      swap2\n      pop\n        /* \"#utility.yul\":19889:19964   */\n      tag_448\n        /* \"#utility.yul\":19960:19963   */\n      dup3\n        /* \"#utility.yul\":19951:19957   */\n      dup5\n        /* \"#utility.yul\":19889:19964   */\n      tag_247\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":19989:19991   */\n      0x20\n        /* \"#utility.yul\":19984:19987   */\n      dup3\n        /* \"#utility.yul\":19980:19992   */\n      add\n        /* \"#utility.yul\":19973:19992   */\n      swap2\n      pop\n        /* \"#utility.yul\":20009:20012   */\n      dup2\n        /* \"#utility.yul\":20002:20012   */\n      swap1\n      pop\n        /* \"#utility.yul\":19621:20018   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20024:20173   */\n    tag_248:\n        /* \"#utility.yul\":20060:20067   */\n      0x00\n        /* \"#utility.yul\":20100:20166   */\n      0xffffffffffffffff000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":20093:20098   */\n      dup3\n        /* \"#utility.yul\":20089:20167   */\n      and\n        /* \"#utility.yul\":20078:20167   */\n      swap1\n      pop\n        /* \"#utility.yul\":20024:20173   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20179:20257   */\n    tag_249:\n        /* \"#utility.yul\":20217:20224   */\n      0x00\n        /* \"#utility.yul\":20246:20251   */\n      dup2\n        /* \"#utility.yul\":20235:20251   */\n      swap1\n      pop\n        /* \"#utility.yul\":20179:20257   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20263:20416   */\n    tag_250:\n        /* \"#utility.yul\":20366:20409   */\n      tag_452\n        /* \"#utility.yul\":20385:20408   */\n      tag_453\n        /* \"#utility.yul\":20402:20407   */\n      dup3\n        /* \"#utility.yul\":20385:20408   */\n      tag_248\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":20366:20409   */\n      tag_249\n      jump\t// in\n    tag_452:\n        /* \"#utility.yul\":20361:20364   */\n      dup3\n        /* \"#utility.yul\":20354:20410   */\n      mstore\n        /* \"#utility.yul\":20263:20416   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20422:20814   */\n    tag_118:\n        /* \"#utility.yul\":20560:20563   */\n      0x00\n        /* \"#utility.yul\":20575:20650   */\n      tag_455\n        /* \"#utility.yul\":20646:20649   */\n      dup3\n        /* \"#utility.yul\":20637:20643   */\n      dup6\n        /* \"#utility.yul\":20575:20650   */\n      tag_247\n      jump\t// in\n    tag_455:\n        /* \"#utility.yul\":20675:20677   */\n      0x20\n        /* \"#utility.yul\":20670:20673   */\n      dup3\n        /* \"#utility.yul\":20666:20678   */\n      add\n        /* \"#utility.yul\":20659:20678   */\n      swap2\n      pop\n        /* \"#utility.yul\":20688:20761   */\n      tag_456\n        /* \"#utility.yul\":20757:20760   */\n      dup3\n        /* \"#utility.yul\":20748:20754   */\n      dup5\n        /* \"#utility.yul\":20688:20761   */\n      tag_250\n      jump\t// in\n    tag_456:\n        /* \"#utility.yul\":20786:20787   */\n      0x08\n        /* \"#utility.yul\":20781:20784   */\n      dup3\n        /* \"#utility.yul\":20777:20788   */\n      add\n        /* \"#utility.yul\":20770:20788   */\n      swap2\n      pop\n        /* \"#utility.yul\":20805:20808   */\n      dup2\n        /* \"#utility.yul\":20798:20808   */\n      swap1\n      pop\n        /* \"#utility.yul\":20422:20814   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20820:21000   */\n    tag_251:\n        /* \"#utility.yul\":20868:20945   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":20865:20866   */\n      0x00\n        /* \"#utility.yul\":20858:20946   */\n      mstore\n        /* \"#utility.yul\":20965:20969   */\n      0x11\n        /* \"#utility.yul\":20962:20963   */\n      0x04\n        /* \"#utility.yul\":20955:20970   */\n      mstore\n        /* \"#utility.yul\":20989:20993   */\n      0x24\n        /* \"#utility.yul\":20986:20987   */\n      0x00\n        /* \"#utility.yul\":20979:20994   */\n      revert\n        /* \"#utility.yul\":21006:21239   */\n    tag_124:\n        /* \"#utility.yul\":21045:21048   */\n      0x00\n        /* \"#utility.yul\":21068:21092   */\n      tag_459\n        /* \"#utility.yul\":21086:21091   */\n      dup3\n        /* \"#utility.yul\":21068:21092   */\n      tag_218\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":21059:21092   */\n      swap2\n      pop\n        /* \"#utility.yul\":21114:21180   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":21107:21112   */\n      dup3\n        /* \"#utility.yul\":21104:21181   */\n      sub\n        /* \"#utility.yul\":21101:21204   */\n      tag_460\n      jumpi\n        /* \"#utility.yul\":21184:21202   */\n      tag_461\n      tag_251\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":21101:21204   */\n    tag_460:\n        /* \"#utility.yul\":21231:21232   */\n      0x01\n        /* \"#utility.yul\":21224:21229   */\n      dup3\n        /* \"#utility.yul\":21220:21233   */\n      add\n        /* \"#utility.yul\":21213:21233   */\n      swap1\n      pop\n        /* \"#utility.yul\":21006:21239   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21245:21425   */\n    tag_157:\n        /* \"#utility.yul\":21293:21370   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21290:21291   */\n      0x00\n        /* \"#utility.yul\":21283:21371   */\n      mstore\n        /* \"#utility.yul\":21390:21394   */\n      0x12\n        /* \"#utility.yul\":21387:21388   */\n      0x04\n        /* \"#utility.yul\":21380:21395   */\n      mstore\n        /* \"#utility.yul\":21414:21418   */\n      0x24\n        /* \"#utility.yul\":21411:21412   */\n      0x00\n        /* \"#utility.yul\":21404:21419   */\n      revert\n        /* \"#utility.yul\":21431:21616   */\n    tag_126:\n        /* \"#utility.yul\":21471:21472   */\n      0x00\n        /* \"#utility.yul\":21488:21508   */\n      tag_464\n        /* \"#utility.yul\":21506:21507   */\n      dup3\n        /* \"#utility.yul\":21488:21508   */\n      tag_218\n      jump\t// in\n    tag_464:\n        /* \"#utility.yul\":21483:21508   */\n      swap2\n      pop\n        /* \"#utility.yul\":21522:21542   */\n      tag_465\n        /* \"#utility.yul\":21540:21541   */\n      dup4\n        /* \"#utility.yul\":21522:21542   */\n      tag_218\n      jump\t// in\n    tag_465:\n        /* \"#utility.yul\":21517:21542   */\n      swap3\n      pop\n        /* \"#utility.yul\":21561:21562   */\n      dup3\n        /* \"#utility.yul\":21551:21586   */\n      tag_466\n      jumpi\n        /* \"#utility.yul\":21566:21584   */\n      tag_467\n      tag_157\n      jump\t// in\n    tag_467:\n        /* \"#utility.yul\":21551:21586   */\n    tag_466:\n        /* \"#utility.yul\":21608:21609   */\n      dup3\n        /* \"#utility.yul\":21605:21606   */\n      dup3\n        /* \"#utility.yul\":21601:21610   */\n      div\n        /* \"#utility.yul\":21596:21610   */\n      swap1\n      pop\n        /* \"#utility.yul\":21431:21616   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21622:21802   */\n    tag_129:\n        /* \"#utility.yul\":21670:21747   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":21667:21668   */\n      0x00\n        /* \"#utility.yul\":21660:21748   */\n      mstore\n        /* \"#utility.yul\":21767:21771   */\n      0x41\n        /* \"#utility.yul\":21764:21765   */\n      0x04\n        /* \"#utility.yul\":21757:21772   */\n      mstore\n        /* \"#utility.yul\":21791:21795   */\n      0x24\n        /* \"#utility.yul\":21788:21789   */\n      0x00\n        /* \"#utility.yul\":21781:21796   */\n      revert\n        /* \"#utility.yul\":21808:22002   */\n    tag_134:\n        /* \"#utility.yul\":21848:21852   */\n      0x00\n        /* \"#utility.yul\":21868:21888   */\n      tag_470\n        /* \"#utility.yul\":21886:21887   */\n      dup3\n        /* \"#utility.yul\":21868:21888   */\n      tag_218\n      jump\t// in\n    tag_470:\n        /* \"#utility.yul\":21863:21888   */\n      swap2\n      pop\n        /* \"#utility.yul\":21902:21922   */\n      tag_471\n        /* \"#utility.yul\":21920:21921   */\n      dup4\n        /* \"#utility.yul\":21902:21922   */\n      tag_218\n      jump\t// in\n    tag_471:\n        /* \"#utility.yul\":21897:21922   */\n      swap3\n      pop\n        /* \"#utility.yul\":21946:21947   */\n      dup3\n        /* \"#utility.yul\":21943:21944   */\n      dup3\n        /* \"#utility.yul\":21939:21948   */\n      sub\n        /* \"#utility.yul\":21931:21948   */\n      swap1\n      pop\n        /* \"#utility.yul\":21970:21971   */\n      dup2\n        /* \"#utility.yul\":21964:21968   */\n      dup2\n        /* \"#utility.yul\":21961:21972   */\n      gt\n        /* \"#utility.yul\":21958:21995   */\n      iszero\n      tag_472\n      jumpi\n        /* \"#utility.yul\":21975:21993   */\n      tag_473\n      tag_251\n      jump\t// in\n    tag_473:\n        /* \"#utility.yul\":21958:21995   */\n    tag_472:\n        /* \"#utility.yul\":21808:22002   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22008:22356   */\n    tag_137:\n        /* \"#utility.yul\":22048:22055   */\n      0x00\n        /* \"#utility.yul\":22071:22091   */\n      tag_475\n        /* \"#utility.yul\":22089:22090   */\n      dup3\n        /* \"#utility.yul\":22071:22091   */\n      tag_218\n      jump\t// in\n    tag_475:\n        /* \"#utility.yul\":22066:22091   */\n      swap2\n      pop\n        /* \"#utility.yul\":22105:22125   */\n      tag_476\n        /* \"#utility.yul\":22123:22124   */\n      dup4\n        /* \"#utility.yul\":22105:22125   */\n      tag_218\n      jump\t// in\n    tag_476:\n        /* \"#utility.yul\":22100:22125   */\n      swap3\n      pop\n        /* \"#utility.yul\":22293:22294   */\n      dup2\n        /* \"#utility.yul\":22225:22291   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":22221:22295   */\n      div\n        /* \"#utility.yul\":22218:22219   */\n      dup4\n        /* \"#utility.yul\":22215:22296   */\n      gt\n        /* \"#utility.yul\":22210:22211   */\n      dup3\n        /* \"#utility.yul\":22203:22212   */\n      iszero\n        /* \"#utility.yul\":22196:22213   */\n      iszero\n        /* \"#utility.yul\":22192:22297   */\n      and\n        /* \"#utility.yul\":22189:22320   */\n      iszero\n      tag_477\n      jumpi\n        /* \"#utility.yul\":22300:22318   */\n      tag_478\n      tag_251\n      jump\t// in\n    tag_478:\n        /* \"#utility.yul\":22189:22320   */\n    tag_477:\n        /* \"#utility.yul\":22348:22349   */\n      dup3\n        /* \"#utility.yul\":22345:22346   */\n      dup3\n        /* \"#utility.yul\":22341:22350   */\n      mul\n        /* \"#utility.yul\":22330:22350   */\n      swap1\n      pop\n        /* \"#utility.yul\":22008:22356   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22362:22448   */\n    tag_252:\n        /* \"#utility.yul\":22397:22404   */\n      0x00\n        /* \"#utility.yul\":22437:22441   */\n      0xff\n        /* \"#utility.yul\":22430:22435   */\n      dup3\n        /* \"#utility.yul\":22426:22442   */\n      and\n        /* \"#utility.yul\":22415:22442   */\n      swap1\n      pop\n        /* \"#utility.yul\":22362:22448   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22454:22642   */\n    tag_140:\n        /* \"#utility.yul\":22492:22495   */\n      0x00\n        /* \"#utility.yul\":22511:22529   */\n      tag_481\n        /* \"#utility.yul\":22527:22528   */\n      dup3\n        /* \"#utility.yul\":22511:22529   */\n      tag_252\n      jump\t// in\n    tag_481:\n        /* \"#utility.yul\":22506:22529   */\n      swap2\n      pop\n        /* \"#utility.yul\":22543:22561   */\n      tag_482\n        /* \"#utility.yul\":22559:22560   */\n      dup4\n        /* \"#utility.yul\":22543:22561   */\n      tag_252\n      jump\t// in\n    tag_482:\n        /* \"#utility.yul\":22538:22561   */\n      swap3\n      pop\n        /* \"#utility.yul\":22584:22585   */\n      dup3\n        /* \"#utility.yul\":22581:22582   */\n      dup3\n        /* \"#utility.yul\":22577:22586   */\n      add\n        /* \"#utility.yul\":22570:22586   */\n      swap1\n      pop\n        /* \"#utility.yul\":22607:22611   */\n      0xff\n        /* \"#utility.yul\":22602:22605   */\n      dup2\n        /* \"#utility.yul\":22599:22612   */\n      gt\n        /* \"#utility.yul\":22596:22635   */\n      iszero\n      tag_483\n      jumpi\n        /* \"#utility.yul\":22615:22633   */\n      tag_484\n      tag_251\n      jump\t// in\n    tag_484:\n        /* \"#utility.yul\":22596:22635   */\n    tag_483:\n        /* \"#utility.yul\":22454:22642   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22648:22828   */\n    tag_143:\n        /* \"#utility.yul\":22696:22773   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":22693:22694   */\n      0x00\n        /* \"#utility.yul\":22686:22774   */\n      mstore\n        /* \"#utility.yul\":22793:22797   */\n      0x32\n        /* \"#utility.yul\":22790:22791   */\n      0x04\n        /* \"#utility.yul\":22783:22798   */\n      mstore\n        /* \"#utility.yul\":22817:22821   */\n      0x24\n        /* \"#utility.yul\":22814:22815   */\n      0x00\n        /* \"#utility.yul\":22807:22822   */\n      revert\n        /* \"#utility.yul\":22834:22971   */\n    tag_253:\n        /* \"#utility.yul\":22888:22893   */\n      0x00\n        /* \"#utility.yul\":22919:22925   */\n      dup2\n        /* \"#utility.yul\":22913:22926   */\n      mload\n        /* \"#utility.yul\":22904:22926   */\n      swap1\n      pop\n        /* \"#utility.yul\":22935:22965   */\n      tag_487\n        /* \"#utility.yul\":22959:22964   */\n      dup2\n        /* \"#utility.yul\":22935:22965   */\n      tag_216\n      jump\t// in\n    tag_487:\n        /* \"#utility.yul\":22834:22971   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22977:23322   */\n    tag_150:\n        /* \"#utility.yul\":23044:23050   */\n      0x00\n        /* \"#utility.yul\":23093:23095   */\n      0x20\n        /* \"#utility.yul\":23081:23090   */\n      dup3\n        /* \"#utility.yul\":23072:23079   */\n      dup5\n        /* \"#utility.yul\":23068:23091   */\n      sub\n        /* \"#utility.yul\":23064:23096   */\n      slt\n        /* \"#utility.yul\":23061:23180   */\n      iszero\n      tag_489\n      jumpi\n        /* \"#utility.yul\":23099:23178   */\n      tag_490\n      tag_200\n      jump\t// in\n    tag_490:\n        /* \"#utility.yul\":23061:23180   */\n    tag_489:\n        /* \"#utility.yul\":23219:23220   */\n      0x00\n        /* \"#utility.yul\":23244:23305   */\n      tag_491\n        /* \"#utility.yul\":23297:23304   */\n      dup5\n        /* \"#utility.yul\":23288:23294   */\n      dup3\n        /* \"#utility.yul\":23277:23286   */\n      dup6\n        /* \"#utility.yul\":23273:23295   */\n      add\n        /* \"#utility.yul\":23244:23305   */\n      tag_253\n      jump\t// in\n    tag_491:\n        /* \"#utility.yul\":23234:23305   */\n      swap2\n      pop\n        /* \"#utility.yul\":23190:23315   */\n      pop\n        /* \"#utility.yul\":22977:23322   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23328:23557   */\n    tag_254:\n        /* \"#utility.yul\":23468:23502   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":23464:23465   */\n      0x00\n        /* \"#utility.yul\":23456:23462   */\n      dup3\n        /* \"#utility.yul\":23452:23466   */\n      add\n        /* \"#utility.yul\":23445:23503   */\n      mstore\n        /* \"#utility.yul\":23537:23549   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":23532:23534   */\n      0x20\n        /* \"#utility.yul\":23524:23530   */\n      dup3\n        /* \"#utility.yul\":23520:23535   */\n      add\n        /* \"#utility.yul\":23513:23550   */\n      mstore\n        /* \"#utility.yul\":23328:23557   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23563:23929   */\n    tag_255:\n        /* \"#utility.yul\":23705:23708   */\n      0x00\n        /* \"#utility.yul\":23726:23793   */\n      tag_494\n        /* \"#utility.yul\":23790:23792   */\n      0x2a\n        /* \"#utility.yul\":23785:23788   */\n      dup4\n        /* \"#utility.yul\":23726:23793   */\n      tag_243\n      jump\t// in\n    tag_494:\n        /* \"#utility.yul\":23719:23793   */\n      swap2\n      pop\n        /* \"#utility.yul\":23802:23895   */\n      tag_495\n        /* \"#utility.yul\":23891:23894   */\n      dup3\n        /* \"#utility.yul\":23802:23895   */\n      tag_254\n      jump\t// in\n    tag_495:\n        /* \"#utility.yul\":23920:23922   */\n      0x40\n        /* \"#utility.yul\":23915:23918   */\n      dup3\n        /* \"#utility.yul\":23911:23923   */\n      add\n        /* \"#utility.yul\":23904:23923   */\n      swap1\n      pop\n        /* \"#utility.yul\":23563:23929   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23935:24354   */\n    tag_153:\n        /* \"#utility.yul\":24101:24105   */\n      0x00\n        /* \"#utility.yul\":24139:24141   */\n      0x20\n        /* \"#utility.yul\":24128:24137   */\n      dup3\n        /* \"#utility.yul\":24124:24142   */\n      add\n        /* \"#utility.yul\":24116:24142   */\n      swap1\n      pop\n        /* \"#utility.yul\":24188:24197   */\n      dup2\n        /* \"#utility.yul\":24182:24186   */\n      dup2\n        /* \"#utility.yul\":24178:24198   */\n      sub\n        /* \"#utility.yul\":24174:24175   */\n      0x00\n        /* \"#utility.yul\":24163:24172   */\n      dup4\n        /* \"#utility.yul\":24159:24176   */\n      add\n        /* \"#utility.yul\":24152:24199   */\n      mstore\n        /* \"#utility.yul\":24216:24347   */\n      tag_497\n        /* \"#utility.yul\":24342:24346   */\n      dup2\n        /* \"#utility.yul\":24216:24347   */\n      tag_255\n      jump\t// in\n    tag_497:\n        /* \"#utility.yul\":24208:24347   */\n      swap1\n      pop\n        /* \"#utility.yul\":23935:24354   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":24360:24585   */\n    tag_256:\n        /* \"#utility.yul\":24500:24534   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":24496:24497   */\n      0x00\n        /* \"#utility.yul\":24488:24494   */\n      dup3\n        /* \"#utility.yul\":24484:24498   */\n      add\n        /* \"#utility.yul\":24477:24535   */\n      mstore\n        /* \"#utility.yul\":24569:24577   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":24564:24566   */\n      0x20\n        /* \"#utility.yul\":24556:24562   */\n      dup3\n        /* \"#utility.yul\":24552:24567   */\n      add\n        /* \"#utility.yul\":24545:24578   */\n      mstore\n        /* \"#utility.yul\":24360:24585   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":24591:24957   */\n    tag_257:\n        /* \"#utility.yul\":24733:24736   */\n      0x00\n        /* \"#utility.yul\":24754:24821   */\n      tag_500\n        /* \"#utility.yul\":24818:24820   */\n      0x26\n        /* \"#utility.yul\":24813:24816   */\n      dup4\n        /* \"#utility.yul\":24754:24821   */\n      tag_243\n      jump\t// in\n    tag_500:\n        /* \"#utility.yul\":24747:24821   */\n      swap2\n      pop\n        /* \"#utility.yul\":24830:24923   */\n      tag_501\n        /* \"#utility.yul\":24919:24922   */\n      dup3\n        /* \"#utility.yul\":24830:24923   */\n      tag_256\n      jump\t// in\n    tag_501:\n        /* \"#utility.yul\":24948:24950   */\n      0x40\n        /* \"#utility.yul\":24943:24946   */\n      dup3\n        /* \"#utility.yul\":24939:24951   */\n      add\n        /* \"#utility.yul\":24932:24951   */\n      swap1\n      pop\n        /* \"#utility.yul\":24591:24957   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":24963:25382   */\n    tag_168:\n        /* \"#utility.yul\":25129:25133   */\n      0x00\n        /* \"#utility.yul\":25167:25169   */\n      0x20\n        /* \"#utility.yul\":25156:25165   */\n      dup3\n        /* \"#utility.yul\":25152:25170   */\n      add\n        /* \"#utility.yul\":25144:25170   */\n      swap1\n      pop\n        /* \"#utility.yul\":25216:25225   */\n      dup2\n        /* \"#utility.yul\":25210:25214   */\n      dup2\n        /* \"#utility.yul\":25206:25226   */\n      sub\n        /* \"#utility.yul\":25202:25203   */\n      0x00\n        /* \"#utility.yul\":25191:25200   */\n      dup4\n        /* \"#utility.yul\":25187:25204   */\n      add\n        /* \"#utility.yul\":25180:25227   */\n      mstore\n        /* \"#utility.yul\":25244:25375   */\n      tag_503\n        /* \"#utility.yul\":25370:25374   */\n      dup2\n        /* \"#utility.yul\":25244:25375   */\n      tag_257\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":25236:25375   */\n      swap1\n      pop\n        /* \"#utility.yul\":24963:25382   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":25388:25659   */\n    tag_170:\n        /* \"#utility.yul\":25518:25521   */\n      0x00\n        /* \"#utility.yul\":25540:25633   */\n      tag_505\n        /* \"#utility.yul\":25629:25632   */\n      dup3\n        /* \"#utility.yul\":25620:25626   */\n      dup5\n        /* \"#utility.yul\":25540:25633   */\n      tag_227\n      jump\t// in\n    tag_505:\n        /* \"#utility.yul\":25533:25633   */\n      swap2\n      pop\n        /* \"#utility.yul\":25650:25653   */\n      dup2\n        /* \"#utility.yul\":25643:25653   */\n      swap1\n      pop\n        /* \"#utility.yul\":25388:25659   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":25665:25844   */\n    tag_258:\n        /* \"#utility.yul\":25805:25836   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":25801:25802   */\n      0x00\n        /* \"#utility.yul\":25793:25799   */\n      dup3\n        /* \"#utility.yul\":25789:25803   */\n      add\n        /* \"#utility.yul\":25782:25837   */\n      mstore\n        /* \"#utility.yul\":25665:25844   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":25850:26216   */\n    tag_259:\n        /* \"#utility.yul\":25992:25995   */\n      0x00\n        /* \"#utility.yul\":26013:26080   */\n      tag_508\n        /* \"#utility.yul\":26077:26079   */\n      0x1d\n        /* \"#utility.yul\":26072:26075   */\n      dup4\n        /* \"#utility.yul\":26013:26080   */\n      tag_243\n      jump\t// in\n    tag_508:\n        /* \"#utility.yul\":26006:26080   */\n      swap2\n      pop\n        /* \"#utility.yul\":26089:26182   */\n      tag_509\n        /* \"#utility.yul\":26178:26181   */\n      dup3\n        /* \"#utility.yul\":26089:26182   */\n      tag_258\n      jump\t// in\n    tag_509:\n        /* \"#utility.yul\":26207:26209   */\n      0x20\n        /* \"#utility.yul\":26202:26205   */\n      dup3\n        /* \"#utility.yul\":26198:26210   */\n      add\n        /* \"#utility.yul\":26191:26210   */\n      swap1\n      pop\n        /* \"#utility.yul\":25850:26216   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":26222:26641   */\n    tag_183:\n        /* \"#utility.yul\":26388:26392   */\n      0x00\n        /* \"#utility.yul\":26426:26428   */\n      0x20\n        /* \"#utility.yul\":26415:26424   */\n      dup3\n        /* \"#utility.yul\":26411:26429   */\n      add\n        /* \"#utility.yul\":26403:26429   */\n      swap1\n      pop\n        /* \"#utility.yul\":26475:26484   */\n      dup2\n        /* \"#utility.yul\":26469:26473   */\n      dup2\n        /* \"#utility.yul\":26465:26485   */\n      sub\n        /* \"#utility.yul\":26461:26462   */\n      0x00\n        /* \"#utility.yul\":26450:26459   */\n      dup4\n        /* \"#utility.yul\":26446:26463   */\n      add\n        /* \"#utility.yul\":26439:26486   */\n      mstore\n        /* \"#utility.yul\":26503:26634   */\n      tag_511\n        /* \"#utility.yul\":26629:26633   */\n      dup2\n        /* \"#utility.yul\":26503:26634   */\n      tag_259\n      jump\t// in\n    tag_511:\n        /* \"#utility.yul\":26495:26634   */\n      swap1\n      pop\n        /* \"#utility.yul\":26222:26641   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":26647:26746   */\n    tag_260:\n        /* \"#utility.yul\":26699:26705   */\n      0x00\n        /* \"#utility.yul\":26733:26738   */\n      dup2\n        /* \"#utility.yul\":26727:26739   */\n      mload\n        /* \"#utility.yul\":26717:26739   */\n      swap1\n      pop\n        /* \"#utility.yul\":26647:26746   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":26752:27129   */\n    tag_261:\n        /* \"#utility.yul\":26840:26843   */\n      0x00\n        /* \"#utility.yul\":26868:26907   */\n      tag_514\n        /* \"#utility.yul\":26901:26906   */\n      dup3\n        /* \"#utility.yul\":26868:26907   */\n      tag_260\n      jump\t// in\n    tag_514:\n        /* \"#utility.yul\":26923:26994   */\n      tag_515\n        /* \"#utility.yul\":26987:26993   */\n      dup2\n        /* \"#utility.yul\":26982:26985   */\n      dup6\n        /* \"#utility.yul\":26923:26994   */\n      tag_243\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":26916:26994   */\n      swap4\n      pop\n        /* \"#utility.yul\":27003:27068   */\n      tag_516\n        /* \"#utility.yul\":27061:27067   */\n      dup2\n        /* \"#utility.yul\":27056:27059   */\n      dup6\n        /* \"#utility.yul\":27049:27053   */\n      0x20\n        /* \"#utility.yul\":27042:27047   */\n      dup7\n        /* \"#utility.yul\":27038:27054   */\n      add\n        /* \"#utility.yul\":27003:27068   */\n      tag_226\n      jump\t// in\n    tag_516:\n        /* \"#utility.yul\":27093:27122   */\n      tag_517\n        /* \"#utility.yul\":27115:27121   */\n      dup2\n        /* \"#utility.yul\":27093:27122   */\n      tag_239\n      jump\t// in\n    tag_517:\n        /* \"#utility.yul\":27088:27091   */\n      dup5\n        /* \"#utility.yul\":27084:27123   */\n      add\n        /* \"#utility.yul\":27077:27123   */\n      swap2\n      pop\n        /* \"#utility.yul\":26844:27129   */\n      pop\n        /* \"#utility.yul\":26752:27129   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":27135:27448   */\n    tag_192:\n        /* \"#utility.yul\":27248:27252   */\n      0x00\n        /* \"#utility.yul\":27286:27288   */\n      0x20\n        /* \"#utility.yul\":27275:27284   */\n      dup3\n        /* \"#utility.yul\":27271:27289   */\n      add\n        /* \"#utility.yul\":27263:27289   */\n      swap1\n      pop\n        /* \"#utility.yul\":27335:27344   */\n      dup2\n        /* \"#utility.yul\":27329:27333   */\n      dup2\n        /* \"#utility.yul\":27325:27345   */\n      sub\n        /* \"#utility.yul\":27321:27322   */\n      0x00\n        /* \"#utility.yul\":27310:27319   */\n      dup4\n        /* \"#utility.yul\":27306:27323   */\n      add\n        /* \"#utility.yul\":27299:27346   */\n      mstore\n        /* \"#utility.yul\":27363:27441   */\n      tag_519\n        /* \"#utility.yul\":27436:27440   */\n      dup2\n        /* \"#utility.yul\":27427:27433   */\n      dup5\n        /* \"#utility.yul\":27363:27441   */\n      tag_261\n      jump\t// in\n    tag_519:\n        /* \"#utility.yul\":27355:27441   */\n      swap1\n      pop\n        /* \"#utility.yul\":27135:27448   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e7d839fb68cfae3d86b3534a6a9fb5b0bbb84b76071af0694142078f1ed1b4e064736f6c63430008100033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1501": {
									"entryPoint": null,
									"id": 1501,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 373,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32_fromMemory": {
									"entryPoint": 503,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address_fromMemory": {
									"entryPoint": 396,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": 526,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 327,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 467,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 295,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 290,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 347,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 477,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2072:8",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:8"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:8"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:8",
														"type": ""
													}
												],
												"src": "7:75:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:8"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:8"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:8",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:8",
														"type": ""
													}
												],
												"src": "334:126:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:8",
														"type": ""
													}
												],
												"src": "466:96:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:8"
															},
															"nodeType": "YulIf",
															"src": "621:63:8"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:8",
														"type": ""
													}
												],
												"src": "568:122:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:8"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:8",
														"type": ""
													}
												],
												"src": "696:143:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "939:413:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "985:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "987:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "987:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "987:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "960:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "969:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "956:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "956:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "981:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "952:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "952:32:8"
															},
															"nodeType": "YulIf",
															"src": "949:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "1078:128:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1093:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1107:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1097:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1122:74:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1168:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1179:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1164:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1164:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1188:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1132:31:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1132:64:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1122:6:8"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1216:129:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1231:16:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1245:2:8",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1235:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1261:74:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1307:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1318:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1303:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1303:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1327:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1271:31:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1271:64:8"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1261:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "901:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "912:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "924:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "932:6:8",
														"type": ""
													}
												],
												"src": "845:507:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1403:32:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1413:16:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1424:5:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1413:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1385:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1395:7:8",
														"type": ""
													}
												],
												"src": "1358:77:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1484:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1541:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1550:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1553:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1543:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1543:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1543:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1507:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1532:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nodeType": "YulIdentifier",
																					"src": "1514:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1514:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1504:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1504:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1497:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1497:43:8"
															},
															"nodeType": "YulIf",
															"src": "1494:63:8"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1477:5:8",
														"type": ""
													}
												],
												"src": "1441:122:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1632:80:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1642:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1657:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1651:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1651:13:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1642:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1700:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "1673:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1673:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1673:33:8"
														}
													]
												},
												"name": "abi_decode_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1610:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1618:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1626:5:8",
														"type": ""
													}
												],
												"src": "1569:143:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1795:274:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1841:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1843:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1843:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1843:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1816:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1825:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1812:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1812:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1837:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1808:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1808:32:8"
															},
															"nodeType": "YulIf",
															"src": "1805:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "1934:128:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1949:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1963:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1953:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1978:74:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2024:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2035:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2020:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2020:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2044:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1988:31:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1988:64:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1978:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1765:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1776:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1788:6:8",
														"type": ""
													}
												],
												"src": "1718:351:8"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60e06040523480156200001157600080fd5b50604051620022a6380380620022a683398181016040528101906200003791906200018c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505060a05173ffffffffffffffffffffffffffffffffffffffff1663d509b0176040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011391906200020e565b60c08181525050505062000240565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001548262000127565b9050919050565b620001668162000147565b81146200017257600080fd5b50565b60008151905062000186816200015b565b92915050565b60008060408385031215620001a657620001a562000122565b5b6000620001b68582860162000175565b9250506020620001c98582860162000175565b9150509250929050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b60006020828403121562000227576200022662000122565b5b60006200023784828501620001f7565b91505092915050565b60805160a05160c051611ff7620002af600039600081816104ee0152610704015260008181610260015281816102c5015281816103d10152818161043901526107280152600081816101de0152818161030101528181610387015281816103f301526104cc0152611ff76000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b33893da11610066578063b33893da14610135578063b75d4e2414610168578063d448a4ec14610186578063d509b017146101a2578063f1b156b2146101c057610093565b806320402e1d1461009857806354f6127f146100b65780638921a614146100e757806393ee663b14610105575b600080fd5b6100a06101dc565b6040516100ad919061120a565b60405180910390f35b6100d060048036038101906100cb9190611260565b610200565b6040516100de9291906112b7565b60405180910390f35b6100ef61025e565b6040516100fc9190611301565b60405180910390f35b61011f600480360381019061011a919061135a565b610282565b60405161012c91906113ad565b60405180910390f35b61014f600480360381019061014a9190611260565b61069c565b60405161015f94939291906113d7565b60405180910390f35b6101706106f9565b60405161017d919061143f565b60405180910390f35b6101a0600480360381019061019b9190611260565b6106ff565b005b6101aa610702565b6040516101b791906113ad565b60405180910390f35b6101da60048036038101906101d59190611486565b610726565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008084815260200190815260200160002060020160149054906101000a900460ff1661023c576000808060001b905091509150610259565b600160008085815260200190815260200160002060010154915091505b915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146102bd57816102bf565b335b915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634360af3d7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161033c91906114c6565b602060405180830381865afa158015610359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037d9190611517565b90506103cc3330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661091f909392919063ffffffff16565b6104377f0000000000000000000000000000000000000000000000000000000000000000827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109a89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636457c97961047c86610af7565b61048588610af7565b61048e87610b36565b61049742610b99565b6104a030610b36565b6040516020016104b49594939291906117ae565b60405160208183030381529060405285306000611c207f0000000000000000000000000000000000000000000000000000000000000000887f00000000000000000000000000000000000000000000000000000000000000006000801b6040518a63ffffffff1660e01b8152600401610535999897969594939291906118a5565b6020604051808303816000875af1158015610554573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610578919061194e565b915060405180608001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600080848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff021916908315150217905550905050818373ffffffffffffffffffffffffffffffffffffffff16867f29ae27364abd65b112ad0ac18e7e4f97360c20afa9636864dc91195d4d9204ec8760405161068c91906113ad565b60405180910390a4509392505050565b60006020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16905084565b611c2081565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e57600080fd5b80156108ba57600160008084815260200190815260200160002060020160146101000a81548160ff021916908315150217905550600080600084815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581525050905082816040015173ffffffffffffffffffffffffffffffffffffffff1682600001517fe49ab75dd8ad20084c43aacc9218434d61af074f44263f887212c41ad2d41c9d84602001516040516108ac91906113ad565b60405180910390a45061091b565b60008083815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549060ff021916905550505b5050565b6109a2846323b872dd60e01b8585856040516024016109409392919061197b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b50505050565b6000811480610a32575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016109ef9291906119b2565b602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190611517565b145b610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6890611a5e565b60405180910390fd5b610af28363095ea7b360e01b8484604051602401610a90929190611a7e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b505050565b6060610b06608083901c610de9565b610b0f83610de9565b604051602001610b20929190611ac8565b6040516020818303038152906040529050919050565b6060610b5760808360601b6bffffffffffffffffffffffff1916901c610de9565b610b728360601b6bffffffffffffffffffffffff1916610de9565b604051602001610b83929190611b41565b6040516020818303038152906040529050919050565b606060008203610be0576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610d1c565b600082905060005b60008214610c12578080610bfb90611b9c565b915050600a82610c0b9190611c13565b9150610be8565b60008167ffffffffffffffff811115610c2e57610c2d611c44565b5b6040519080825280601f01601f191660200182016040528015610c605781602001600182028036833780820191505090505b50905060008290505b60008614610d1457600181610c7e9190611c73565b90506000600a8088610c909190611c13565b610c9a9190611ca7565b87610ca59190611c73565b6030610cb19190611d0e565b905060008160f81b905080848481518110610ccf57610cce611d43565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88610d0b9190611c13565b97505050610c69565b819450505050505b919050565b6000610d83826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610fbe9092919063ffffffff16565b9050600081511480610da5575080806020019051810190610da49190611d87565b5b610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb90611e26565b60405180910390fd5b505050565b6000808260001c90506fffffffffffffffffffffffffffffffff8116905077ffffffffffffffff0000000000000000ffffffffffffffff68010000000000000000820282171690507bffffffff00000000ffffffff00000000ffffffff00000000ffffffff640100000000820282171690507dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff62010000820282171690507eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff610100820282171690507f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f601082028217169050600060087f0808080808080808080808080808080808080808080808080808080808080808831681610f0e57610f0d611be4565b5b049050600060047f0404040404040404040404040404040404040404040404040404040404040404841681610f4657610f45611be4565b5b049050600060027f0202020202020202020202020202020202020202020202020202020202020202851681610f7e57610f7d611be4565b5b0490507f3030303030303030303030303030303030303030303030303030303030303030602782841785160285010193508360001b945050505050919050565b6060610fcd8484600085610fd6565b90509392505050565b60608247101561101b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101290611eb8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516110449190611ed8565b60006040518083038185875af1925050503d8060008114611081576040519150601f19603f3d011682016040523d82523d6000602084013e611086565b606091505b5091509150611097878383876110a3565b92505050949350505050565b606083156111055760008351036110fd576110bd85611118565b6110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f390611f3b565b60405180910390fd5b5b829050611110565b61110f838361113b565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561114e5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111829190611f9f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111d06111cb6111c68461118b565b6111ab565b61118b565b9050919050565b60006111e2826111b5565b9050919050565b60006111f4826111d7565b9050919050565b611204816111e9565b82525050565b600060208201905061121f60008301846111fb565b92915050565b600080fd5b6000819050919050565b61123d8161122a565b811461124857600080fd5b50565b60008135905061125a81611234565b92915050565b60006020828403121561127657611275611225565b5b60006112848482850161124b565b91505092915050565b60008115159050919050565b6112a28161128d565b82525050565b6112b18161122a565b82525050565b60006040820190506112cc6000830185611299565b6112d960208301846112a8565b9392505050565b60006112eb826111d7565b9050919050565b6112fb816112e0565b82525050565b600060208201905061131660008301846112f2565b92915050565b60006113278261118b565b9050919050565b6113378161131c565b811461134257600080fd5b50565b6000813590506113548161132e565b92915050565b60008060006060848603121561137357611372611225565b5b60006113818682870161124b565b93505060206113928682870161124b565b92505060406113a386828701611345565b9150509250925092565b60006020820190506113c260008301846112a8565b92915050565b6113d18161131c565b82525050565b60006080820190506113ec60008301876112a8565b6113f960208301866112a8565b61140660408301856113c8565b6114136060830184611299565b95945050505050565b600067ffffffffffffffff82169050919050565b6114398161141c565b82525050565b60006020820190506114546000830184611430565b92915050565b6114638161128d565b811461146e57600080fd5b50565b6000813590506114808161145a565b92915050565b6000806040838503121561149d5761149c611225565b5b60006114ab8582860161124b565b92505060206114bc85828601611471565b9150509250929050565b60006020820190506114db60008301846113c8565b92915050565b6000819050919050565b6114f4816114e1565b81146114ff57600080fd5b50565b600081519050611511816114eb565b92915050565b60006020828403121561152d5761152c611225565b5b600061153b84828501611502565b91505092915050565b600081905092915050565b7f446174612061737365727465643a203078000000000000000000000000000000600082015250565b6000611585601183611544565b91506115908261154f565b601182019050919050565b600081519050919050565b600081905092915050565b60005b838110156115cf5780820151818401526020810190506115b4565b60008484015250505050565b60006115e68261159b565b6115f081856115a6565b93506116008185602086016115b1565b80840191505092915050565b7f20666f72206461746149643a2030780000000000000000000000000000000000600082015250565b6000611642600f83611544565b915061164d8261160c565b600f82019050919050565b7f20616e642061737365727465723a203078000000000000000000000000000000600082015250565b600061168e601183611544565b915061169982611658565b601182019050919050565b7f2061742074696d657374616d703a200000000000000000000000000000000000600082015250565b60006116da600f83611544565b91506116e5826116a4565b600f82019050919050565b7f20696e207468652044617461417373657274657220636f6e747261637420617460008201527f2030780000000000000000000000000000000000000000000000000000000000602082015250565b600061174c602383611544565b9150611757826116f0565b602382019050919050565b7f2069732076616c69642e00000000000000000000000000000000000000000000600082015250565b6000611798600a83611544565b91506117a382611762565b600a82019050919050565b60006117b982611578565b91506117c582886115db565b91506117d082611635565b91506117dc82876115db565b91506117e782611681565b91506117f382866115db565b91506117fe826116cd565b915061180a82856115db565b91506118158261173f565b915061182182846115db565b915061182c8261178b565b91508190509695505050505050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b60006118688261159b565b611872818561183b565b93506118828185602086016115b1565b61188b8161184c565b840191505092915050565b61189f816114e1565b82525050565b60006101208201905081810360008301526118c0818c61185d565b90506118cf602083018b6113c8565b6118dc604083018a6113c8565b6118e960608301896113c8565b6118f66080830188611430565b61190360a08301876111fb565b61191060c0830186611896565b61191d60e08301856112a8565b61192b6101008301846112a8565b9a9950505050505050505050565b60008151905061194881611234565b92915050565b60006020828403121561196457611963611225565b5b600061197284828501611939565b91505092915050565b600060608201905061199060008301866113c8565b61199d60208301856113c8565b6119aa6040830184611896565b949350505050565b60006040820190506119c760008301856113c8565b6119d460208301846113c8565b9392505050565b600082825260208201905092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000611a486036836119db565b9150611a53826119ec565b604082019050919050565b60006020820190508181036000830152611a7781611a3b565b9050919050565b6000604082019050611a9360008301856113c8565b611aa06020830184611896565b9392505050565b6000819050919050565b611ac2611abd8261122a565b611aa7565b82525050565b6000611ad48285611ab1565b602082019150611ae48284611ab1565b6020820191508190509392505050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b611b3b611b3682611af4565b611b20565b82525050565b6000611b4d8285611ab1565b602082019150611b5d8284611b2a565b6008820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ba7826114e1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bd957611bd8611b6d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c1e826114e1565b9150611c29836114e1565b925082611c3957611c38611be4565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000611c7e826114e1565b9150611c89836114e1565b9250828203905081811115611ca157611ca0611b6d565b5b92915050565b6000611cb2826114e1565b9150611cbd836114e1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cf657611cf5611b6d565b5b828202905092915050565b600060ff82169050919050565b6000611d1982611d01565b9150611d2483611d01565b9250828201905060ff811115611d3d57611d3c611b6d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050611d818161145a565b92915050565b600060208284031215611d9d57611d9c611225565b5b6000611dab84828501611d72565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611e10602a836119db565b9150611e1b82611db4565b604082019050919050565b60006020820190508181036000830152611e3f81611e03565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ea26026836119db565b9150611ead82611e46565b604082019050919050565b60006020820190508181036000830152611ed181611e95565b9050919050565b6000611ee482846115db565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611f25601d836119db565b9150611f3082611eef565b602082019050919050565b60006020820190508181036000830152611f5481611f18565b9050919050565b600081519050919050565b6000611f7182611f5b565b611f7b81856119db565b9350611f8b8185602086016115b1565b611f948161184c565b840191505092915050565b60006020820190508181036000830152611fb98184611f66565b90509291505056fea2646970667358221220e7d839fb68cfae3d86b3534a6a9fb5b0bbb84b76071af0694142078f1ed1b4e064736f6c63430008100033",
							"opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x22A6 CODESIZE SUB DUP1 PUSH3 0x22A6 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x18C JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0xA0 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD509B017 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x113 SWAP2 SWAP1 PUSH3 0x20E JUMP JUMPDEST PUSH1 0xC0 DUP2 DUP2 MSTORE POP POP POP POP PUSH3 0x240 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x154 DUP3 PUSH3 0x127 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x166 DUP2 PUSH3 0x147 JUMP JUMPDEST DUP2 EQ PUSH3 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x186 DUP2 PUSH3 0x15B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1A6 JUMPI PUSH3 0x1A5 PUSH3 0x122 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1B6 DUP6 DUP3 DUP7 ADD PUSH3 0x175 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x1C9 DUP6 DUP3 DUP7 ADD PUSH3 0x175 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1E8 DUP2 PUSH3 0x1D3 JUMP JUMPDEST DUP2 EQ PUSH3 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x208 DUP2 PUSH3 0x1DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x227 JUMPI PUSH3 0x226 PUSH3 0x122 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x237 DUP5 DUP3 DUP6 ADD PUSH3 0x1F7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x1FF7 PUSH3 0x2AF PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x4EE ADD MSTORE PUSH2 0x704 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x260 ADD MSTORE DUP2 DUP2 PUSH2 0x2C5 ADD MSTORE DUP2 DUP2 PUSH2 0x3D1 ADD MSTORE DUP2 DUP2 PUSH2 0x439 ADD MSTORE PUSH2 0x728 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1DE ADD MSTORE DUP2 DUP2 PUSH2 0x301 ADD MSTORE DUP2 DUP2 PUSH2 0x387 ADD MSTORE DUP2 DUP2 PUSH2 0x3F3 ADD MSTORE PUSH2 0x4CC ADD MSTORE PUSH2 0x1FF7 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB33893DA GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB33893DA EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0xB75D4E24 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0xD448A4EC EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0xD509B017 EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xF1B156B2 EQ PUSH2 0x1C0 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x20402E1D EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8921A614 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x93EE663B EQ PUSH2 0x105 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x120A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDE SWAP3 SWAP2 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0x25E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFC SWAP2 SWAP1 PUSH2 0x1301 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x135A JUMP JUMPDEST PUSH2 0x282 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x170 PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17D SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x6FF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AA PUSH2 0x702 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B7 SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x726 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23C JUMPI PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 SHL SWAP1 POP SWAP2 POP SWAP2 POP PUSH2 0x259 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2BD JUMPI DUP2 PUSH2 0x2BF JUMP JUMPDEST CALLER JUMPDEST SWAP2 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4360AF3D PUSH32 0x0 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x33C SWAP2 SWAP1 PUSH2 0x14C6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x359 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37D SWAP2 SWAP1 PUSH2 0x1517 JUMP JUMPDEST SWAP1 POP PUSH2 0x3CC CALLER ADDRESS DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x91F SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x437 PUSH32 0x0 DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9A8 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6457C979 PUSH2 0x47C DUP7 PUSH2 0xAF7 JUMP JUMPDEST PUSH2 0x485 DUP9 PUSH2 0xAF7 JUMP JUMPDEST PUSH2 0x48E DUP8 PUSH2 0xB36 JUMP JUMPDEST PUSH2 0x497 TIMESTAMP PUSH2 0xB99 JUMP JUMPDEST PUSH2 0x4A0 ADDRESS PUSH2 0xB36 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4B4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP6 ADDRESS PUSH1 0x0 PUSH2 0x1C20 PUSH32 0x0 DUP9 PUSH32 0x0 PUSH1 0x0 DUP1 SHL PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x535 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x18A5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x554 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x578 SWAP2 SWAP1 PUSH2 0x194E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x29AE27364ABD65B112AD0AC18E7E4F97360C20AFA9636864DC91195D4D9204EC DUP8 PUSH1 0x40 MLOAD PUSH2 0x68C SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP5 JUMP JUMPDEST PUSH2 0x1C20 DUP2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x8BA JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH32 0xE49AB75DD8AD20084C43AACC9218434D61AF074F44263F887212C41AD2D41C9D DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x8AC SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH2 0x91B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x9A2 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x940 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x197B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0xD21 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0xA32 JUMPI POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9EF SWAP3 SWAP2 SWAP1 PUSH2 0x19B2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA30 SWAP2 SWAP1 PUSH2 0x1517 JUMP JUMPDEST EQ JUMPDEST PUSH2 0xA71 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA68 SWAP1 PUSH2 0x1A5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAF2 DUP4 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xA90 SWAP3 SWAP2 SWAP1 PUSH2 0x1A7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0xD21 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB06 PUSH1 0x80 DUP4 SWAP1 SHR PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0xB0F DUP4 PUSH2 0xDE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB20 SWAP3 SWAP2 SWAP1 PUSH2 0x1AC8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB57 PUSH1 0x80 DUP4 PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SHR PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0xB72 DUP4 PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH2 0xDE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB83 SWAP3 SWAP2 SWAP1 PUSH2 0x1B41 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SUB PUSH2 0xBE0 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0xD1C JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0xC12 JUMPI DUP1 DUP1 PUSH2 0xBFB SWAP1 PUSH2 0x1B9C JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0xC0B SWAP2 SWAP1 PUSH2 0x1C13 JUMP JUMPDEST SWAP2 POP PUSH2 0xBE8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC2E JUMPI PUSH2 0xC2D PUSH2 0x1C44 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC60 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 SWAP1 POP JUMPDEST PUSH1 0x0 DUP7 EQ PUSH2 0xD14 JUMPI PUSH1 0x1 DUP2 PUSH2 0xC7E SWAP2 SWAP1 PUSH2 0x1C73 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xA DUP1 DUP9 PUSH2 0xC90 SWAP2 SWAP1 PUSH2 0x1C13 JUMP JUMPDEST PUSH2 0xC9A SWAP2 SWAP1 PUSH2 0x1CA7 JUMP JUMPDEST DUP8 PUSH2 0xCA5 SWAP2 SWAP1 PUSH2 0x1C73 JUMP JUMPDEST PUSH1 0x30 PUSH2 0xCB1 SWAP2 SWAP1 PUSH2 0x1D0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF8 SHL SWAP1 POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xCCF JUMPI PUSH2 0xCCE PUSH2 0x1D43 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP9 PUSH2 0xD0B SWAP2 SWAP1 PUSH2 0x1C13 JUMP JUMPDEST SWAP8 POP POP POP PUSH2 0xC69 JUMP JUMPDEST DUP2 SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD83 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xFBE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0xDA5 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDA4 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST JUMPDEST PUSH2 0xDE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDDB SWAP1 PUSH2 0x1E26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 SHR SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP1 POP PUSH24 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF PUSH9 0x10000000000000000 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH28 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF PUSH5 0x100000000 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH30 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF PUSH3 0x10000 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH31 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF PUSH2 0x100 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH32 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F PUSH1 0x10 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH32 0x808080808080808080808080808080808080808080808080808080808080808 DUP4 AND DUP2 PUSH2 0xF0E JUMPI PUSH2 0xF0D PUSH2 0x1BE4 JUMP JUMPDEST JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH32 0x404040404040404040404040404040404040404040404040404040404040404 DUP5 AND DUP2 PUSH2 0xF46 JUMPI PUSH2 0xF45 PUSH2 0x1BE4 JUMP JUMPDEST JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH32 0x202020202020202020202020202020202020202020202020202020202020202 DUP6 AND DUP2 PUSH2 0xF7E JUMPI PUSH2 0xF7D PUSH2 0x1BE4 JUMP JUMPDEST JUMPDEST DIV SWAP1 POP PUSH32 0x3030303030303030303030303030303030303030303030303030303030303030 PUSH1 0x27 DUP3 DUP5 OR DUP6 AND MUL DUP6 ADD ADD SWAP4 POP DUP4 PUSH1 0x0 SHL SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFCD DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xFD6 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x101B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1012 SWAP1 PUSH2 0x1EB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1044 SWAP2 SWAP1 PUSH2 0x1ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1081 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1086 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1097 DUP8 DUP4 DUP4 DUP8 PUSH2 0x10A3 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1105 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x10FD JUMPI PUSH2 0x10BD DUP6 PUSH2 0x1118 JUMP JUMPDEST PUSH2 0x10FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10F3 SWAP1 PUSH2 0x1F3B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1110 JUMP JUMPDEST PUSH2 0x110F DUP4 DUP4 PUSH2 0x113B JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x114E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1182 SWAP2 SWAP1 PUSH2 0x1F9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11D0 PUSH2 0x11CB PUSH2 0x11C6 DUP5 PUSH2 0x118B JUMP JUMPDEST PUSH2 0x11AB JUMP JUMPDEST PUSH2 0x118B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E2 DUP3 PUSH2 0x11B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F4 DUP3 PUSH2 0x11D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1204 DUP2 PUSH2 0x11E9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x121F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11FB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x123D DUP2 PUSH2 0x122A JUMP JUMPDEST DUP2 EQ PUSH2 0x1248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x125A DUP2 PUSH2 0x1234 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1276 JUMPI PUSH2 0x1275 PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1284 DUP5 DUP3 DUP6 ADD PUSH2 0x124B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12A2 DUP2 PUSH2 0x128D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x12B1 DUP2 PUSH2 0x122A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12CC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1299 JUMP JUMPDEST PUSH2 0x12D9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x12A8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12EB DUP3 PUSH2 0x11D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12FB DUP2 PUSH2 0x12E0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1316 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12F2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1327 DUP3 PUSH2 0x118B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1337 DUP2 PUSH2 0x131C JUMP JUMPDEST DUP2 EQ PUSH2 0x1342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1354 DUP2 PUSH2 0x132E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1373 JUMPI PUSH2 0x1372 PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1381 DUP7 DUP3 DUP8 ADD PUSH2 0x124B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1392 DUP7 DUP3 DUP8 ADD PUSH2 0x124B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x13A3 DUP7 DUP3 DUP8 ADD PUSH2 0x1345 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x13C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12A8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x13D1 DUP2 PUSH2 0x131C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x13EC PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x12A8 JUMP JUMPDEST PUSH2 0x13F9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x12A8 JUMP JUMPDEST PUSH2 0x1406 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x1413 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1299 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1439 DUP2 PUSH2 0x141C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1454 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1430 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1463 DUP2 PUSH2 0x128D JUMP JUMPDEST DUP2 EQ PUSH2 0x146E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1480 DUP2 PUSH2 0x145A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x149D JUMPI PUSH2 0x149C PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14AB DUP6 DUP3 DUP7 ADD PUSH2 0x124B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x14BC DUP6 DUP3 DUP7 ADD PUSH2 0x1471 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x14DB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x13C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14F4 DUP2 PUSH2 0x14E1 JUMP JUMPDEST DUP2 EQ PUSH2 0x14FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1511 DUP2 PUSH2 0x14EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x152D JUMPI PUSH2 0x152C PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x153B DUP5 DUP3 DUP6 ADD PUSH2 0x1502 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x446174612061737365727465643A203078000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 PUSH1 0x11 DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x1590 DUP3 PUSH2 0x154F JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x15CF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x15B4 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E6 DUP3 PUSH2 0x159B JUMP JUMPDEST PUSH2 0x15F0 DUP2 DUP6 PUSH2 0x15A6 JUMP JUMPDEST SWAP4 POP PUSH2 0x1600 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x15B1 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x20666F72206461746149643A2030780000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1642 PUSH1 0xF DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x164D DUP3 PUSH2 0x160C JUMP JUMPDEST PUSH1 0xF DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x20616E642061737365727465723A203078000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x168E PUSH1 0x11 DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x1699 DUP3 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x2061742074696D657374616D703A200000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16DA PUSH1 0xF DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x16E5 DUP3 PUSH2 0x16A4 JUMP JUMPDEST PUSH1 0xF DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x20696E207468652044617461417373657274657220636F6E7472616374206174 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2030780000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x174C PUSH1 0x23 DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x1757 DUP3 PUSH2 0x16F0 JUMP JUMPDEST PUSH1 0x23 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x2069732076616C69642E00000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1798 PUSH1 0xA DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x17A3 DUP3 PUSH2 0x1762 JUMP JUMPDEST PUSH1 0xA DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17B9 DUP3 PUSH2 0x1578 JUMP JUMPDEST SWAP2 POP PUSH2 0x17C5 DUP3 DUP9 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x17D0 DUP3 PUSH2 0x1635 JUMP JUMPDEST SWAP2 POP PUSH2 0x17DC DUP3 DUP8 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x17E7 DUP3 PUSH2 0x1681 JUMP JUMPDEST SWAP2 POP PUSH2 0x17F3 DUP3 DUP7 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x17FE DUP3 PUSH2 0x16CD JUMP JUMPDEST SWAP2 POP PUSH2 0x180A DUP3 DUP6 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1815 DUP3 PUSH2 0x173F JUMP JUMPDEST SWAP2 POP PUSH2 0x1821 DUP3 DUP5 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x182C DUP3 PUSH2 0x178B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1868 DUP3 PUSH2 0x159B JUMP JUMPDEST PUSH2 0x1872 DUP2 DUP6 PUSH2 0x183B JUMP JUMPDEST SWAP4 POP PUSH2 0x1882 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x15B1 JUMP JUMPDEST PUSH2 0x188B DUP2 PUSH2 0x184C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x189F DUP2 PUSH2 0x14E1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18C0 DUP2 DUP13 PUSH2 0x185D JUMP JUMPDEST SWAP1 POP PUSH2 0x18CF PUSH1 0x20 DUP4 ADD DUP12 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x18DC PUSH1 0x40 DUP4 ADD DUP11 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x18E9 PUSH1 0x60 DUP4 ADD DUP10 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x18F6 PUSH1 0x80 DUP4 ADD DUP9 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x1903 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x11FB JUMP JUMPDEST PUSH2 0x1910 PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x1896 JUMP JUMPDEST PUSH2 0x191D PUSH1 0xE0 DUP4 ADD DUP6 PUSH2 0x12A8 JUMP JUMPDEST PUSH2 0x192B PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x12A8 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1948 DUP2 PUSH2 0x1234 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1964 JUMPI PUSH2 0x1963 PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1972 DUP5 DUP3 DUP6 ADD PUSH2 0x1939 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1990 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x199D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x19AA PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1896 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x19C7 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x19D4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x13C8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20746F206E6F6E2D7A65726F20616C6C6F77616E636500000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A48 PUSH1 0x36 DUP4 PUSH2 0x19DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1A53 DUP3 PUSH2 0x19EC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A77 DUP2 PUSH2 0x1A3B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1A93 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x1AA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1896 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AC2 PUSH2 0x1ABD DUP3 PUSH2 0x122A JUMP JUMPDEST PUSH2 0x1AA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD4 DUP3 DUP6 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x1AE4 DUP3 DUP5 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B3B PUSH2 0x1B36 DUP3 PUSH2 0x1AF4 JUMP JUMPDEST PUSH2 0x1B20 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B4D DUP3 DUP6 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x1B5D DUP3 DUP5 PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1BA7 DUP3 PUSH2 0x14E1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1BD9 JUMPI PUSH2 0x1BD8 PUSH2 0x1B6D JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C1E DUP3 PUSH2 0x14E1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C29 DUP4 PUSH2 0x14E1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1C39 JUMPI PUSH2 0x1C38 PUSH2 0x1BE4 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C7E DUP3 PUSH2 0x14E1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C89 DUP4 PUSH2 0x14E1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1CA1 JUMPI PUSH2 0x1CA0 PUSH2 0x1B6D JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB2 DUP3 PUSH2 0x14E1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CBD DUP4 PUSH2 0x14E1 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1CF6 JUMPI PUSH2 0x1CF5 PUSH2 0x1B6D JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D19 DUP3 PUSH2 0x1D01 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D24 DUP4 PUSH2 0x1D01 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x1D3D JUMPI PUSH2 0x1D3C PUSH2 0x1B6D JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1D81 DUP2 PUSH2 0x145A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D9D JUMPI PUSH2 0x1D9C PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DAB DUP5 DUP3 DUP6 ADD PUSH2 0x1D72 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E10 PUSH1 0x2A DUP4 PUSH2 0x19DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1E1B DUP3 PUSH2 0x1DB4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E3F DUP2 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA2 PUSH1 0x26 DUP4 PUSH2 0x19DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1EAD DUP3 PUSH2 0x1E46 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ED1 DUP2 PUSH2 0x1E95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EE4 DUP3 DUP5 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F25 PUSH1 0x1D DUP4 PUSH2 0x19DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1F30 DUP3 PUSH2 0x1EEF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F54 DUP2 PUSH2 0x1F18 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F71 DUP3 PUSH2 0x1F5B JUMP JUMPDEST PUSH2 0x1F7B DUP2 DUP6 PUSH2 0x19DB JUMP JUMPDEST SWAP4 POP PUSH2 0x1F8B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x15B1 JUMP JUMPDEST PUSH2 0x1F94 DUP2 PUSH2 0x184C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FB9 DUP2 DUP5 PUSH2 0x1F66 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xD8 CODECOPY 0xFB PUSH9 0xCFAE3D86B3534A6A9F 0xB5 0xB0 0xBB 0xB8 0x4B PUSH23 0x71AF0694142078F1ED1B4E064736F6C63430008100033 ",
							"sourceMap": "720:5156:7:-:0;;;1680:245;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1783:16;1758:42;;;;;;;;;;1844:19;1811:53;;;;;;;;;;1895:2;;:20;;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1875:42;;;;;;1680:245;;720:5156;;88:117:8;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:507::-;924:6;932;981:2;969:9;960:7;956:23;952:32;949:119;;;987:79;;:::i;:::-;949:119;1107:1;1132:64;1188:7;1179:6;1168:9;1164:22;1132:64;:::i;:::-;1122:74;;1078:128;1245:2;1271:64;1327:7;1318:6;1307:9;1303:22;1271:64;:::i;:::-;1261:74;;1216:129;845:507;;;;;:::o;1358:77::-;1395:7;1424:5;1413:16;;1358:77;;;:::o;1441:122::-;1514:24;1532:5;1514:24;:::i;:::-;1507:5;1504:35;1494:63;;1553:1;1550;1543:12;1494:63;1441:122;:::o;1569:143::-;1626:5;1657:6;1651:13;1642:22;;1673:33;1700:5;1673:33;:::i;:::-;1569:143;;;;:::o;1718:351::-;1788:6;1837:2;1825:9;1816:7;1812:23;1808:32;1805:119;;;1843:79;;:::i;:::-;1805:119;1963:1;1988:64;2044:7;2035:6;2024:9;2020:22;1988:64;:::i;:::-;1978:74;;1934:128;1718:351;;;;:::o;720:5156:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_callOptionalReturn_440": {
									"entryPoint": 3361,
									"id": 440,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_revert_818": {
									"entryPoint": 4411,
									"id": 818,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@assertDataFor_1659": {
									"entryPoint": 642,
									"id": 1659,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@assertionDisputedCallback_1715": {
									"entryPoint": 1791,
									"id": 1715,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@assertionLiveness_1439": {
									"entryPoint": 1785,
									"id": 1439,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@assertionResolvedCallback_1709": {
									"entryPoint": 1830,
									"id": 1709,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@assertionsData_1455": {
									"entryPoint": 1692,
									"id": 1455,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@defaultCurrency_1433": {
									"entryPoint": 476,
									"id": 1433,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@defaultIdentifier_1441": {
									"entryPoint": 1794,
									"id": 1441,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_643": {
									"entryPoint": 4054,
									"id": 643,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_579": {
									"entryPoint": 4030,
									"id": 579,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getData_1528": {
									"entryPoint": 512,
									"id": 1528,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"@isContract_507": {
									"entryPoint": 4376,
									"id": 507,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@oo_1436": {
									"entryPoint": 606,
									"id": 1436,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeApprove_217": {
									"entryPoint": 2472,
									"id": 217,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_173": {
									"entryPoint": 2335,
									"id": 173,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@toUtf8Bytes32Bottom_962": {
									"entryPoint": 3561,
									"id": 962,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toUtf8BytesAddress_1016": {
									"entryPoint": 2870,
									"id": 1016,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toUtf8BytesUint_1109": {
									"entryPoint": 2969,
									"id": 1109,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toUtf8Bytes_983": {
									"entryPoint": 2807,
									"id": 983,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@verifyCallResultFromTarget_774": {
									"entryPoint": 4259,
									"id": 774,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 4933,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool": {
									"entryPoint": 5233,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 7538,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32": {
									"entryPoint": 4683,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32_fromMemory": {
									"entryPoint": 6457,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 5378,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 7559,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 4704,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": 6478,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_bool": {
									"entryPoint": 5254,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32t_bytes32t_address": {
									"entryPoint": 4954,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 5399,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 5064,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 4761,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 4776,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack": {
									"entryPoint": 6833,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes8_to_t_bytes8_nonPadded_inplace_fromStack": {
									"entryPoint": 6954,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 6237,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5595,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack": {
									"entryPoint": 4603,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address_fromStack": {
									"entryPoint": 4850,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8038,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5837,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 6027,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7829,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5685,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5496,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5761,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5951,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7960,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7683,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6715,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6294,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint64_to_t_uint64_fromStack": {
									"entryPoint": 5168,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6856,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes32_t_bytes8__to_t_bytes32_t_bytes8__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6977,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 7896,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de_t_bytes_memory_ptr_t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc_t_bytes_memory_ptr_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_t_bytes_memory_ptr_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_t_bytes_memory_ptr_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_t_bytes_memory_ptr_t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90__to_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6062,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 5318,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": 6578,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 6523,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 6782,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool_t_bytes32__to_t_bool_t_bytes32__fromStack_reversed": {
									"entryPoint": 4791,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": 5037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_bool__to_t_bytes32_t_bytes32_t_address_t_bool__fromStack_reversed": {
									"entryPoint": 5079,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_contract$_IERC20_$77_t_uint256_t_bytes32_t_bytes32__to_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_address_t_uint256_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": 6309,
									"id": null,
									"parameterSlots": 10,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed": {
									"entryPoint": 4618,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_OptimisticOracleV3Interface_$1421__to_t_address__fromStack_reversed": {
									"entryPoint": 4865,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8095,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7864,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7995,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7718,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6750,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
									"entryPoint": 5183,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 5531,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 8027,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 6203,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5542,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6619,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5444,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint8": {
									"entryPoint": 7438,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 7187,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 7335,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 7283,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 4892,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 4749,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 4650,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes8": {
									"entryPoint": 6900,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 4491,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 5345,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint64": {
									"entryPoint": 5148,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 7425,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IERC20_$77_to_t_address": {
									"entryPoint": 4585,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address": {
									"entryPoint": 4832,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 4567,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 4533,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 5553,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"identity": {
									"entryPoint": 4523,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 7068,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"leftAlign_t_bytes32": {
									"entryPoint": 6823,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"leftAlign_t_bytes8": {
									"entryPoint": 6944,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 7021,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 7140,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 7491,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 7236,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 4645,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 6220,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49": {
									"entryPoint": 5796,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90": {
									"entryPoint": 5986,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 7750,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc": {
									"entryPoint": 5644,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de": {
									"entryPoint": 5455,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf": {
									"entryPoint": 5720,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8": {
									"entryPoint": 5872,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 7919,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 7604,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25": {
									"entryPoint": 6636,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 4910,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 5210,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 4660,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 5355,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:27451:8",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "52:81:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "62:65:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "77:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "84:42:8",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "73:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "73:54:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "34:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "44:7:8",
														"type": ""
													}
												],
												"src": "7:126:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "171:28:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "181:12:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "188:5:8"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "181:3:8"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "157:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "167:3:8",
														"type": ""
													}
												],
												"src": "139:60:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "265:82:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "275:66:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "333:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "315:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "315:24:8"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "306:8:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "306:34:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "288:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "288:53:8"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "275:9:8"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "245:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "255:9:8",
														"type": ""
													}
												],
												"src": "205:142:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "413:66:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "423:50:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "467:5:8"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "436:30:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "436:37:8"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "423:9:8"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "393:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "403:9:8",
														"type": ""
													}
												],
												"src": "353:126:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "558:66:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "568:50:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "612:5:8"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "581:30:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "581:37:8"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "568:9:8"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC20_$77_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "538:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "548:9:8",
														"type": ""
													}
												],
												"src": "485:139:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "708:79:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "725:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "774:5:8"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IERC20_$77_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "730:43:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "730:50:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "718:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "718:63:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "718:63:8"
														}
													]
												},
												"name": "abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "696:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "703:3:8",
														"type": ""
													}
												],
												"src": "630:157:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "904:137:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "914:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "926:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "937:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "922:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "922:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "914:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1007:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1020:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1031:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1016:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1016:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "950:56:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "950:84:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "950:84:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "876:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "888:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "899:4:8",
														"type": ""
													}
												],
												"src": "793:248:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1087:35:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1097:19:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1113:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1107:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1107:9:8"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1097:6:8"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1080:6:8",
														"type": ""
													}
												],
												"src": "1047:75:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1217:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1234:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1237:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1227:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1227:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1227:12:8"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "1128:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1340:28:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1357:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1360:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1350:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1350:12:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1350:12:8"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "1251:117:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1419:32:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1429:16:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1440:5:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1429:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1401:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1411:7:8",
														"type": ""
													}
												],
												"src": "1374:77:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1500:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1557:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1566:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1569:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1559:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1559:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1559:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1523:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1548:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nodeType": "YulIdentifier",
																					"src": "1530:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1530:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1520:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1520:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1513:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1513:43:8"
															},
															"nodeType": "YulIf",
															"src": "1510:63:8"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1493:5:8",
														"type": ""
													}
												],
												"src": "1457:122:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1637:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1647:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1669:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1656:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1656:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1647:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1712:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "1685:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1685:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1685:33:8"
														}
													]
												},
												"name": "abi_decode_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1615:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1623:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1631:5:8",
														"type": ""
													}
												],
												"src": "1585:139:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1796:263:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1842:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1844:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1844:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1844:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1817:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1826:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1813:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1813:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1838:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1809:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1809:32:8"
															},
															"nodeType": "YulIf",
															"src": "1806:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "1935:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1950:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1964:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1954:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1979:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2014:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2025:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2010:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2010:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2034:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "1989:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1989:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1979:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1766:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1777:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1789:6:8",
														"type": ""
													}
												],
												"src": "1730:329:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2107:48:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2117:32:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2142:5:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2135:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2135:13:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2128:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2128:21:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2117:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2089:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2099:7:8",
														"type": ""
													}
												],
												"src": "2065:90:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2220:50:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2237:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2257:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "2242:14:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2242:21:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2230:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2230:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2230:34:8"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2208:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2215:3:8",
														"type": ""
													}
												],
												"src": "2161:109:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2341:53:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2358:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2381:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "2363:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2363:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2351:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2351:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2351:37:8"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2329:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2336:3:8",
														"type": ""
													}
												],
												"src": "2276:118:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2520:200:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2530:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2542:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2553:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2538:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2530:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2604:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2617:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2628:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2613:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2613:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2566:37:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2566:65:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2566:65:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2685:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2698:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2709:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2694:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2694:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2641:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2641:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2641:72:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_bytes32__to_t_bool_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2484:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2496:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2504:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2515:4:8",
														"type": ""
													}
												],
												"src": "2400:320:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2822:66:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2832:50:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2876:5:8"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2845:30:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2845:37:8"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "2832:9:8"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2802:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "2812:9:8",
														"type": ""
													}
												],
												"src": "2726:162:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2995:102:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3012:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3084:5:8"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3017:66:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3017:73:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3005:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3005:86:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3005:86:8"
														}
													]
												},
												"name": "abi_encode_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2983:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2990:3:8",
														"type": ""
													}
												],
												"src": "2894:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3237:160:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3247:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3259:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3270:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3255:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3255:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3247:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3363:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3376:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3387:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3372:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3372:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3283:79:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3283:107:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3283:107:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_OptimisticOracleV3Interface_$1421__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3209:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3221:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3232:4:8",
														"type": ""
													}
												],
												"src": "3103:294:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3448:51:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3458:35:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3487:5:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3469:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3469:24:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3458:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3430:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3440:7:8",
														"type": ""
													}
												],
												"src": "3403:96:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3548:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3605:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3614:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3617:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3607:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3607:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3607:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3571:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3596:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "3578:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3578:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3568:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3568:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3561:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3561:43:8"
															},
															"nodeType": "YulIf",
															"src": "3558:63:8"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3541:5:8",
														"type": ""
													}
												],
												"src": "3505:122:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3685:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3695:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3717:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3704:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3704:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3695:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3760:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "3733:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3733:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3733:33:8"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3663:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3671:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3679:5:8",
														"type": ""
													}
												],
												"src": "3633:139:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3878:519:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3924:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3926:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3926:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3926:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3899:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3908:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3895:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3895:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3920:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3891:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3891:32:8"
															},
															"nodeType": "YulIf",
															"src": "3888:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "4017:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4032:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4046:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4036:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4061:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4096:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4107:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4092:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4092:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4116:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "4071:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4071:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4061:6:8"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4144:118:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4159:16:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4173:2:8",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4163:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4189:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4224:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4235:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4220:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4220:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4244:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "4199:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4199:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4189:6:8"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4272:118:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4287:16:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4301:2:8",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4291:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4317:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4352:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4363:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4348:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4348:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4372:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4327:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4327:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "4317:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_bytes32t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3832:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3843:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3855:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3863:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3871:6:8",
														"type": ""
													}
												],
												"src": "3778:619:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4501:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4511:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4523:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4534:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4519:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4519:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4511:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4591:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4604:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4615:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4600:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4600:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4547:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4547:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4547:71:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4473:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4485:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4496:4:8",
														"type": ""
													}
												],
												"src": "4403:222:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4696:53:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4713:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4736:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4718:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4718:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4706:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4706:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4706:37:8"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4684:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4691:3:8",
														"type": ""
													}
												],
												"src": "4631:118:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4931:365:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4941:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4953:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4964:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4949:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4949:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4941:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5022:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5035:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5046:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5031:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5031:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4978:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4978:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4978:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5103:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5116:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5127:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5112:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5112:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5059:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5059:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5059:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5185:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5198:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5209:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5194:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5194:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5141:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5141:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5141:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "5261:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5274:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5285:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5270:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5270:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5223:37:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5223:66:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5223:66:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_bool__to_t_bytes32_t_bytes32_t_address_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4879:9:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4891:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4899:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4907:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4915:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4926:4:8",
														"type": ""
													}
												],
												"src": "4755:541:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5346:57:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5356:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5371:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5378:18:8",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5367:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5367:30:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5356:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint64",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5328:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5338:7:8",
														"type": ""
													}
												],
												"src": "5302:101:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5472:52:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5489:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5511:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint64",
																			"nodeType": "YulIdentifier",
																			"src": "5494:16:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5494:23:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5482:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5482:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5482:36:8"
														}
													]
												},
												"name": "abi_encode_t_uint64_to_t_uint64_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5460:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5467:3:8",
														"type": ""
													}
												],
												"src": "5409:115:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5626:122:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5636:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5648:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5659:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5644:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5644:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5636:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5714:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5727:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5738:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5723:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5723:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint64_to_t_uint64_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5672:41:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5672:69:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5672:69:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5598:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5610:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5621:4:8",
														"type": ""
													}
												],
												"src": "5530:218:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5794:76:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5848:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5857:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5860:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5850:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5850:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5850:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5817:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5839:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "5824:14:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5824:21:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5814:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5814:32:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5807:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5807:40:8"
															},
															"nodeType": "YulIf",
															"src": "5804:60:8"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5787:5:8",
														"type": ""
													}
												],
												"src": "5754:116:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5925:84:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5935:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5957:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5944:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5944:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5935:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5997:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "5973:23:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5973:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5973:30:8"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5903:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5911:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5919:5:8",
														"type": ""
													}
												],
												"src": "5876:133:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6095:388:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6141:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6143:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6143:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6143:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6116:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6125:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6112:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6112:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6137:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6108:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6108:32:8"
															},
															"nodeType": "YulIf",
															"src": "6105:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "6234:117:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6249:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6263:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6253:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6278:63:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6313:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6324:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6309:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6309:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6333:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "6288:20:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6288:53:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6278:6:8"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6361:115:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6376:16:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6390:2:8",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6380:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6406:60:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6438:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6449:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6434:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6434:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6458:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "6416:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6416:50:8"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "6406:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6057:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6068:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6080:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6088:6:8",
														"type": ""
													}
												],
												"src": "6015:468:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6587:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6597:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6609:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6620:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6605:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6605:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6597:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6677:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6690:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6701:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6686:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6686:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6633:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6633:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6633:71:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6559:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6571:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6582:4:8",
														"type": ""
													}
												],
												"src": "6489:222:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6762:32:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6772:16:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6783:5:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "6772:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6744:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "6754:7:8",
														"type": ""
													}
												],
												"src": "6717:77:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6843:79:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6900:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6909:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6912:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6902:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6902:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6902:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6866:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6891:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "6873:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6873:24:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6863:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6863:35:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6856:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6856:43:8"
															},
															"nodeType": "YulIf",
															"src": "6853:63:8"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6836:5:8",
														"type": ""
													}
												],
												"src": "6800:122:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6991:80:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7001:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7016:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7010:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7010:13:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7001:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7059:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7032:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7032:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7032:33:8"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6969:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6977:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6985:5:8",
														"type": ""
													}
												],
												"src": "6928:143:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7154:274:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7200:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "7202:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7202:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7202:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7175:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7184:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7171:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7171:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7196:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7167:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7167:32:8"
															},
															"nodeType": "YulIf",
															"src": "7164:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "7293:128:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7308:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7322:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7312:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7337:74:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7383:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7394:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7379:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7379:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7403:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "7347:31:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7347:64:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "7337:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7124:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7135:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7147:6:8",
														"type": ""
													}
												],
												"src": "7077:351:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7548:34:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7558:18:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "7573:3:8"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "7558:11:8"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7520:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7525:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "7536:11:8",
														"type": ""
													}
												],
												"src": "7434:148:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7694:61:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7716:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7724:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7712:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7712:14:8"
																	},
																	{
																		"hexValue": "446174612061737365727465643a203078",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7728:19:8",
																		"type": "",
																		"value": "Data asserted: 0x"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7705:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7705:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7705:43:8"
														}
													]
												},
												"name": "store_literal_in_memory_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7686:6:8",
														"type": ""
													}
												],
												"src": "7588:167:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7925:238:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7935:92:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8019:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8024:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7942:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7942:85:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7935:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8125:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de",
																	"nodeType": "YulIdentifier",
																	"src": "8036:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8036:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8036:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8138:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8149:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8154:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8145:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8145:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8138:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7913:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7921:3:8",
														"type": ""
													}
												],
												"src": "7761:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8227:40:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8238:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8254:5:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8248:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8248:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "8238:6:8"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8210:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8220:6:8",
														"type": ""
													}
												],
												"src": "8169:98:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8386:34:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8396:18:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "8411:3:8"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "8396:11:8"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8358:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8363:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "8374:11:8",
														"type": ""
													}
												],
												"src": "8273:147:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8488:184:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8498:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8507:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "8502:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8567:63:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "8592:3:8"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "8597:1:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8588:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8588:11:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "8611:3:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "8616:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8607:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8607:11:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "8601:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8601:18:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8581:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8581:39:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8581:39:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8528:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8531:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "8525:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8525:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "8539:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8541:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "8550:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8553:2:8",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8546:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8546:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "8541:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "8521:3:8",
																"statements": []
															},
															"src": "8517:113:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "8650:3:8"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8655:6:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8646:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8646:16:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8664:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8639:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8639:27:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8639:27:8"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8470:3:8",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8475:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8480:6:8",
														"type": ""
													}
												],
												"src": "8426:246:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8786:278:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8796:52:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8842:5:8"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "8810:31:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8810:38:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8800:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8857:95:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8940:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8945:6:8"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8864:75:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8864:88:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8857:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9000:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9007:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8996:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8996:16:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9014:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9019:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "8961:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8961:65:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8961:65:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9035:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9046:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9051:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9042:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9042:16:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9035:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8767:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8774:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8782:3:8",
														"type": ""
													}
												],
												"src": "8678:386:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9176:59:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9198:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9206:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9194:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9194:14:8"
																	},
																	{
																		"hexValue": "20666f72206461746149643a203078",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9210:17:8",
																		"type": "",
																		"value": " for dataId: 0x"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9187:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9187:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9187:41:8"
														}
													]
												},
												"name": "store_literal_in_memory_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9168:6:8",
														"type": ""
													}
												],
												"src": "9070:165:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9405:238:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9415:92:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9499:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9504:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9422:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9422:85:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9415:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9605:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc",
																	"nodeType": "YulIdentifier",
																	"src": "9516:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9516:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9516:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9618:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9629:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9634:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9625:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9625:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9618:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9393:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9401:3:8",
														"type": ""
													}
												],
												"src": "9241:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9755:61:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9777:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9785:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9773:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9773:14:8"
																	},
																	{
																		"hexValue": "20616e642061737365727465723a203078",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9789:19:8",
																		"type": "",
																		"value": " and asserter: 0x"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9766:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9766:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9766:43:8"
														}
													]
												},
												"name": "store_literal_in_memory_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9747:6:8",
														"type": ""
													}
												],
												"src": "9649:167:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9986:238:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9996:92:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10080:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10085:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10003:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10003:85:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9996:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10186:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf",
																	"nodeType": "YulIdentifier",
																	"src": "10097:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10097:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10097:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10199:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10210:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10215:2:8",
																		"type": "",
																		"value": "17"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10206:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10206:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10199:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9974:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9982:3:8",
														"type": ""
													}
												],
												"src": "9822:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10336:59:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10358:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10366:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10354:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10354:14:8"
																	},
																	{
																		"hexValue": "2061742074696d657374616d703a20",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10370:17:8",
																		"type": "",
																		"value": " at timestamp: "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10347:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10347:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10347:41:8"
														}
													]
												},
												"name": "store_literal_in_memory_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10328:6:8",
														"type": ""
													}
												],
												"src": "10230:165:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10565:238:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10575:92:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10659:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10664:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10582:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10582:85:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10575:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10765:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49",
																	"nodeType": "YulIdentifier",
																	"src": "10676:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10676:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10676:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10778:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10789:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10794:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10785:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10785:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10778:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10553:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10561:3:8",
														"type": ""
													}
												],
												"src": "10401:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10915:116:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10937:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10945:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10933:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10933:14:8"
																	},
																	{
																		"hexValue": "20696e207468652044617461417373657274657220636f6e7472616374206174",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10949:34:8",
																		"type": "",
																		"value": " in the DataAsserter contract at"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10926:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10926:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10926:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11005:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11013:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11001:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11001:15:8"
																	},
																	{
																		"hexValue": "203078",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11018:5:8",
																		"type": "",
																		"value": " 0x"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10994:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10994:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10994:30:8"
														}
													]
												},
												"name": "store_literal_in_memory_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10907:6:8",
														"type": ""
													}
												],
												"src": "10809:222:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11201:238:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11211:92:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11295:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11300:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11218:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11218:85:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11211:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11401:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8",
																	"nodeType": "YulIdentifier",
																	"src": "11312:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11312:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11312:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11414:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11425:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11430:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11421:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11421:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11414:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11189:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11197:3:8",
														"type": ""
													}
												],
												"src": "11037:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11551:54:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11573:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11581:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11569:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11569:14:8"
																	},
																	{
																		"hexValue": "2069732076616c69642e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11585:12:8",
																		"type": "",
																		"value": " is valid."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11562:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11562:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11562:36:8"
														}
													]
												},
												"name": "store_literal_in_memory_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11543:6:8",
														"type": ""
													}
												],
												"src": "11445:160:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11775:238:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11785:92:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11869:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11874:2:8",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11792:76:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11792:85:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11785:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11975:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90",
																	"nodeType": "YulIdentifier",
																	"src": "11886:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11886:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11886:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11988:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11999:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12004:2:8",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11995:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11995:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11988:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11763:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11771:3:8",
														"type": ""
													}
												],
												"src": "11611:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12943:1567:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12954:155:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13105:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12961:142:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12961:148:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12954:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13119:100:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13206:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13215:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13126:79:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13126:93:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13119:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13229:155:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13380:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13236:142:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13236:148:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13229:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13394:100:8",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13481:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13490:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13401:79:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13401:93:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13394:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13504:155:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13655:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13511:142:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13511:148:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13504:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13669:100:8",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13756:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13765:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13676:79:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13676:93:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13669:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13779:155:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13930:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13786:142:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13786:148:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13779:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13944:100:8",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "14031:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14040:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13951:79:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13951:93:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13944:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14054:155:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14205:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14061:142:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14061:148:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14054:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14219:100:8",
															"value": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "14306:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14315:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14226:79:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14226:93:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14219:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14329:155:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14480:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14336:142:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14336:148:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14329:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14494:10:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "14501:3:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14494:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de_t_bytes_memory_ptr_t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc_t_bytes_memory_ptr_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_t_bytes_memory_ptr_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_t_bytes_memory_ptr_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_t_bytes_memory_ptr_t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90__to_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12890:3:8",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "12896:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "12904:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12912:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12920:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12928:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12939:3:8",
														"type": ""
													}
												],
												"src": "12019:2491:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14611:73:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14628:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14633:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14621:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14621:19:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14621:19:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14649:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14668:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14673:4:8",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14664:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14664:14:8"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "14649:11:8"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14583:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14588:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "14599:11:8",
														"type": ""
													}
												],
												"src": "14516:168:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14738:54:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14748:38:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14766:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14773:2:8",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14762:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14762:14:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14782:2:8",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "14778:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14778:7:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "14758:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14758:28:8"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "14748:6:8"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14721:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "14731:6:8",
														"type": ""
													}
												],
												"src": "14690:102:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14888:283:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14898:52:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14944:5:8"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "14912:31:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14912:38:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "14902:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14959:77:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15024:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15029:6:8"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14966:57:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14966:70:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14959:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "15084:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15091:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15080:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15080:16:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15098:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "15103:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "15045:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15045:65:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15045:65:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15119:46:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15130:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "15157:6:8"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "15135:21:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15135:29:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15126:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15126:39:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "15119:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14869:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14876:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14884:3:8",
														"type": ""
													}
												],
												"src": "14798:373:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15242:53:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15259:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "15282:5:8"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "15264:17:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15264:24:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15252:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15252:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15252:37:8"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15230:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15237:3:8",
														"type": ""
													}
												],
												"src": "15177:118:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15652:866:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15662:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15674:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15685:3:8",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15670:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15670:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15662:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15710:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15721:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15706:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15706:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15729:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15735:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15725:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15725:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15699:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15699:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15699:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15755:84:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "15825:6:8"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15834:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15763:61:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15763:76:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15755:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "15893:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15906:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15917:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15902:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15902:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15849:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15849:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15849:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "15975:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15988:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15999:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15984:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15984:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15931:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15931:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15931:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "16057:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16070:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16081:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16066:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16066:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16013:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16013:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16013:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "16137:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16150:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16161:3:8",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16146:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16146:19:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint64_to_t_uint64_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16095:41:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16095:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16095:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "16233:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16246:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16257:3:8",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16242:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16242:19:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16176:56:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16176:86:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16176:86:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "16316:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16329:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16340:3:8",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16325:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16325:19:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16272:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16272:73:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16272:73:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value7",
																		"nodeType": "YulIdentifier",
																		"src": "16399:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16412:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16423:3:8",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16408:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16408:19:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16355:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16355:73:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16355:73:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value8",
																		"nodeType": "YulIdentifier",
																		"src": "16482:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16495:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16506:3:8",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16491:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16491:19:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16438:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16438:73:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16438:73:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_contract$_IERC20_$77_t_uint256_t_bytes32_t_bytes32__to_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_address_t_uint256_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15560:9:8",
														"type": ""
													},
													{
														"name": "value8",
														"nodeType": "YulTypedName",
														"src": "15572:6:8",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "15580:6:8",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "15588:6:8",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "15596:6:8",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "15604:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "15612:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "15620:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "15628:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "15636:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15647:4:8",
														"type": ""
													}
												],
												"src": "15301:1217:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16587:80:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16597:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "16612:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "16606:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16606:13:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "16597:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16655:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "16628:26:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16628:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16628:33:8"
														}
													]
												},
												"name": "abi_decode_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "16565:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "16573:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16581:5:8",
														"type": ""
													}
												],
												"src": "16524:143:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16750:274:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16796:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "16798:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16798:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16798:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "16771:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16780:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16767:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16767:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16792:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "16763:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "16763:32:8"
															},
															"nodeType": "YulIf",
															"src": "16760:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "16889:128:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "16904:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16918:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "16908:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "16933:74:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "16979:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "16990:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "16975:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16975:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "16999:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "16943:31:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16943:64:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "16933:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16720:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "16731:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16743:6:8",
														"type": ""
													}
												],
												"src": "16673:351:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17184:288:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17194:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17206:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17217:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17202:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17202:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17194:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "17274:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17287:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17298:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17283:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17283:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17230:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17230:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17230:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "17355:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17368:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17379:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17364:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17364:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17311:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17311:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17311:72:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "17437:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17450:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17461:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17446:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17446:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17393:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17393:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17393:72:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17140:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "17152:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "17160:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17168:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17179:4:8",
														"type": ""
													}
												],
												"src": "17030:442:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17604:206:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17614:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17626:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17637:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17622:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17622:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17614:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "17694:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17707:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17718:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17703:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17703:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17650:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17650:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17650:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "17775:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17788:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17799:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17784:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17784:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17731:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17731:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17731:72:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17568:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "17580:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17588:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17599:4:8",
														"type": ""
													}
												],
												"src": "17478:332:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17912:73:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17929:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17934:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17922:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17922:19:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17922:19:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17950:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17969:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17974:4:8",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17965:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "17965:14:8"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "17950:11:8"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17884:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17889:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "17900:11:8",
														"type": ""
													}
												],
												"src": "17816:169:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18097:135:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "18119:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18127:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18115:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18115:14:8"
																	},
																	{
																		"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18131:34:8",
																		"type": "",
																		"value": "SafeERC20: approve from non-zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18108:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18108:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18108:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "18187:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18195:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18183:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18183:15:8"
																	},
																	{
																		"hexValue": "20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18200:24:8",
																		"type": "",
																		"value": " to non-zero allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18176:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18176:49:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18176:49:8"
														}
													]
												},
												"name": "store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "18089:6:8",
														"type": ""
													}
												],
												"src": "17991:241:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18384:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18394:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18460:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18465:2:8",
																		"type": "",
																		"value": "54"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18401:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18401:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "18394:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18566:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																	"nodeType": "YulIdentifier",
																	"src": "18477:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18477:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18477:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18579:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18590:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18595:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18586:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18586:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "18579:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "18372:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "18380:3:8",
														"type": ""
													}
												],
												"src": "18238:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18781:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18791:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18803:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18814:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18799:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18799:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18791:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18838:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18849:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18834:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18834:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "18857:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18863:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "18853:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18853:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18827:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18827:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18827:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18883:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "19017:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18891:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "18891:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18883:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18761:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18776:4:8",
														"type": ""
													}
												],
												"src": "18610:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19161:206:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19171:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19183:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19194:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19179:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19179:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19171:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "19251:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19264:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19275:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19260:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19260:17:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19207:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19207:71:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19207:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "19332:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19345:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19356:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19341:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19341:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19288:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19288:72:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19288:72:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "19125:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "19137:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "19145:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "19156:4:8",
														"type": ""
													}
												],
												"src": "19035:332:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19420:32:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19430:16:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "19441:5:8"
															},
															"variableNames": [
																{
																	"name": "aligned",
																	"nodeType": "YulIdentifier",
																	"src": "19430:7:8"
																}
															]
														}
													]
												},
												"name": "leftAlign_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "19402:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "aligned",
														"nodeType": "YulTypedName",
														"src": "19412:7:8",
														"type": ""
													}
												],
												"src": "19373:79:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19541:74:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19558:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "19601:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nodeType": "YulIdentifier",
																					"src": "19583:17:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "19583:24:8"
																			}
																		],
																		"functionName": {
																			"name": "leftAlign_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "19563:19:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19563:45:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19551:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19551:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19551:58:8"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "19529:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "19536:3:8",
														"type": ""
													}
												],
												"src": "19458:157:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19765:253:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "19838:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19847:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19776:61:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19776:75:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19776:75:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19860:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19871:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19876:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19867:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19867:12:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "19860:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "19951:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19960:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19889:61:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19889:75:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19889:75:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19973:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19984:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19989:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19980:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "19980:12:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "19973:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "20002:10:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "20009:3:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "20002:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "19736:3:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "19742:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "19750:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "19761:3:8",
														"type": ""
													}
												],
												"src": "19621:397:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20068:105:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20078:89:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "20093:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20100:66:8",
																		"type": "",
																		"value": "0xffffffffffffffff000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "20089:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20089:78:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "20078:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "20050:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "20060:7:8",
														"type": ""
													}
												],
												"src": "20024:149:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20225:32:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20235:16:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "20246:5:8"
															},
															"variableNames": [
																{
																	"name": "aligned",
																	"nodeType": "YulIdentifier",
																	"src": "20235:7:8"
																}
															]
														}
													]
												},
												"name": "leftAlign_t_bytes8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "20207:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "aligned",
														"nodeType": "YulTypedName",
														"src": "20217:7:8",
														"type": ""
													}
												],
												"src": "20179:78:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20344:72:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "20361:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "20402:5:8"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes8",
																					"nodeType": "YulIdentifier",
																					"src": "20385:16:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "20385:23:8"
																			}
																		],
																		"functionName": {
																			"name": "leftAlign_t_bytes8",
																			"nodeType": "YulIdentifier",
																			"src": "20366:18:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20366:43:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20354:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20354:56:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20354:56:8"
														}
													]
												},
												"name": "abi_encode_t_bytes8_to_t_bytes8_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "20332:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "20339:3:8",
														"type": ""
													}
												],
												"src": "20263:153:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20564:250:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "20637:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "20646:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "20575:61:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20575:75:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20575:75:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20659:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "20670:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20675:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20666:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20666:12:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "20659:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "20748:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "20757:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes8_to_t_bytes8_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "20688:59:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20688:73:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20688:73:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20770:18:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "20781:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20786:1:8",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20777:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20777:11:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "20770:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "20798:10:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "20805:3:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "20798:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32_t_bytes8__to_t_bytes32_t_bytes8__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "20535:3:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "20541:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "20549:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "20560:3:8",
														"type": ""
													}
												],
												"src": "20422:392:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20848:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20865:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20868:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20858:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20858:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20858:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20962:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20965:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20955:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20955:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20955:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20986:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20989:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "20979:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "20979:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20979:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "20820:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21049:190:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "21059:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "21086:5:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "21068:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21068:24:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "21059:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "21182:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "21184:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "21184:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "21184:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "21107:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21114:66:8",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "21104:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21104:77:8"
															},
															"nodeType": "YulIf",
															"src": "21101:103:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "21213:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "21224:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21231:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "21220:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21220:13:8"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "21213:3:8"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "21035:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "21045:3:8",
														"type": ""
													}
												],
												"src": "21006:233:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21273:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21290:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21293:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21283:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21283:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21283:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21387:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21390:4:8",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21380:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21380:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21380:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21411:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21414:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "21404:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21404:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21404:15:8"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "21245:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21473:143:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "21483:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "21506:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "21488:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21488:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "21483:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "21517:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "21540:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "21522:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21522:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "21517:1:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "21564:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "21566:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "21566:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "21566:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "21561:1:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "21554:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21554:9:8"
															},
															"nodeType": "YulIf",
															"src": "21551:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "21596:14:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "21605:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "21608:1:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "21601:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21601:9:8"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "21596:1:8"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "21462:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "21465:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "21471:1:8",
														"type": ""
													}
												],
												"src": "21431:185:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21650:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21667:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21670:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21660:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21660:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21660:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21764:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21767:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21757:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21757:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21757:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21788:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21791:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "21781:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21781:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21781:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "21622:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21853:149:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "21863:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "21886:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "21868:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21868:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "21863:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "21897:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "21920:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "21902:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21902:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "21897:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "21931:17:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "21943:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "21946:1:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "21939:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21939:9:8"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "21931:4:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "21973:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "21975:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "21975:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "21975:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "21964:4:8"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "21970:1:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "21961:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "21961:11:8"
															},
															"nodeType": "YulIf",
															"src": "21958:37:8"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "21839:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "21842:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "21848:4:8",
														"type": ""
													}
												],
												"src": "21808:194:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22056:300:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "22066:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "22089:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "22071:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22071:20:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "22066:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "22100:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "22123:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "22105:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22105:20:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "22100:1:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "22298:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "22300:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "22300:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "22300:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "22210:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "22203:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22203:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "22196:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22196:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "22218:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "22225:66:8",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "22293:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "22221:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "22221:74:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "22215:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22215:81:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "22192:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22192:105:8"
															},
															"nodeType": "YulIf",
															"src": "22189:131:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "22330:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "22345:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "22348:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "22341:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22341:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "22330:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "22039:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "22042:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "22048:7:8",
														"type": ""
													}
												],
												"src": "22008:348:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22405:43:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "22415:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "22430:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22437:4:8",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "22426:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22426:16:8"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "22415:7:8"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22387:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "22397:7:8",
														"type": ""
													}
												],
												"src": "22362:86:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22496:146:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "22506:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "22527:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "22511:15:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22511:18:8"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "22506:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "22538:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "22559:1:8"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "22543:15:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22543:18:8"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "22538:1:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "22570:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "22581:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "22584:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "22577:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22577:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "22570:3:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "22613:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "22615:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "22615:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "22615:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "22602:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22607:4:8",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "22599:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22599:13:8"
															},
															"nodeType": "YulIf",
															"src": "22596:39:8"
														}
													]
												},
												"name": "checked_add_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "22483:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "22486:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "22492:3:8",
														"type": ""
													}
												],
												"src": "22454:188:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22676:152:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22693:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22696:77:8",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22686:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22686:88:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22686:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22790:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22793:4:8",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22783:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22783:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22783:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22814:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22817:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "22807:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22807:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22807:15:8"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "22648:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22894:77:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "22904:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "22919:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "22913:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22913:13:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "22904:5:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "22959:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "22935:23:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "22935:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22935:30:8"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "22872:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "22880:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22888:5:8",
														"type": ""
													}
												],
												"src": "22834:137:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23051:271:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "23097:83:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "23099:77:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "23099:79:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "23099:79:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "23072:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "23081:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "23068:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23068:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23093:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "23064:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23064:32:8"
															},
															"nodeType": "YulIf",
															"src": "23061:119:8"
														},
														{
															"nodeType": "YulBlock",
															"src": "23190:125:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "23205:15:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23219:1:8",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "23209:6:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "23234:71:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "23277:9:8"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "23288:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "23273:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "23273:22:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "23297:7:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "23244:28:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23244:61:8"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "23234:6:8"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "23021:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "23032:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "23044:6:8",
														"type": ""
													}
												],
												"src": "22977:345:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23434:123:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23456:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23464:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23452:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23452:14:8"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23468:34:8",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23445:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23445:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23445:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "23524:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23532:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23520:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23520:15:8"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "23537:12:8",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23513:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23513:37:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23513:37:8"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "23426:6:8",
														"type": ""
													}
												],
												"src": "23328:229:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23709:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "23719:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23785:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23790:2:8",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "23726:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23726:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "23719:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23891:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "23802:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23802:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23802:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "23904:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23915:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23920:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23911:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "23911:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "23904:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "23697:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "23705:3:8",
														"type": ""
													}
												],
												"src": "23563:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24106:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "24116:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "24128:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24139:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "24124:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24124:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "24116:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "24163:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24174:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24159:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24159:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "24182:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "24188:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "24178:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24178:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24152:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24152:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24152:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "24208:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "24342:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "24216:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24216:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "24208:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "24086:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "24101:4:8",
														"type": ""
													}
												],
												"src": "23935:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24466:119:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "24488:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24496:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24484:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24484:14:8"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "24500:34:8",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24477:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24477:58:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24477:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "24556:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24564:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "24552:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24552:15:8"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "24569:8:8",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "24545:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24545:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24545:33:8"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "24458:6:8",
														"type": ""
													}
												],
												"src": "24360:225:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "24737:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "24747:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "24813:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24818:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "24754:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24754:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "24747:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "24919:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "24830:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24830:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "24830:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "24932:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "24943:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "24948:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "24939:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "24939:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "24932:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "24725:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "24733:3:8",
														"type": ""
													}
												],
												"src": "24591:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25134:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "25144:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "25156:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "25167:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "25152:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "25152:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "25144:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "25191:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "25202:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "25187:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "25187:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "25210:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "25216:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "25206:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "25206:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "25180:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "25180:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "25180:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "25236:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "25370:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "25244:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "25244:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "25236:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "25114:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "25129:4:8",
														"type": ""
													}
												],
												"src": "24963:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25522:137:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "25533:100:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "25620:6:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "25629:3:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "25540:79:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "25540:93:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "25533:3:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "25643:10:8",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "25650:3:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "25643:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "25501:3:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "25507:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "25518:3:8",
														"type": ""
													}
												],
												"src": "25388:271:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25771:73:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "25793:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "25801:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "25789:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "25789:14:8"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "25805:31:8",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "25782:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "25782:55:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "25782:55:8"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "25763:6:8",
														"type": ""
													}
												],
												"src": "25665:179:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "25996:220:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "26006:74:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "26072:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "26077:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "26013:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26013:67:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "26006:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "26178:3:8"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "26089:88:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26089:93:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "26089:93:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "26191:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "26202:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "26207:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "26198:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26198:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "26191:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "25984:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "25992:3:8",
														"type": ""
													}
												],
												"src": "25850:366:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "26393:248:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "26403:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "26415:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "26426:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "26411:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26411:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "26403:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "26450:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "26461:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "26446:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "26446:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "26469:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "26475:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "26465:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "26465:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "26439:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26439:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "26439:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "26495:139:8",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "26629:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "26503:124:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26503:131:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "26495:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "26373:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "26388:4:8",
														"type": ""
													}
												],
												"src": "26222:419:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "26706:40:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "26717:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "26733:5:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "26727:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26727:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "26717:6:8"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "26689:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "26699:6:8",
														"type": ""
													}
												],
												"src": "26647:99:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "26844:285:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "26854:53:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "26901:5:8"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "26868:32:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26868:39:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "26858:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "26916:78:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "26982:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "26987:6:8"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "26923:58:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "26923:71:8"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "26916:3:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "27042:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "27049:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "27038:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "27038:16:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "27056:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "27061:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "27003:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "27003:65:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "27003:65:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "27077:46:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "27088:3:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "27115:6:8"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "27093:21:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "27093:29:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "27084:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "27084:39:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "27077:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "26825:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "26832:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "26840:3:8",
														"type": ""
													}
												],
												"src": "26752:377:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "27253:195:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "27263:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "27275:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "27286:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "27271:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "27271:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "27263:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "27310:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "27321:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "27306:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "27306:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "27329:4:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "27335:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "27325:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "27325:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "27299:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "27299:47:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "27299:47:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "27355:86:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "27427:6:8"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "27436:4:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "27363:63:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "27363:78:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "27355:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "27225:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "27237:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "27248:4:8",
														"type": ""
													}
												],
												"src": "27135:313:8"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC20_$77_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$77_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bool_t_bytes32__to_t_bool_t_bytes32__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function convert_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_OptimisticOracleV3Interface_$1421__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_OptimisticOracleV3Interface_$1421_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes32t_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_bool__to_t_bytes32_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de(memPtr) {\n\n        mstore(add(memPtr, 0), \"Data asserted: 0x\")\n\n    }\n\n    function abi_encode_t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de(pos)\n        end := add(pos, 17)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc(memPtr) {\n\n        mstore(add(memPtr, 0), \" for dataId: 0x\")\n\n    }\n\n    function abi_encode_t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 15)\n        store_literal_in_memory_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc(pos)\n        end := add(pos, 15)\n    }\n\n    function store_literal_in_memory_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf(memPtr) {\n\n        mstore(add(memPtr, 0), \" and asserter: 0x\")\n\n    }\n\n    function abi_encode_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf(pos)\n        end := add(pos, 17)\n    }\n\n    function store_literal_in_memory_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49(memPtr) {\n\n        mstore(add(memPtr, 0), \" at timestamp: \")\n\n    }\n\n    function abi_encode_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 15)\n        store_literal_in_memory_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49(pos)\n        end := add(pos, 15)\n    }\n\n    function store_literal_in_memory_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8(memPtr) {\n\n        mstore(add(memPtr, 0), \" in the DataAsserter contract at\")\n\n        mstore(add(memPtr, 32), \" 0x\")\n\n    }\n\n    function abi_encode_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 35)\n        store_literal_in_memory_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8(pos)\n        end := add(pos, 35)\n    }\n\n    function store_literal_in_memory_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90(memPtr) {\n\n        mstore(add(memPtr, 0), \" is valid.\")\n\n    }\n\n    function abi_encode_t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 10)\n        store_literal_in_memory_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90(pos)\n        end := add(pos, 10)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de_t_bytes_memory_ptr_t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc_t_bytes_memory_ptr_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_t_bytes_memory_ptr_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_t_bytes_memory_ptr_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_t_bytes_memory_ptr_t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90__to_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value4, value3, value2, value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)\n\n        pos := abi_encode_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value3,  pos)\n\n        pos := abi_encode_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value4,  pos)\n\n        pos := abi_encode_t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_contract$_IERC20_$77_t_uint256_t_bytes32_t_bytes32__to_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_address_t_uint256_t_bytes32_t_bytes32__fromStack_reversed(headStart , value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 288)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_address_to_t_address_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_contract$_IERC20_$77_to_t_address_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value6,  add(headStart, 192))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value7,  add(headStart, 224))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value8,  add(headStart, 256))\n\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: approve from non-zero\")\n\n        mstore(add(memPtr, 32), \" to non-zero allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 54)\n        store_literal_in_memory_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function cleanup_t_bytes8(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff000000000000000000000000000000000000000000000000)\n    }\n\n    function leftAlign_t_bytes8(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes8_to_t_bytes8_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes8(cleanup_t_bytes8(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes32_t_bytes8__to_t_bytes32_t_bytes8__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_bytes8_to_t_bytes8_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 8)\n\n        end := pos\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function checked_add_t_uint8(x, y) -> sum {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xff) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1433": [
									{
										"length": 32,
										"start": 478
									},
									{
										"length": 32,
										"start": 769
									},
									{
										"length": 32,
										"start": 903
									},
									{
										"length": 32,
										"start": 1011
									},
									{
										"length": 32,
										"start": 1228
									}
								],
								"1436": [
									{
										"length": 32,
										"start": 608
									},
									{
										"length": 32,
										"start": 709
									},
									{
										"length": 32,
										"start": 977
									},
									{
										"length": 32,
										"start": 1081
									},
									{
										"length": 32,
										"start": 1832
									}
								],
								"1441": [
									{
										"length": 32,
										"start": 1262
									},
									{
										"length": 32,
										"start": 1796
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100935760003560e01c8063b33893da11610066578063b33893da14610135578063b75d4e2414610168578063d448a4ec14610186578063d509b017146101a2578063f1b156b2146101c057610093565b806320402e1d1461009857806354f6127f146100b65780638921a614146100e757806393ee663b14610105575b600080fd5b6100a06101dc565b6040516100ad919061120a565b60405180910390f35b6100d060048036038101906100cb9190611260565b610200565b6040516100de9291906112b7565b60405180910390f35b6100ef61025e565b6040516100fc9190611301565b60405180910390f35b61011f600480360381019061011a919061135a565b610282565b60405161012c91906113ad565b60405180910390f35b61014f600480360381019061014a9190611260565b61069c565b60405161015f94939291906113d7565b60405180910390f35b6101706106f9565b60405161017d919061143f565b60405180910390f35b6101a0600480360381019061019b9190611260565b6106ff565b005b6101aa610702565b6040516101b791906113ad565b60405180910390f35b6101da60048036038101906101d59190611486565b610726565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008084815260200190815260200160002060020160149054906101000a900460ff1661023c576000808060001b905091509150610259565b600160008085815260200190815260200160002060010154915091505b915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146102bd57816102bf565b335b915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634360af3d7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161033c91906114c6565b602060405180830381865afa158015610359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037d9190611517565b90506103cc3330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661091f909392919063ffffffff16565b6104377f0000000000000000000000000000000000000000000000000000000000000000827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109a89092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636457c97961047c86610af7565b61048588610af7565b61048e87610b36565b61049742610b99565b6104a030610b36565b6040516020016104b49594939291906117ae565b60405160208183030381529060405285306000611c207f0000000000000000000000000000000000000000000000000000000000000000887f00000000000000000000000000000000000000000000000000000000000000006000801b6040518a63ffffffff1660e01b8152600401610535999897969594939291906118a5565b6020604051808303816000875af1158015610554573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610578919061194e565b915060405180608001604052808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600080848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff021916908315150217905550905050818373ffffffffffffffffffffffffffffffffffffffff16867f29ae27364abd65b112ad0ac18e7e4f97360c20afa9636864dc91195d4d9204ec8760405161068c91906113ad565b60405180910390a4509392505050565b60006020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16905084565b611c2081565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e57600080fd5b80156108ba57600160008084815260200190815260200160002060020160146101000a81548160ff021916908315150217905550600080600084815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581525050905082816040015173ffffffffffffffffffffffffffffffffffffffff1682600001517fe49ab75dd8ad20084c43aacc9218434d61af074f44263f887212c41ad2d41c9d84602001516040516108ac91906113ad565b60405180910390a45061091b565b60008083815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549060ff021916905550505b5050565b6109a2846323b872dd60e01b8585856040516024016109409392919061197b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b50505050565b6000811480610a32575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016109ef9291906119b2565b602060405180830381865afa158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190611517565b145b610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6890611a5e565b60405180910390fd5b610af28363095ea7b360e01b8484604051602401610a90929190611a7e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d21565b505050565b6060610b06608083901c610de9565b610b0f83610de9565b604051602001610b20929190611ac8565b6040516020818303038152906040529050919050565b6060610b5760808360601b6bffffffffffffffffffffffff1916901c610de9565b610b728360601b6bffffffffffffffffffffffff1916610de9565b604051602001610b83929190611b41565b6040516020818303038152906040529050919050565b606060008203610be0576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610d1c565b600082905060005b60008214610c12578080610bfb90611b9c565b915050600a82610c0b9190611c13565b9150610be8565b60008167ffffffffffffffff811115610c2e57610c2d611c44565b5b6040519080825280601f01601f191660200182016040528015610c605781602001600182028036833780820191505090505b50905060008290505b60008614610d1457600181610c7e9190611c73565b90506000600a8088610c909190611c13565b610c9a9190611ca7565b87610ca59190611c73565b6030610cb19190611d0e565b905060008160f81b905080848481518110610ccf57610cce611d43565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88610d0b9190611c13565b97505050610c69565b819450505050505b919050565b6000610d83826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610fbe9092919063ffffffff16565b9050600081511480610da5575080806020019051810190610da49190611d87565b5b610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb90611e26565b60405180910390fd5b505050565b6000808260001c90506fffffffffffffffffffffffffffffffff8116905077ffffffffffffffff0000000000000000ffffffffffffffff68010000000000000000820282171690507bffffffff00000000ffffffff00000000ffffffff00000000ffffffff640100000000820282171690507dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff62010000820282171690507eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff610100820282171690507f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f601082028217169050600060087f0808080808080808080808080808080808080808080808080808080808080808831681610f0e57610f0d611be4565b5b049050600060047f0404040404040404040404040404040404040404040404040404040404040404841681610f4657610f45611be4565b5b049050600060027f0202020202020202020202020202020202020202020202020202020202020202851681610f7e57610f7d611be4565b5b0490507f3030303030303030303030303030303030303030303030303030303030303030602782841785160285010193508360001b945050505050919050565b6060610fcd8484600085610fd6565b90509392505050565b60608247101561101b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101290611eb8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516110449190611ed8565b60006040518083038185875af1925050503d8060008114611081576040519150601f19603f3d011682016040523d82523d6000602084013e611086565b606091505b5091509150611097878383876110a3565b92505050949350505050565b606083156111055760008351036110fd576110bd85611118565b6110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f390611f3b565b60405180910390fd5b5b829050611110565b61110f838361113b565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561114e5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111829190611f9f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111d06111cb6111c68461118b565b6111ab565b61118b565b9050919050565b60006111e2826111b5565b9050919050565b60006111f4826111d7565b9050919050565b611204816111e9565b82525050565b600060208201905061121f60008301846111fb565b92915050565b600080fd5b6000819050919050565b61123d8161122a565b811461124857600080fd5b50565b60008135905061125a81611234565b92915050565b60006020828403121561127657611275611225565b5b60006112848482850161124b565b91505092915050565b60008115159050919050565b6112a28161128d565b82525050565b6112b18161122a565b82525050565b60006040820190506112cc6000830185611299565b6112d960208301846112a8565b9392505050565b60006112eb826111d7565b9050919050565b6112fb816112e0565b82525050565b600060208201905061131660008301846112f2565b92915050565b60006113278261118b565b9050919050565b6113378161131c565b811461134257600080fd5b50565b6000813590506113548161132e565b92915050565b60008060006060848603121561137357611372611225565b5b60006113818682870161124b565b93505060206113928682870161124b565b92505060406113a386828701611345565b9150509250925092565b60006020820190506113c260008301846112a8565b92915050565b6113d18161131c565b82525050565b60006080820190506113ec60008301876112a8565b6113f960208301866112a8565b61140660408301856113c8565b6114136060830184611299565b95945050505050565b600067ffffffffffffffff82169050919050565b6114398161141c565b82525050565b60006020820190506114546000830184611430565b92915050565b6114638161128d565b811461146e57600080fd5b50565b6000813590506114808161145a565b92915050565b6000806040838503121561149d5761149c611225565b5b60006114ab8582860161124b565b92505060206114bc85828601611471565b9150509250929050565b60006020820190506114db60008301846113c8565b92915050565b6000819050919050565b6114f4816114e1565b81146114ff57600080fd5b50565b600081519050611511816114eb565b92915050565b60006020828403121561152d5761152c611225565b5b600061153b84828501611502565b91505092915050565b600081905092915050565b7f446174612061737365727465643a203078000000000000000000000000000000600082015250565b6000611585601183611544565b91506115908261154f565b601182019050919050565b600081519050919050565b600081905092915050565b60005b838110156115cf5780820151818401526020810190506115b4565b60008484015250505050565b60006115e68261159b565b6115f081856115a6565b93506116008185602086016115b1565b80840191505092915050565b7f20666f72206461746149643a2030780000000000000000000000000000000000600082015250565b6000611642600f83611544565b915061164d8261160c565b600f82019050919050565b7f20616e642061737365727465723a203078000000000000000000000000000000600082015250565b600061168e601183611544565b915061169982611658565b601182019050919050565b7f2061742074696d657374616d703a200000000000000000000000000000000000600082015250565b60006116da600f83611544565b91506116e5826116a4565b600f82019050919050565b7f20696e207468652044617461417373657274657220636f6e747261637420617460008201527f2030780000000000000000000000000000000000000000000000000000000000602082015250565b600061174c602383611544565b9150611757826116f0565b602382019050919050565b7f2069732076616c69642e00000000000000000000000000000000000000000000600082015250565b6000611798600a83611544565b91506117a382611762565b600a82019050919050565b60006117b982611578565b91506117c582886115db565b91506117d082611635565b91506117dc82876115db565b91506117e782611681565b91506117f382866115db565b91506117fe826116cd565b915061180a82856115db565b91506118158261173f565b915061182182846115db565b915061182c8261178b565b91508190509695505050505050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b60006118688261159b565b611872818561183b565b93506118828185602086016115b1565b61188b8161184c565b840191505092915050565b61189f816114e1565b82525050565b60006101208201905081810360008301526118c0818c61185d565b90506118cf602083018b6113c8565b6118dc604083018a6113c8565b6118e960608301896113c8565b6118f66080830188611430565b61190360a08301876111fb565b61191060c0830186611896565b61191d60e08301856112a8565b61192b6101008301846112a8565b9a9950505050505050505050565b60008151905061194881611234565b92915050565b60006020828403121561196457611963611225565b5b600061197284828501611939565b91505092915050565b600060608201905061199060008301866113c8565b61199d60208301856113c8565b6119aa6040830184611896565b949350505050565b60006040820190506119c760008301856113c8565b6119d460208301846113c8565b9392505050565b600082825260208201905092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000611a486036836119db565b9150611a53826119ec565b604082019050919050565b60006020820190508181036000830152611a7781611a3b565b9050919050565b6000604082019050611a9360008301856113c8565b611aa06020830184611896565b9392505050565b6000819050919050565b611ac2611abd8261122a565b611aa7565b82525050565b6000611ad48285611ab1565b602082019150611ae48284611ab1565b6020820191508190509392505050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b611b3b611b3682611af4565b611b20565b82525050565b6000611b4d8285611ab1565b602082019150611b5d8284611b2a565b6008820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ba7826114e1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bd957611bd8611b6d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611c1e826114e1565b9150611c29836114e1565b925082611c3957611c38611be4565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000611c7e826114e1565b9150611c89836114e1565b9250828203905081811115611ca157611ca0611b6d565b5b92915050565b6000611cb2826114e1565b9150611cbd836114e1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cf657611cf5611b6d565b5b828202905092915050565b600060ff82169050919050565b6000611d1982611d01565b9150611d2483611d01565b9250828201905060ff811115611d3d57611d3c611b6d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050611d818161145a565b92915050565b600060208284031215611d9d57611d9c611225565b5b6000611dab84828501611d72565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611e10602a836119db565b9150611e1b82611db4565b604082019050919050565b60006020820190508181036000830152611e3f81611e03565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ea26026836119db565b9150611ead82611e46565b604082019050919050565b60006020820190508181036000830152611ed181611e95565b9050919050565b6000611ee482846115db565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611f25601d836119db565b9150611f3082611eef565b602082019050919050565b60006020820190508181036000830152611f5481611f18565b9050919050565b600081519050919050565b6000611f7182611f5b565b611f7b81856119db565b9350611f8b8185602086016115b1565b611f948161184c565b840191505092915050565b60006020820190508181036000830152611fb98184611f66565b90509291505056fea2646970667358221220e7d839fb68cfae3d86b3534a6a9fb5b0bbb84b76071af0694142078f1ed1b4e064736f6c63430008100033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB33893DA GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB33893DA EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0xB75D4E24 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0xD448A4EC EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0xD509B017 EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xF1B156B2 EQ PUSH2 0x1C0 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x20402E1D EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8921A614 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x93EE663B EQ PUSH2 0x105 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x120A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x200 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDE SWAP3 SWAP2 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0x25E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFC SWAP2 SWAP1 PUSH2 0x1301 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x135A JUMP JUMPDEST PUSH2 0x282 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x170 PUSH2 0x6F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17D SWAP2 SWAP1 PUSH2 0x143F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x6FF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AA PUSH2 0x702 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B7 SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x726 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23C JUMPI PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 SHL SWAP1 POP SWAP2 POP SWAP2 POP PUSH2 0x259 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2BD JUMPI DUP2 PUSH2 0x2BF JUMP JUMPDEST CALLER JUMPDEST SWAP2 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4360AF3D PUSH32 0x0 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x33C SWAP2 SWAP1 PUSH2 0x14C6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x359 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37D SWAP2 SWAP1 PUSH2 0x1517 JUMP JUMPDEST SWAP1 POP PUSH2 0x3CC CALLER ADDRESS DUP4 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x91F SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x437 PUSH32 0x0 DUP3 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9A8 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6457C979 PUSH2 0x47C DUP7 PUSH2 0xAF7 JUMP JUMPDEST PUSH2 0x485 DUP9 PUSH2 0xAF7 JUMP JUMPDEST PUSH2 0x48E DUP8 PUSH2 0xB36 JUMP JUMPDEST PUSH2 0x497 TIMESTAMP PUSH2 0xB99 JUMP JUMPDEST PUSH2 0x4A0 ADDRESS PUSH2 0xB36 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4B4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP6 ADDRESS PUSH1 0x0 PUSH2 0x1C20 PUSH32 0x0 DUP9 PUSH32 0x0 PUSH1 0x0 DUP1 SHL PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x535 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x18A5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x554 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x578 SWAP2 SWAP1 PUSH2 0x194E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH32 0x29AE27364ABD65B112AD0AC18E7E4F97360C20AFA9636864DC91195D4D9204EC DUP8 PUSH1 0x40 MLOAD PUSH2 0x68C SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP5 JUMP JUMPDEST PUSH2 0x1C20 DUP2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x8BA JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH32 0xE49AB75DD8AD20084C43AACC9218434D61AF074F44263F887212C41AD2D41C9D DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x8AC SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH2 0x91B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x9A2 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x940 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x197B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0xD21 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0xA32 JUMPI POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9EF SWAP3 SWAP2 SWAP1 PUSH2 0x19B2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA30 SWAP2 SWAP1 PUSH2 0x1517 JUMP JUMPDEST EQ JUMPDEST PUSH2 0xA71 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA68 SWAP1 PUSH2 0x1A5E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAF2 DUP4 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xA90 SWAP3 SWAP2 SWAP1 PUSH2 0x1A7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0xD21 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB06 PUSH1 0x80 DUP4 SWAP1 SHR PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0xB0F DUP4 PUSH2 0xDE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB20 SWAP3 SWAP2 SWAP1 PUSH2 0x1AC8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB57 PUSH1 0x80 DUP4 PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SHR PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0xB72 DUP4 PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH2 0xDE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB83 SWAP3 SWAP2 SWAP1 PUSH2 0x1B41 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SUB PUSH2 0xBE0 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0xD1C JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0xC12 JUMPI DUP1 DUP1 PUSH2 0xBFB SWAP1 PUSH2 0x1B9C JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0xC0B SWAP2 SWAP1 PUSH2 0x1C13 JUMP JUMPDEST SWAP2 POP PUSH2 0xBE8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC2E JUMPI PUSH2 0xC2D PUSH2 0x1C44 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC60 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 SWAP1 POP JUMPDEST PUSH1 0x0 DUP7 EQ PUSH2 0xD14 JUMPI PUSH1 0x1 DUP2 PUSH2 0xC7E SWAP2 SWAP1 PUSH2 0x1C73 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xA DUP1 DUP9 PUSH2 0xC90 SWAP2 SWAP1 PUSH2 0x1C13 JUMP JUMPDEST PUSH2 0xC9A SWAP2 SWAP1 PUSH2 0x1CA7 JUMP JUMPDEST DUP8 PUSH2 0xCA5 SWAP2 SWAP1 PUSH2 0x1C73 JUMP JUMPDEST PUSH1 0x30 PUSH2 0xCB1 SWAP2 SWAP1 PUSH2 0x1D0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF8 SHL SWAP1 POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xCCF JUMPI PUSH2 0xCCE PUSH2 0x1D43 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP9 PUSH2 0xD0B SWAP2 SWAP1 PUSH2 0x1C13 JUMP JUMPDEST SWAP8 POP POP POP PUSH2 0xC69 JUMP JUMPDEST DUP2 SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD83 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xFBE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0xDA5 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDA4 SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST JUMPDEST PUSH2 0xDE4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDDB SWAP1 PUSH2 0x1E26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 SHR SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP1 POP PUSH24 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF PUSH9 0x10000000000000000 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH28 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF PUSH5 0x100000000 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH30 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF PUSH3 0x10000 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH31 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF PUSH2 0x100 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH32 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F PUSH1 0x10 DUP3 MUL DUP3 OR AND SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH32 0x808080808080808080808080808080808080808080808080808080808080808 DUP4 AND DUP2 PUSH2 0xF0E JUMPI PUSH2 0xF0D PUSH2 0x1BE4 JUMP JUMPDEST JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH32 0x404040404040404040404040404040404040404040404040404040404040404 DUP5 AND DUP2 PUSH2 0xF46 JUMPI PUSH2 0xF45 PUSH2 0x1BE4 JUMP JUMPDEST JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH32 0x202020202020202020202020202020202020202020202020202020202020202 DUP6 AND DUP2 PUSH2 0xF7E JUMPI PUSH2 0xF7D PUSH2 0x1BE4 JUMP JUMPDEST JUMPDEST DIV SWAP1 POP PUSH32 0x3030303030303030303030303030303030303030303030303030303030303030 PUSH1 0x27 DUP3 DUP5 OR DUP6 AND MUL DUP6 ADD ADD SWAP4 POP DUP4 PUSH1 0x0 SHL SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFCD DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xFD6 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x101B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1012 SWAP1 PUSH2 0x1EB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1044 SWAP2 SWAP1 PUSH2 0x1ED8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1081 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1086 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1097 DUP8 DUP4 DUP4 DUP8 PUSH2 0x10A3 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1105 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x10FD JUMPI PUSH2 0x10BD DUP6 PUSH2 0x1118 JUMP JUMPDEST PUSH2 0x10FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10F3 SWAP1 PUSH2 0x1F3B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1110 JUMP JUMPDEST PUSH2 0x110F DUP4 DUP4 PUSH2 0x113B JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x114E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1182 SWAP2 SWAP1 PUSH2 0x1F9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11D0 PUSH2 0x11CB PUSH2 0x11C6 DUP5 PUSH2 0x118B JUMP JUMPDEST PUSH2 0x11AB JUMP JUMPDEST PUSH2 0x118B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11E2 DUP3 PUSH2 0x11B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F4 DUP3 PUSH2 0x11D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1204 DUP2 PUSH2 0x11E9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x121F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11FB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x123D DUP2 PUSH2 0x122A JUMP JUMPDEST DUP2 EQ PUSH2 0x1248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x125A DUP2 PUSH2 0x1234 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1276 JUMPI PUSH2 0x1275 PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1284 DUP5 DUP3 DUP6 ADD PUSH2 0x124B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12A2 DUP2 PUSH2 0x128D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x12B1 DUP2 PUSH2 0x122A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x12CC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1299 JUMP JUMPDEST PUSH2 0x12D9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x12A8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12EB DUP3 PUSH2 0x11D7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12FB DUP2 PUSH2 0x12E0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1316 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12F2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1327 DUP3 PUSH2 0x118B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1337 DUP2 PUSH2 0x131C JUMP JUMPDEST DUP2 EQ PUSH2 0x1342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1354 DUP2 PUSH2 0x132E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1373 JUMPI PUSH2 0x1372 PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1381 DUP7 DUP3 DUP8 ADD PUSH2 0x124B JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1392 DUP7 DUP3 DUP8 ADD PUSH2 0x124B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x13A3 DUP7 DUP3 DUP8 ADD PUSH2 0x1345 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x13C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12A8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x13D1 DUP2 PUSH2 0x131C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x13EC PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x12A8 JUMP JUMPDEST PUSH2 0x13F9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x12A8 JUMP JUMPDEST PUSH2 0x1406 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x1413 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1299 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1439 DUP2 PUSH2 0x141C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1454 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1430 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1463 DUP2 PUSH2 0x128D JUMP JUMPDEST DUP2 EQ PUSH2 0x146E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1480 DUP2 PUSH2 0x145A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x149D JUMPI PUSH2 0x149C PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x14AB DUP6 DUP3 DUP7 ADD PUSH2 0x124B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x14BC DUP6 DUP3 DUP7 ADD PUSH2 0x1471 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x14DB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x13C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14F4 DUP2 PUSH2 0x14E1 JUMP JUMPDEST DUP2 EQ PUSH2 0x14FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1511 DUP2 PUSH2 0x14EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x152D JUMPI PUSH2 0x152C PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x153B DUP5 DUP3 DUP6 ADD PUSH2 0x1502 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x446174612061737365727465643A203078000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1585 PUSH1 0x11 DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x1590 DUP3 PUSH2 0x154F JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x15CF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x15B4 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E6 DUP3 PUSH2 0x159B JUMP JUMPDEST PUSH2 0x15F0 DUP2 DUP6 PUSH2 0x15A6 JUMP JUMPDEST SWAP4 POP PUSH2 0x1600 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x15B1 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x20666F72206461746149643A2030780000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1642 PUSH1 0xF DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x164D DUP3 PUSH2 0x160C JUMP JUMPDEST PUSH1 0xF DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x20616E642061737365727465723A203078000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x168E PUSH1 0x11 DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x1699 DUP3 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x11 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x2061742074696D657374616D703A200000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16DA PUSH1 0xF DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x16E5 DUP3 PUSH2 0x16A4 JUMP JUMPDEST PUSH1 0xF DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x20696E207468652044617461417373657274657220636F6E7472616374206174 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x2030780000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x174C PUSH1 0x23 DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x1757 DUP3 PUSH2 0x16F0 JUMP JUMPDEST PUSH1 0x23 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x2069732076616C69642E00000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1798 PUSH1 0xA DUP4 PUSH2 0x1544 JUMP JUMPDEST SWAP2 POP PUSH2 0x17A3 DUP3 PUSH2 0x1762 JUMP JUMPDEST PUSH1 0xA DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17B9 DUP3 PUSH2 0x1578 JUMP JUMPDEST SWAP2 POP PUSH2 0x17C5 DUP3 DUP9 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x17D0 DUP3 PUSH2 0x1635 JUMP JUMPDEST SWAP2 POP PUSH2 0x17DC DUP3 DUP8 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x17E7 DUP3 PUSH2 0x1681 JUMP JUMPDEST SWAP2 POP PUSH2 0x17F3 DUP3 DUP7 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x17FE DUP3 PUSH2 0x16CD JUMP JUMPDEST SWAP2 POP PUSH2 0x180A DUP3 DUP6 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1815 DUP3 PUSH2 0x173F JUMP JUMPDEST SWAP2 POP PUSH2 0x1821 DUP3 DUP5 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP PUSH2 0x182C DUP3 PUSH2 0x178B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1868 DUP3 PUSH2 0x159B JUMP JUMPDEST PUSH2 0x1872 DUP2 DUP6 PUSH2 0x183B JUMP JUMPDEST SWAP4 POP PUSH2 0x1882 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x15B1 JUMP JUMPDEST PUSH2 0x188B DUP2 PUSH2 0x184C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x189F DUP2 PUSH2 0x14E1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18C0 DUP2 DUP13 PUSH2 0x185D JUMP JUMPDEST SWAP1 POP PUSH2 0x18CF PUSH1 0x20 DUP4 ADD DUP12 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x18DC PUSH1 0x40 DUP4 ADD DUP11 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x18E9 PUSH1 0x60 DUP4 ADD DUP10 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x18F6 PUSH1 0x80 DUP4 ADD DUP9 PUSH2 0x1430 JUMP JUMPDEST PUSH2 0x1903 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x11FB JUMP JUMPDEST PUSH2 0x1910 PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x1896 JUMP JUMPDEST PUSH2 0x191D PUSH1 0xE0 DUP4 ADD DUP6 PUSH2 0x12A8 JUMP JUMPDEST PUSH2 0x192B PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x12A8 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1948 DUP2 PUSH2 0x1234 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1964 JUMPI PUSH2 0x1963 PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1972 DUP5 DUP3 DUP6 ADD PUSH2 0x1939 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1990 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x199D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x19AA PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1896 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x19C7 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x19D4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x13C8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x20746F206E6F6E2D7A65726F20616C6C6F77616E636500000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A48 PUSH1 0x36 DUP4 PUSH2 0x19DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1A53 DUP3 PUSH2 0x19EC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A77 DUP2 PUSH2 0x1A3B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1A93 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x1AA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1896 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AC2 PUSH2 0x1ABD DUP3 PUSH2 0x122A JUMP JUMPDEST PUSH2 0x1AA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD4 DUP3 DUP6 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x1AE4 DUP3 DUP5 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B3B PUSH2 0x1B36 DUP3 PUSH2 0x1AF4 JUMP JUMPDEST PUSH2 0x1B20 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B4D DUP3 DUP6 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x1B5D DUP3 DUP5 PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x8 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1BA7 DUP3 PUSH2 0x14E1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1BD9 JUMPI PUSH2 0x1BD8 PUSH2 0x1B6D JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C1E DUP3 PUSH2 0x14E1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C29 DUP4 PUSH2 0x14E1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x1C39 JUMPI PUSH2 0x1C38 PUSH2 0x1BE4 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C7E DUP3 PUSH2 0x14E1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C89 DUP4 PUSH2 0x14E1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1CA1 JUMPI PUSH2 0x1CA0 PUSH2 0x1B6D JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CB2 DUP3 PUSH2 0x14E1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CBD DUP4 PUSH2 0x14E1 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1CF6 JUMPI PUSH2 0x1CF5 PUSH2 0x1B6D JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D19 DUP3 PUSH2 0x1D01 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D24 DUP4 PUSH2 0x1D01 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x1D3D JUMPI PUSH2 0x1D3C PUSH2 0x1B6D JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1D81 DUP2 PUSH2 0x145A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D9D JUMPI PUSH2 0x1D9C PUSH2 0x1225 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DAB DUP5 DUP3 DUP6 ADD PUSH2 0x1D72 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E10 PUSH1 0x2A DUP4 PUSH2 0x19DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1E1B DUP3 PUSH2 0x1DB4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E3F DUP2 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA2 PUSH1 0x26 DUP4 PUSH2 0x19DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1EAD DUP3 PUSH2 0x1E46 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ED1 DUP2 PUSH2 0x1E95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EE4 DUP3 DUP5 PUSH2 0x15DB JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F25 PUSH1 0x1D DUP4 PUSH2 0x19DB JUMP JUMPDEST SWAP2 POP PUSH2 0x1F30 DUP3 PUSH2 0x1EEF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F54 DUP2 PUSH2 0x1F18 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F71 DUP3 PUSH2 0x1F5B JUMP JUMPDEST PUSH2 0x1F7B DUP2 DUP6 PUSH2 0x19DB JUMP JUMPDEST SWAP4 POP PUSH2 0x1F8B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x15B1 JUMP JUMPDEST PUSH2 0x1F94 DUP2 PUSH2 0x184C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FB9 DUP2 DUP5 PUSH2 0x1F66 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xD8 CODECOPY 0xFB PUSH9 0xCFAE3D86B3534A6A9F 0xB5 0xB0 0xBB 0xB8 0x4B PUSH23 0x71AF0694142078F1ED1B4E064736F6C63430008100033 ",
							"sourceMap": "720:5156:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;782:39;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2047:211;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;828:47;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2651:2158;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1281:55;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;882:47;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5808:65;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;936:42;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4862:745;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;782:39;;;:::o;2047:211::-;2106:4;2112:7;2137:14;:27;2152:11;2137:27;;;;;;;;;;;:36;;;;;;;;;;;;2132:60;;2183:5;2190:1;2175:17;;;;;;;;;;;2132:60;2211:4;2217:14;:27;2232:11;2217:27;;;;;;;;;;;:32;;;2203:47;;;;2047:211;;;;:::o;828:47::-;;;:::o;2651:2158::-;2772:19;2835:1;2815:22;;:8;:22;;;:46;;2853:8;2815:46;;;2840:10;2815:46;2804:57;;2872:12;2887:2;:17;;;2913:15;2887:43;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2872:58;;2941:65;2974:10;2994:4;3001;2941:15;:32;;;;:65;;;;;;:::i;:::-;3017:46;3053:2;3058:4;3017:15;:27;;;;:46;;;;;:::i;:::-;3686:2;:14;;;3856:27;3878:4;3856:21;:27::i;:::-;3938:29;3960:6;3938:21;:29::i;:::-;4024:38;4053:8;4024:28;:38::i;:::-;4117:42;4143:15;4117:25;:42::i;:::-;4234:43;4271:4;4234:28;:43::i;:::-;3715:608;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4338:8;4369:4;4397:1;925:4;4472:15;4502:4;4521:17;4561:1;4553:10;;3686:902;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3672:916;;4629:107;;;;;;;;4657:6;4629:107;;;;4678:4;4629:107;;;;4697:8;4629:107;;;;;;4720:5;4629:107;;;;;4599:14;:27;4614:11;4599:27;;;;;;;;;;;:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4789:11;4779:8;4752:49;;4765:6;4752:49;4773:4;4752:49;;;;;;:::i;:::-;;;;;;;;2793:2016;2651:2158;;;;;:::o;1281:55::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;882:47::-;925:4;882:47;:::o;5808:65::-;;:::o;936:42::-;;;:::o;4862:745::-;5016:2;4994:25;;:10;:25;;;4986:34;;;;;;5111:18;5107:492;;;5185:4;5146:14;:27;5161:11;5146:27;;;;;;;;;;;:36;;;:43;;;;;;;;;;;;;;;;;;5204:34;5241:14;:27;5256:11;5241:27;;;;;;;;;;;5204:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:11;5404:13;:22;;;5288:183;;5328:13;:20;;;5288:183;5367:13;:18;;;5288:183;;;;;;:::i;:::-;;;;;;;;5131:428;5107:492;;;5572:14;:27;5587:11;5572:27;;;;;;;;;;;;5565:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5107:492;4862:745;;:::o;1355:203:2:-;1455:96;1475:5;1505:27;;;1534:4;1540:2;1544:5;1482:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1455:19;:96::i;:::-;1355:203;;;;:::o;1818:573::-;2152:1;2143:5;:10;2142:62;;;;2202:1;2159:5;:15;;;2183:4;2190:7;2159:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;2142:62;2121:163;;;;;;;;;;;;:::i;:::-;;;;;;;;;2294:90;2314:5;2344:22;;;2368:7;2377:5;2321:62;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2294:19;:90::i;:::-;1818:573;;;:::o;2586:182:4:-;2647:12;2695:35;2726:3;2715:7;:14;;2695:19;:35::i;:::-;2732:28;2752:7;2732:19;:28::i;:::-;2678:83;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2671:90;;2586:182;;;:::o;3145:218::-;3207:12;3267:47;3310:3;3303:1;3295:10;;3287:19;;;:26;;3267:19;:47::i;:::-;3323:31;3351:1;3343:10;;3323:31;;;:19;:31::i;:::-;3250:106;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3231:125;;3145:218;;;:::o;3569:546::-;3628:12;3661:1;3656;:6;3652:47;;3678:10;;;;;;;;;;;;;;;;;;;;;3652:47;3708:9;3720:1;3708:13;;3731:11;3752:66;3764:1;3759;:6;3752:66;;3781:5;;;;;:::i;:::-;;;;3805:2;3800:7;;;;;:::i;:::-;;;3752:66;;;3827:17;3857:3;3847:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3827:34;;3871:9;3883:3;3871:15;;3896:192;3908:1;3903;:6;3896:192;;3933:1;3929;:5;;;;:::i;:::-;3925:9;;3948:10;3988:2;3982;3978:1;:6;;;;:::i;:::-;3977:13;;;;:::i;:::-;3973:1;:17;;;;:::i;:::-;3962:2;:29;;;;:::i;:::-;3948:44;;4006:9;4025:4;4018:12;;4006:24;;4054:2;4044:4;4049:1;4044:7;;;;;;;;:::i;:::-;;;;;:12;;;;;;;;;;;4075:2;4070:7;;;;;:::i;:::-;;;3911:177;;3896:192;;;4104:4;4097:11;;;;;;3569:546;;;;:::o;5173:642:2:-;5592:23;5618:69;5646:4;5618:69;;;;;;;;;;;;;;;;;5626:5;5618:27;;;;:69;;;;;:::i;:::-;5592:95;;5726:1;5705:10;:17;:22;:56;;;;5742:10;5731:30;;;;;;;;;;;;:::i;:::-;5705:56;5697:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;5243:572;5173:642;;:::o;897:1306:4:-;965:7;1008:9;1028:7;1020:16;;1008:28;;1092:66;1088:1;:70;1084:74;;1196:66;1186:5;1182:1;:9;1177:1;:15;1176:86;1172:90;;1300:66;1290:5;1286:1;:9;1281:1;:15;1280:86;1276:90;;1404:66;1394:5;1390:1;:9;1385:1;:15;1384:86;1380:90;;1507:66;1498:4;1494:1;:8;1489:1;:14;1488:85;1484:89;;1610:66;1601:4;1597:1;:8;1592:1;:14;1591:85;1587:89;;1717:9;1804:1;1734:66;1730:1;:70;1729:76;;;;;:::i;:::-;;;1717:88;;1819:9;1906:1;1836:66;1832:1;:70;1831:76;;;;;:::i;:::-;;;1819:88;;1921:9;2008:1;1938:66;1934:1;:70;1933:76;;;;;:::i;:::-;;;1921:88;;2054:66;2047:4;2041:1;2037;:5;2032:1;:11;2031:20;2027:1;:24;:93;2023:97;;2184:1;2176:10;;2169:17;;;;;;897:1306;;;:::o;4108:223:3:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;;4108:223;;;;;:::o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;;;;5165:446;;;;;;:::o;7671:628::-;7851:12;7879:7;7875:418;;;7927:1;7906:10;:17;:22;7902:286;;8121:18;8132:6;8121:10;:18::i;:::-;8113:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7902:286;8208:10;8201:17;;;;7875:418;8249:33;8257:10;8269:12;8249:7;:33::i;:::-;7671:628;;;;;;;:::o;1412:320::-;1472:4;1724:1;1702:7;:19;;;:23;1695:30;;1412:320;;;:::o;8821:540::-;9000:1;8980:10;:17;:21;8976:379;;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;:::-;;;;;;;;7:126:8;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:60::-;167:3;188:5;181:12;;139:60;;;:::o;205:142::-;255:9;288:53;306:34;315:24;333:5;315:24;:::i;:::-;306:34;:::i;:::-;288:53;:::i;:::-;275:66;;205:142;;;:::o;353:126::-;403:9;436:37;467:5;436:37;:::i;:::-;423:50;;353:126;;;:::o;485:139::-;548:9;581:37;612:5;581:37;:::i;:::-;568:50;;485:139;;;:::o;630:157::-;730:50;774:5;730:50;:::i;:::-;725:3;718:63;630:157;;:::o;793:248::-;899:4;937:2;926:9;922:18;914:26;;950:84;1031:1;1020:9;1016:17;1007:6;950:84;:::i;:::-;793:248;;;;:::o;1128:117::-;1237:1;1234;1227:12;1374:77;1411:7;1440:5;1429:16;;1374:77;;;:::o;1457:122::-;1530:24;1548:5;1530:24;:::i;:::-;1523:5;1520:35;1510:63;;1569:1;1566;1559:12;1510:63;1457:122;:::o;1585:139::-;1631:5;1669:6;1656:20;1647:29;;1685:33;1712:5;1685:33;:::i;:::-;1585:139;;;;:::o;1730:329::-;1789:6;1838:2;1826:9;1817:7;1813:23;1809:32;1806:119;;;1844:79;;:::i;:::-;1806:119;1964:1;1989:53;2034:7;2025:6;2014:9;2010:22;1989:53;:::i;:::-;1979:63;;1935:117;1730:329;;;;:::o;2065:90::-;2099:7;2142:5;2135:13;2128:21;2117:32;;2065:90;;;:::o;2161:109::-;2242:21;2257:5;2242:21;:::i;:::-;2237:3;2230:34;2161:109;;:::o;2276:118::-;2363:24;2381:5;2363:24;:::i;:::-;2358:3;2351:37;2276:118;;:::o;2400:320::-;2515:4;2553:2;2542:9;2538:18;2530:26;;2566:65;2628:1;2617:9;2613:17;2604:6;2566:65;:::i;:::-;2641:72;2709:2;2698:9;2694:18;2685:6;2641:72;:::i;:::-;2400:320;;;;;:::o;2726:162::-;2812:9;2845:37;2876:5;2845:37;:::i;:::-;2832:50;;2726:162;;;:::o;2894:203::-;3017:73;3084:5;3017:73;:::i;:::-;3012:3;3005:86;2894:203;;:::o;3103:294::-;3232:4;3270:2;3259:9;3255:18;3247:26;;3283:107;3387:1;3376:9;3372:17;3363:6;3283:107;:::i;:::-;3103:294;;;;:::o;3403:96::-;3440:7;3469:24;3487:5;3469:24;:::i;:::-;3458:35;;3403:96;;;:::o;3505:122::-;3578:24;3596:5;3578:24;:::i;:::-;3571:5;3568:35;3558:63;;3617:1;3614;3607:12;3558:63;3505:122;:::o;3633:139::-;3679:5;3717:6;3704:20;3695:29;;3733:33;3760:5;3733:33;:::i;:::-;3633:139;;;;:::o;3778:619::-;3855:6;3863;3871;3920:2;3908:9;3899:7;3895:23;3891:32;3888:119;;;3926:79;;:::i;:::-;3888:119;4046:1;4071:53;4116:7;4107:6;4096:9;4092:22;4071:53;:::i;:::-;4061:63;;4017:117;4173:2;4199:53;4244:7;4235:6;4224:9;4220:22;4199:53;:::i;:::-;4189:63;;4144:118;4301:2;4327:53;4372:7;4363:6;4352:9;4348:22;4327:53;:::i;:::-;4317:63;;4272:118;3778:619;;;;;:::o;4403:222::-;4496:4;4534:2;4523:9;4519:18;4511:26;;4547:71;4615:1;4604:9;4600:17;4591:6;4547:71;:::i;:::-;4403:222;;;;:::o;4631:118::-;4718:24;4736:5;4718:24;:::i;:::-;4713:3;4706:37;4631:118;;:::o;4755:541::-;4926:4;4964:3;4953:9;4949:19;4941:27;;4978:71;5046:1;5035:9;5031:17;5022:6;4978:71;:::i;:::-;5059:72;5127:2;5116:9;5112:18;5103:6;5059:72;:::i;:::-;5141;5209:2;5198:9;5194:18;5185:6;5141:72;:::i;:::-;5223:66;5285:2;5274:9;5270:18;5261:6;5223:66;:::i;:::-;4755:541;;;;;;;:::o;5302:101::-;5338:7;5378:18;5371:5;5367:30;5356:41;;5302:101;;;:::o;5409:115::-;5494:23;5511:5;5494:23;:::i;:::-;5489:3;5482:36;5409:115;;:::o;5530:218::-;5621:4;5659:2;5648:9;5644:18;5636:26;;5672:69;5738:1;5727:9;5723:17;5714:6;5672:69;:::i;:::-;5530:218;;;;:::o;5754:116::-;5824:21;5839:5;5824:21;:::i;:::-;5817:5;5814:32;5804:60;;5860:1;5857;5850:12;5804:60;5754:116;:::o;5876:133::-;5919:5;5957:6;5944:20;5935:29;;5973:30;5997:5;5973:30;:::i;:::-;5876:133;;;;:::o;6015:468::-;6080:6;6088;6137:2;6125:9;6116:7;6112:23;6108:32;6105:119;;;6143:79;;:::i;:::-;6105:119;6263:1;6288:53;6333:7;6324:6;6313:9;6309:22;6288:53;:::i;:::-;6278:63;;6234:117;6390:2;6416:50;6458:7;6449:6;6438:9;6434:22;6416:50;:::i;:::-;6406:60;;6361:115;6015:468;;;;;:::o;6489:222::-;6582:4;6620:2;6609:9;6605:18;6597:26;;6633:71;6701:1;6690:9;6686:17;6677:6;6633:71;:::i;:::-;6489:222;;;;:::o;6717:77::-;6754:7;6783:5;6772:16;;6717:77;;;:::o;6800:122::-;6873:24;6891:5;6873:24;:::i;:::-;6866:5;6863:35;6853:63;;6912:1;6909;6902:12;6853:63;6800:122;:::o;6928:143::-;6985:5;7016:6;7010:13;7001:22;;7032:33;7059:5;7032:33;:::i;:::-;6928:143;;;;:::o;7077:351::-;7147:6;7196:2;7184:9;7175:7;7171:23;7167:32;7164:119;;;7202:79;;:::i;:::-;7164:119;7322:1;7347:64;7403:7;7394:6;7383:9;7379:22;7347:64;:::i;:::-;7337:74;;7293:128;7077:351;;;;:::o;7434:148::-;7536:11;7573:3;7558:18;;7434:148;;;;:::o;7588:167::-;7728:19;7724:1;7716:6;7712:14;7705:43;7588:167;:::o;7761:402::-;7921:3;7942:85;8024:2;8019:3;7942:85;:::i;:::-;7935:92;;8036:93;8125:3;8036:93;:::i;:::-;8154:2;8149:3;8145:12;8138:19;;7761:402;;;:::o;8169:98::-;8220:6;8254:5;8248:12;8238:22;;8169:98;;;:::o;8273:147::-;8374:11;8411:3;8396:18;;8273:147;;;;:::o;8426:246::-;8507:1;8517:113;8531:6;8528:1;8525:13;8517:113;;;8616:1;8611:3;8607:11;8601:18;8597:1;8592:3;8588:11;8581:39;8553:2;8550:1;8546:10;8541:15;;8517:113;;;8664:1;8655:6;8650:3;8646:16;8639:27;8488:184;8426:246;;;:::o;8678:386::-;8782:3;8810:38;8842:5;8810:38;:::i;:::-;8864:88;8945:6;8940:3;8864:88;:::i;:::-;8857:95;;8961:65;9019:6;9014:3;9007:4;9000:5;8996:16;8961:65;:::i;:::-;9051:6;9046:3;9042:16;9035:23;;8786:278;8678:386;;;;:::o;9070:165::-;9210:17;9206:1;9198:6;9194:14;9187:41;9070:165;:::o;9241:402::-;9401:3;9422:85;9504:2;9499:3;9422:85;:::i;:::-;9415:92;;9516:93;9605:3;9516:93;:::i;:::-;9634:2;9629:3;9625:12;9618:19;;9241:402;;;:::o;9649:167::-;9789:19;9785:1;9777:6;9773:14;9766:43;9649:167;:::o;9822:402::-;9982:3;10003:85;10085:2;10080:3;10003:85;:::i;:::-;9996:92;;10097:93;10186:3;10097:93;:::i;:::-;10215:2;10210:3;10206:12;10199:19;;9822:402;;;:::o;10230:165::-;10370:17;10366:1;10358:6;10354:14;10347:41;10230:165;:::o;10401:402::-;10561:3;10582:85;10664:2;10659:3;10582:85;:::i;:::-;10575:92;;10676:93;10765:3;10676:93;:::i;:::-;10794:2;10789:3;10785:12;10778:19;;10401:402;;;:::o;10809:222::-;10949:34;10945:1;10937:6;10933:14;10926:58;11018:5;11013:2;11005:6;11001:15;10994:30;10809:222;:::o;11037:402::-;11197:3;11218:85;11300:2;11295:3;11218:85;:::i;:::-;11211:92;;11312:93;11401:3;11312:93;:::i;:::-;11430:2;11425:3;11421:12;11414:19;;11037:402;;;:::o;11445:160::-;11585:12;11581:1;11573:6;11569:14;11562:36;11445:160;:::o;11611:402::-;11771:3;11792:85;11874:2;11869:3;11792:85;:::i;:::-;11785:92;;11886:93;11975:3;11886:93;:::i;:::-;12004:2;11999:3;11995:12;11988:19;;11611:402;;;:::o;12019:2491::-;12939:3;12961:148;13105:3;12961:148;:::i;:::-;12954:155;;13126:93;13215:3;13206:6;13126:93;:::i;:::-;13119:100;;13236:148;13380:3;13236:148;:::i;:::-;13229:155;;13401:93;13490:3;13481:6;13401:93;:::i;:::-;13394:100;;13511:148;13655:3;13511:148;:::i;:::-;13504:155;;13676:93;13765:3;13756:6;13676:93;:::i;:::-;13669:100;;13786:148;13930:3;13786:148;:::i;:::-;13779:155;;13951:93;14040:3;14031:6;13951:93;:::i;:::-;13944:100;;14061:148;14205:3;14061:148;:::i;:::-;14054:155;;14226:93;14315:3;14306:6;14226:93;:::i;:::-;14219:100;;14336:148;14480:3;14336:148;:::i;:::-;14329:155;;14501:3;14494:10;;12019:2491;;;;;;;;:::o;14516:168::-;14599:11;14633:6;14628:3;14621:19;14673:4;14668:3;14664:14;14649:29;;14516:168;;;;:::o;14690:102::-;14731:6;14782:2;14778:7;14773:2;14766:5;14762:14;14758:28;14748:38;;14690:102;;;:::o;14798:373::-;14884:3;14912:38;14944:5;14912:38;:::i;:::-;14966:70;15029:6;15024:3;14966:70;:::i;:::-;14959:77;;15045:65;15103:6;15098:3;15091:4;15084:5;15080:16;15045:65;:::i;:::-;15135:29;15157:6;15135:29;:::i;:::-;15130:3;15126:39;15119:46;;14888:283;14798:373;;;;:::o;15177:118::-;15264:24;15282:5;15264:24;:::i;:::-;15259:3;15252:37;15177:118;;:::o;15301:1217::-;15647:4;15685:3;15674:9;15670:19;15662:27;;15735:9;15729:4;15725:20;15721:1;15710:9;15706:17;15699:47;15763:76;15834:4;15825:6;15763:76;:::i;:::-;15755:84;;15849:72;15917:2;15906:9;15902:18;15893:6;15849:72;:::i;:::-;15931;15999:2;15988:9;15984:18;15975:6;15931:72;:::i;:::-;16013;16081:2;16070:9;16066:18;16057:6;16013:72;:::i;:::-;16095:71;16161:3;16150:9;16146:19;16137:6;16095:71;:::i;:::-;16176:86;16257:3;16246:9;16242:19;16233:6;16176:86;:::i;:::-;16272:73;16340:3;16329:9;16325:19;16316:6;16272:73;:::i;:::-;16355;16423:3;16412:9;16408:19;16399:6;16355:73;:::i;:::-;16438;16506:3;16495:9;16491:19;16482:6;16438:73;:::i;:::-;15301:1217;;;;;;;;;;;;:::o;16524:143::-;16581:5;16612:6;16606:13;16597:22;;16628:33;16655:5;16628:33;:::i;:::-;16524:143;;;;:::o;16673:351::-;16743:6;16792:2;16780:9;16771:7;16767:23;16763:32;16760:119;;;16798:79;;:::i;:::-;16760:119;16918:1;16943:64;16999:7;16990:6;16979:9;16975:22;16943:64;:::i;:::-;16933:74;;16889:128;16673:351;;;;:::o;17030:442::-;17179:4;17217:2;17206:9;17202:18;17194:26;;17230:71;17298:1;17287:9;17283:17;17274:6;17230:71;:::i;:::-;17311:72;17379:2;17368:9;17364:18;17355:6;17311:72;:::i;:::-;17393;17461:2;17450:9;17446:18;17437:6;17393:72;:::i;:::-;17030:442;;;;;;:::o;17478:332::-;17599:4;17637:2;17626:9;17622:18;17614:26;;17650:71;17718:1;17707:9;17703:17;17694:6;17650:71;:::i;:::-;17731:72;17799:2;17788:9;17784:18;17775:6;17731:72;:::i;:::-;17478:332;;;;;:::o;17816:169::-;17900:11;17934:6;17929:3;17922:19;17974:4;17969:3;17965:14;17950:29;;17816:169;;;;:::o;17991:241::-;18131:34;18127:1;18119:6;18115:14;18108:58;18200:24;18195:2;18187:6;18183:15;18176:49;17991:241;:::o;18238:366::-;18380:3;18401:67;18465:2;18460:3;18401:67;:::i;:::-;18394:74;;18477:93;18566:3;18477:93;:::i;:::-;18595:2;18590:3;18586:12;18579:19;;18238:366;;;:::o;18610:419::-;18776:4;18814:2;18803:9;18799:18;18791:26;;18863:9;18857:4;18853:20;18849:1;18838:9;18834:17;18827:47;18891:131;19017:4;18891:131;:::i;:::-;18883:139;;18610:419;;;:::o;19035:332::-;19156:4;19194:2;19183:9;19179:18;19171:26;;19207:71;19275:1;19264:9;19260:17;19251:6;19207:71;:::i;:::-;19288:72;19356:2;19345:9;19341:18;19332:6;19288:72;:::i;:::-;19035:332;;;;;:::o;19373:79::-;19412:7;19441:5;19430:16;;19373:79;;;:::o;19458:157::-;19563:45;19583:24;19601:5;19583:24;:::i;:::-;19563:45;:::i;:::-;19558:3;19551:58;19458:157;;:::o;19621:397::-;19761:3;19776:75;19847:3;19838:6;19776:75;:::i;:::-;19876:2;19871:3;19867:12;19860:19;;19889:75;19960:3;19951:6;19889:75;:::i;:::-;19989:2;19984:3;19980:12;19973:19;;20009:3;20002:10;;19621:397;;;;;:::o;20024:149::-;20060:7;20100:66;20093:5;20089:78;20078:89;;20024:149;;;:::o;20179:78::-;20217:7;20246:5;20235:16;;20179:78;;;:::o;20263:153::-;20366:43;20385:23;20402:5;20385:23;:::i;:::-;20366:43;:::i;:::-;20361:3;20354:56;20263:153;;:::o;20422:392::-;20560:3;20575:75;20646:3;20637:6;20575:75;:::i;:::-;20675:2;20670:3;20666:12;20659:19;;20688:73;20757:3;20748:6;20688:73;:::i;:::-;20786:1;20781:3;20777:11;20770:18;;20805:3;20798:10;;20422:392;;;;;:::o;20820:180::-;20868:77;20865:1;20858:88;20965:4;20962:1;20955:15;20989:4;20986:1;20979:15;21006:233;21045:3;21068:24;21086:5;21068:24;:::i;:::-;21059:33;;21114:66;21107:5;21104:77;21101:103;;21184:18;;:::i;:::-;21101:103;21231:1;21224:5;21220:13;21213:20;;21006:233;;;:::o;21245:180::-;21293:77;21290:1;21283:88;21390:4;21387:1;21380:15;21414:4;21411:1;21404:15;21431:185;21471:1;21488:20;21506:1;21488:20;:::i;:::-;21483:25;;21522:20;21540:1;21522:20;:::i;:::-;21517:25;;21561:1;21551:35;;21566:18;;:::i;:::-;21551:35;21608:1;21605;21601:9;21596:14;;21431:185;;;;:::o;21622:180::-;21670:77;21667:1;21660:88;21767:4;21764:1;21757:15;21791:4;21788:1;21781:15;21808:194;21848:4;21868:20;21886:1;21868:20;:::i;:::-;21863:25;;21902:20;21920:1;21902:20;:::i;:::-;21897:25;;21946:1;21943;21939:9;21931:17;;21970:1;21964:4;21961:11;21958:37;;;21975:18;;:::i;:::-;21958:37;21808:194;;;;:::o;22008:348::-;22048:7;22071:20;22089:1;22071:20;:::i;:::-;22066:25;;22105:20;22123:1;22105:20;:::i;:::-;22100:25;;22293:1;22225:66;22221:74;22218:1;22215:81;22210:1;22203:9;22196:17;22192:105;22189:131;;;22300:18;;:::i;:::-;22189:131;22348:1;22345;22341:9;22330:20;;22008:348;;;;:::o;22362:86::-;22397:7;22437:4;22430:5;22426:16;22415:27;;22362:86;;;:::o;22454:188::-;22492:3;22511:18;22527:1;22511:18;:::i;:::-;22506:23;;22543:18;22559:1;22543:18;:::i;:::-;22538:23;;22584:1;22581;22577:9;22570:16;;22607:4;22602:3;22599:13;22596:39;;;22615:18;;:::i;:::-;22596:39;22454:188;;;;:::o;22648:180::-;22696:77;22693:1;22686:88;22793:4;22790:1;22783:15;22817:4;22814:1;22807:15;22834:137;22888:5;22919:6;22913:13;22904:22;;22935:30;22959:5;22935:30;:::i;:::-;22834:137;;;;:::o;22977:345::-;23044:6;23093:2;23081:9;23072:7;23068:23;23064:32;23061:119;;;23099:79;;:::i;:::-;23061:119;23219:1;23244:61;23297:7;23288:6;23277:9;23273:22;23244:61;:::i;:::-;23234:71;;23190:125;22977:345;;;;:::o;23328:229::-;23468:34;23464:1;23456:6;23452:14;23445:58;23537:12;23532:2;23524:6;23520:15;23513:37;23328:229;:::o;23563:366::-;23705:3;23726:67;23790:2;23785:3;23726:67;:::i;:::-;23719:74;;23802:93;23891:3;23802:93;:::i;:::-;23920:2;23915:3;23911:12;23904:19;;23563:366;;;:::o;23935:419::-;24101:4;24139:2;24128:9;24124:18;24116:26;;24188:9;24182:4;24178:20;24174:1;24163:9;24159:17;24152:47;24216:131;24342:4;24216:131;:::i;:::-;24208:139;;23935:419;;;:::o;24360:225::-;24500:34;24496:1;24488:6;24484:14;24477:58;24569:8;24564:2;24556:6;24552:15;24545:33;24360:225;:::o;24591:366::-;24733:3;24754:67;24818:2;24813:3;24754:67;:::i;:::-;24747:74;;24830:93;24919:3;24830:93;:::i;:::-;24948:2;24943:3;24939:12;24932:19;;24591:366;;;:::o;24963:419::-;25129:4;25167:2;25156:9;25152:18;25144:26;;25216:9;25210:4;25206:20;25202:1;25191:9;25187:17;25180:47;25244:131;25370:4;25244:131;:::i;:::-;25236:139;;24963:419;;;:::o;25388:271::-;25518:3;25540:93;25629:3;25620:6;25540:93;:::i;:::-;25533:100;;25650:3;25643:10;;25388:271;;;;:::o;25665:179::-;25805:31;25801:1;25793:6;25789:14;25782:55;25665:179;:::o;25850:366::-;25992:3;26013:67;26077:2;26072:3;26013:67;:::i;:::-;26006:74;;26089:93;26178:3;26089:93;:::i;:::-;26207:2;26202:3;26198:12;26191:19;;25850:366;;;:::o;26222:419::-;26388:4;26426:2;26415:9;26411:18;26403:26;;26475:9;26469:4;26465:20;26461:1;26450:9;26446:17;26439:47;26503:131;26629:4;26503:131;:::i;:::-;26495:139;;26222:419;;;:::o;26647:99::-;26699:6;26733:5;26727:12;26717:22;;26647:99;;;:::o;26752:377::-;26840:3;26868:39;26901:5;26868:39;:::i;:::-;26923:71;26987:6;26982:3;26923:71;:::i;:::-;26916:78;;27003:65;27061:6;27056:3;27049:4;27042:5;27038:16;27003:65;:::i;:::-;27093:29;27115:6;27093:29;:::i;:::-;27088:3;27084:39;27077:46;;26844:285;26752:377;;;;:::o;27135:313::-;27248:4;27286:2;27275:9;27271:18;27263:26;;27335:9;27329:4;27325:20;27321:1;27310:9;27306:17;27299:47;27363:78;27436:4;27427:6;27363:78;:::i;:::-;27355:86;;27135:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1636600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"assertDataFor(bytes32,bytes32,address)": "infinite",
								"assertionDisputedCallback(bytes32)": "450",
								"assertionLiveness()": "357",
								"assertionResolvedCallback(bytes32,bool)": "infinite",
								"assertionsData(bytes32)": "infinite",
								"defaultCurrency()": "infinite",
								"defaultIdentifier()": "infinite",
								"getData(bytes32)": "infinite",
								"oo()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "E0"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "CODESIZE",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 1680,
									"end": 1925,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "tag",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1783,
									"end": 1799,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1758,
									"end": 1800,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1844,
									"end": 1863,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "PUSH",
									"source": 7,
									"value": "A0"
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1811,
									"end": 1864,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1897,
									"name": "PUSH",
									"source": 7,
									"value": "A0"
								},
								{
									"begin": 1895,
									"end": 1897,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1915,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1895,
									"end": 1915,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1915,
									"name": "PUSH",
									"source": 7,
									"value": "D509B017"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFF"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "E0"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "SHL",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP7",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "GAS",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "STATICCALL",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "7"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "RETURNDATASIZE",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "RETURNDATACOPY",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "RETURNDATASIZE",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "tag",
									"source": 7,
									"value": "7"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "RETURNDATASIZE",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "1F"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "NOT",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "1F"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "9"
								},
								{
									"begin": 1895,
									"end": 1917,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "tag",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 1895,
									"end": 1917,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1875,
									"end": 1917,
									"name": "PUSH",
									"source": 7,
									"value": "C0"
								},
								{
									"begin": 1875,
									"end": 1917,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1875,
									"end": 1917,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1875,
									"end": 1917,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1875,
									"end": 1917,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1875,
									"end": 1917,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1680,
									"end": 1925,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "27"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 8,
									"value": "27"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "32"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 8,
									"value": "32"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 924,
									"end": 930,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 932,
									"end": 938,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 981,
									"end": 983,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 969,
									"end": 978,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 960,
									"end": 967,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 956,
									"end": 979,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 952,
									"end": 984,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "35"
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 987,
									"end": 1066,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "tag",
									"source": 8,
									"value": "35"
								},
								{
									"begin": 987,
									"end": 1066,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "tag",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 949,
									"end": 1068,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1107,
									"end": 1108,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "36"
								},
								{
									"begin": 1188,
									"end": 1195,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1179,
									"end": 1185,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1168,
									"end": 1177,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 1164,
									"end": 1186,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 1132,
									"end": 1196,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "tag",
									"source": 8,
									"value": "36"
								},
								{
									"begin": 1132,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1122,
									"end": 1196,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1122,
									"end": 1196,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1078,
									"end": 1206,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1245,
									"end": 1247,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1327,
									"end": 1334,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1318,
									"end": 1324,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1307,
									"end": 1316,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 1303,
									"end": 1325,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "17"
								},
								{
									"begin": 1271,
									"end": 1335,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "tag",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1271,
									"end": 1335,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1261,
									"end": 1335,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1261,
									"end": 1335,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1216,
									"end": 1345,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 845,
									"end": 1352,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 845,
									"end": 1352,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1358,
									"end": 1435,
									"name": "tag",
									"source": 8,
									"value": "18"
								},
								{
									"begin": 1358,
									"end": 1435,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1395,
									"end": 1402,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1424,
									"end": 1429,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1413,
									"end": 1429,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1413,
									"end": 1429,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1358,
									"end": 1435,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1358,
									"end": 1435,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1358,
									"end": 1435,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1358,
									"end": 1435,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1441,
									"end": 1563,
									"name": "tag",
									"source": 8,
									"value": "19"
								},
								{
									"begin": 1441,
									"end": 1563,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1514,
									"end": 1538,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1532,
									"end": 1537,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1514,
									"end": 1538,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "18"
								},
								{
									"begin": 1514,
									"end": 1538,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1514,
									"end": 1538,
									"name": "tag",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1514,
									"end": 1538,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1507,
									"end": 1512,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1504,
									"end": 1539,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 1494,
									"end": 1557,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 1494,
									"end": 1557,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1553,
									"end": 1554,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1550,
									"end": 1551,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1543,
									"end": 1555,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1494,
									"end": 1557,
									"name": "tag",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 1494,
									"end": 1557,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1441,
									"end": 1563,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1441,
									"end": 1563,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1569,
									"end": 1712,
									"name": "tag",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1569,
									"end": 1712,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1626,
									"end": 1631,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1657,
									"end": 1663,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1651,
									"end": 1664,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1642,
									"end": 1664,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1642,
									"end": 1664,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1673,
									"end": 1706,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1700,
									"end": 1705,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1673,
									"end": 1706,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "19"
								},
								{
									"begin": 1673,
									"end": 1706,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1673,
									"end": 1706,
									"name": "tag",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1673,
									"end": 1706,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1569,
									"end": 1712,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1569,
									"end": 1712,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1569,
									"end": 1712,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1569,
									"end": 1712,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1569,
									"end": 1712,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1718,
									"end": 2069,
									"name": "tag",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 1718,
									"end": 2069,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1788,
									"end": 1794,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1837,
									"end": 1839,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1825,
									"end": 1834,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1816,
									"end": 1823,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 1812,
									"end": 1835,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1808,
									"end": 1840,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 1805,
									"end": 1924,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1805,
									"end": 1924,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "45"
								},
								{
									"begin": 1805,
									"end": 1924,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1843,
									"end": 1922,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "46"
								},
								{
									"begin": 1843,
									"end": 1922,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 1843,
									"end": 1922,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1843,
									"end": 1922,
									"name": "tag",
									"source": 8,
									"value": "46"
								},
								{
									"begin": 1843,
									"end": 1922,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1805,
									"end": 1924,
									"name": "tag",
									"source": 8,
									"value": "45"
								},
								{
									"begin": 1805,
									"end": 1924,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1963,
									"end": 1964,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1988,
									"end": 2052,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "47"
								},
								{
									"begin": 2044,
									"end": 2051,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 2035,
									"end": 2041,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2024,
									"end": 2033,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 2020,
									"end": 2042,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1988,
									"end": 2052,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1988,
									"end": 2052,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1988,
									"end": 2052,
									"name": "tag",
									"source": 8,
									"value": "47"
								},
								{
									"begin": 1988,
									"end": 2052,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1978,
									"end": 2052,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1978,
									"end": 2052,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1934,
									"end": 2062,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1718,
									"end": 2069,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1718,
									"end": 2069,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1718,
									"end": 2069,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1718,
									"end": 2069,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1718,
									"end": 2069,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "tag",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "A0"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "C0"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "1441"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "1436"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "1433"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 720,
									"end": 5876,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e7d839fb68cfae3d86b3534a6a9fb5b0bbb84b76071af0694142078f1ed1b4e064736f6c63430008100033",
									".code": [
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "B33893DA"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "B33893DA"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "B75D4E24"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "D448A4EC"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "D509B017"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "F1B156B2"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "20402E1D"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "54F6127F"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "8921A614"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "93EE663B"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 720,
											"end": 5876,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 782,
											"end": 821,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 782,
											"end": 821,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 2047,
											"end": 2258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2047,
											"end": 2258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 2047,
											"end": 2258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 828,
											"end": 875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 828,
											"end": 875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 2651,
											"end": 4809,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "tag",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 2651,
											"end": 4809,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 2651,
											"end": 4809,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 1281,
											"end": 1336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "tag",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 1281,
											"end": 1336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "tag",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 1281,
											"end": 1336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 882,
											"end": 929,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "tag",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 882,
											"end": 929,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 5808,
											"end": 5873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "tag",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5808,
											"end": 5873,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "tag",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 936,
											"end": 978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 936,
											"end": 978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 4862,
											"end": 5607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "tag",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 4862,
											"end": 5607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 782,
											"end": 821,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 782,
											"end": 821,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2106,
											"end": 2110,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2112,
											"end": 2119,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2151,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2163,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2137,
											"end": 2164,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "PUSH",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 2137,
											"end": 2173,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2132,
											"end": 2192,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2132,
											"end": 2192,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2183,
											"end": 2188,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2190,
											"end": 2191,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2175,
											"end": 2192,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2132,
											"end": 2192,
											"name": "tag",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2132,
											"end": 2192,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2211,
											"end": 2215,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2217,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2232,
											"end": 2243,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2217,
											"end": 2244,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2249,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2217,
											"end": 2249,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2217,
											"end": 2249,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2203,
											"end": 2250,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2203,
											"end": 2250,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2203,
											"end": 2250,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2203,
											"end": 2250,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2047,
											"end": 2258,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 828,
											"end": 875,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 828,
											"end": 875,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2772,
											"end": 2791,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2835,
											"end": 2836,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2837,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2815,
											"end": 2837,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2823,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2837,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2815,
											"end": 2837,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2837,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2861,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 2815,
											"end": 2861,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2853,
											"end": 2861,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2861,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 2815,
											"end": 2861,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2861,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 2815,
											"end": 2861,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2840,
											"end": 2850,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2861,
											"name": "tag",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 2815,
											"end": 2861,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2804,
											"end": 2861,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2804,
											"end": 2861,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2872,
											"end": 2884,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2889,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 2887,
											"end": 2904,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2887,
											"end": 2904,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2904,
											"name": "PUSH",
											"source": 7,
											"value": "4360AF3D"
										},
										{
											"begin": 2913,
											"end": 2928,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 2887,
											"end": 2930,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "tag",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "STATICCALL",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "tag",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 2887,
											"end": 2930,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "tag",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 2887,
											"end": 2930,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2872,
											"end": 2930,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2872,
											"end": 2930,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2974,
											"end": 2984,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 2994,
											"end": 2998,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 3001,
											"end": 3005,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 2956,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 2941,
											"end": 2973,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2941,
											"end": 2973,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 2973,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2941,
											"end": 2973,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 3006,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2941,
											"end": 3006,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3063,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 3053,
											"end": 3055,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 3058,
											"end": 3062,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3032,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 3017,
											"end": 3044,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3017,
											"end": 3044,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 3017,
											"end": 3044,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3063,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3063,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3063,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3063,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3017,
											"end": 3063,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3063,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3063,
											"name": "tag",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 3017,
											"end": 3063,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3688,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 3686,
											"end": 3700,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3686,
											"end": 3700,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 3700,
											"name": "PUSH",
											"source": 7,
											"value": "6457C979"
										},
										{
											"begin": 3856,
											"end": 3883,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 3878,
											"end": 3882,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3856,
											"end": 3877,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 3856,
											"end": 3883,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3856,
											"end": 3883,
											"name": "tag",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 3856,
											"end": 3883,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3938,
											"end": 3967,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 3960,
											"end": 3966,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 3938,
											"end": 3959,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 3938,
											"end": 3967,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3938,
											"end": 3967,
											"name": "tag",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 3938,
											"end": 3967,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4024,
											"end": 4062,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 4053,
											"end": 4061,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4024,
											"end": 4052,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 4024,
											"end": 4062,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4024,
											"end": 4062,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 4024,
											"end": 4062,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4117,
											"end": 4159,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 4143,
											"end": 4158,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 4117,
											"end": 4142,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 4117,
											"end": 4159,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4117,
											"end": 4159,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 4117,
											"end": 4159,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4234,
											"end": 4277,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 4271,
											"end": 4275,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 4234,
											"end": 4262,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 4234,
											"end": 4277,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4234,
											"end": 4277,
											"name": "tag",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 4234,
											"end": 4277,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 3715,
											"end": 4323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "tag",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3715,
											"end": 4323,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4338,
											"end": 4346,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4369,
											"end": 4373,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 4397,
											"end": 4398,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 925,
											"end": 929,
											"name": "PUSH",
											"source": 7,
											"value": "1C20"
										},
										{
											"begin": 4472,
											"end": 4487,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 4502,
											"end": 4506,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 4521,
											"end": 4538,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1441"
										},
										{
											"begin": 4561,
											"end": 4562,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4553,
											"end": 4563,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4553,
											"end": 4563,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP10",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP9",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP8",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 3686,
											"end": 4588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "tag",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "tag",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 3686,
											"end": 4588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 3686,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3672,
											"end": 4588,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3672,
											"end": 4588,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4657,
											"end": 4663,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4678,
											"end": 4682,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4697,
											"end": 4705,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4720,
											"end": 4725,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4736,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4613,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4614,
											"end": 4625,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4599,
											"end": 4626,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4599,
											"end": 4736,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4789,
											"end": 4800,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4779,
											"end": 4787,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4765,
											"end": 4771,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "PUSH",
											"source": 7,
											"value": "29AE27364ABD65B112AD0AC18E7E4F97360C20AFA9636864DC91195D4D9204EC"
										},
										{
											"begin": 4773,
											"end": 4777,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 4752,
											"end": 4801,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "tag",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4801,
											"name": "LOG4",
											"source": 7
										},
										{
											"begin": 2793,
											"end": 4809,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 4809,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1281,
											"end": 1336,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 925,
											"end": 929,
											"name": "PUSH",
											"source": 7,
											"value": "1C20"
										},
										{
											"begin": 882,
											"end": 929,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 882,
											"end": 929,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5808,
											"end": 5873,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1441"
										},
										{
											"begin": 936,
											"end": 978,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 936,
											"end": 978,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "tag",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5016,
											"end": 5018,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 4994,
											"end": 5019,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4994,
											"end": 5019,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4994,
											"end": 5004,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4994,
											"end": 5019,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4994,
											"end": 5019,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4994,
											"end": 5019,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5020,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 4986,
											"end": 5020,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5020,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4986,
											"end": 5020,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5020,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4986,
											"end": 5020,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 4986,
											"end": 5020,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5111,
											"end": 5129,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5185,
											"end": 5189,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5146,
											"end": 5160,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5146,
											"end": 5173,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5182,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5146,
											"end": 5182,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5182,
											"name": "PUSH",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5189,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5238,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5241,
											"end": 5255,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5256,
											"end": 5267,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5241,
											"end": 5268,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5204,
											"end": 5268,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5445,
											"end": 5456,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5404,
											"end": 5417,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5404,
											"end": 5426,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5404,
											"end": 5426,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5404,
											"end": 5426,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5328,
											"end": 5341,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5328,
											"end": 5348,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5328,
											"end": 5348,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5328,
											"end": 5348,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "PUSH",
											"source": 7,
											"value": "E49AB75DD8AD20084C43AACC9218434D61AF074F44263F887212C41AD2D41C9D"
										},
										{
											"begin": 5367,
											"end": 5380,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5367,
											"end": 5385,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5367,
											"end": 5385,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5367,
											"end": 5385,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 5288,
											"end": 5471,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "tag",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5288,
											"end": 5471,
											"name": "LOG4",
											"source": 7
										},
										{
											"begin": 5131,
											"end": 5559,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "tag",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5586,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5587,
											"end": 5598,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 5572,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5599,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "tag",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 5107,
											"end": 5599,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4862,
											"end": 5607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1551,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 1475,
											"end": 1480,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1505,
											"end": 1532,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1505,
											"end": 1532,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1505,
											"end": 1532,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1534,
											"end": 1538,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1540,
											"end": 1542,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1544,
											"end": 1549,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 1482,
											"end": 1550,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1474,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 1455,
											"end": 1551,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1551,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 1455,
											"end": 1551,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2152,
											"end": 2153,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2143,
											"end": 2148,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2143,
											"end": 2153,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2202,
											"end": 2203,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2159,
											"end": 2164,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2174,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2159,
											"end": 2174,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2174,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 2183,
											"end": 2187,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 2190,
											"end": 2197,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 2159,
											"end": 2198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 2159,
											"end": 2198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2203,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "tag",
											"source": 2,
											"value": "96"
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 2121,
											"end": 2284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "tag",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2294,
											"end": 2384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 2314,
											"end": 2319,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2368,
											"end": 2375,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2377,
											"end": 2382,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2321,
											"end": 2383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2294,
											"end": 2313,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 2294,
											"end": 2384,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2294,
											"end": 2384,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 2294,
											"end": 2384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "tag",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2647,
											"end": 2659,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2695,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 2726,
											"end": 2729,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 2715,
											"end": 2722,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2715,
											"end": 2729,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2715,
											"end": 2729,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 2695,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 2695,
											"end": 2730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2695,
											"end": 2730,
											"name": "tag",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 2695,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2732,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 2752,
											"end": 2759,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2732,
											"end": 2751,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 2732,
											"end": 2760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2732,
											"end": 2760,
											"name": "tag",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 2732,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 2678,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2671,
											"end": 2761,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2671,
											"end": 2761,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2586,
											"end": 2768,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3145,
											"end": 3363,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 3145,
											"end": 3363,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3207,
											"end": 3219,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3267,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "115"
										},
										{
											"begin": 3310,
											"end": 3313,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 3303,
											"end": 3304,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3295,
											"end": 3305,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3295,
											"end": 3305,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3287,
											"end": 3313,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3287,
											"end": 3313,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 3267,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 3267,
											"end": 3314,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3267,
											"end": 3314,
											"name": "tag",
											"source": 4,
											"value": "115"
										},
										{
											"begin": 3267,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 3351,
											"end": 3352,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3343,
											"end": 3353,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3343,
											"end": 3353,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3342,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 3323,
											"end": 3354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "tag",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 3250,
											"end": 3356,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "tag",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3231,
											"end": 3356,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3231,
											"end": 3356,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3145,
											"end": 3363,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3145,
											"end": 3363,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3145,
											"end": 3363,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3145,
											"end": 3363,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3628,
											"end": 3640,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3661,
											"end": 3662,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3656,
											"end": 3657,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3656,
											"end": 3662,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3652,
											"end": 3699,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 3652,
											"end": 3699,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3652,
											"end": 3699,
											"name": "tag",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 3652,
											"end": 3699,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3708,
											"end": 3717,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3720,
											"end": 3721,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3708,
											"end": 3721,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3708,
											"end": 3721,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3731,
											"end": 3742,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "tag",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3764,
											"end": 3765,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3759,
											"end": 3760,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3759,
											"end": 3765,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 3781,
											"end": 3786,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "tag",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3805,
											"end": 3807,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 3800,
											"end": 3807,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "tag",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "tag",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3827,
											"end": 3844,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3857,
											"end": 3860,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 3847,
											"end": 3861,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "tag",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "tag",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "CALLDATACOPY",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "tag",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3827,
											"end": 3861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3827,
											"end": 3861,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3880,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3883,
											"end": 3886,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3886,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3886,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3908,
											"end": 3909,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3903,
											"end": 3904,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 3903,
											"end": 3909,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3933,
											"end": 3934,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3929,
											"end": 3930,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 3929,
											"end": 3934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "tag",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3925,
											"end": 3934,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3925,
											"end": 3934,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3948,
											"end": 3958,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3988,
											"end": 3990,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 3982,
											"end": 3984,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3978,
											"end": 3979,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 3978,
											"end": 3984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "tag",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 3977,
											"end": 3990,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3974,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 3973,
											"end": 3990,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "tag",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3962,
											"end": 3964,
											"name": "PUSH",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 3962,
											"end": 3991,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "tag",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3948,
											"end": 3992,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3948,
											"end": 3992,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4006,
											"end": 4015,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4025,
											"end": 4029,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4030,
											"name": "PUSH",
											"source": 4,
											"value": "F8"
										},
										{
											"begin": 4018,
											"end": 4030,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 4006,
											"end": 4030,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4006,
											"end": 4030,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4054,
											"end": 4056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4048,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4049,
											"end": 4050,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 4044,
											"end": 4051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "tag",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "tag",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "BYTE",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "MSTORE8",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4075,
											"end": 4077,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 4070,
											"end": 4077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "tag",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "SWAP8",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3911,
											"end": 4088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3911,
											"end": 4088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4104,
											"end": 4108,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4097,
											"end": 4108,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 4097,
											"end": 4108,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4097,
											"end": 4108,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4097,
											"end": 4108,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4097,
											"end": 4108,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4097,
											"end": 4108,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "tag",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3569,
											"end": 4115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5173,
											"end": 5815,
											"name": "tag",
											"source": 2,
											"value": "94"
										},
										{
											"begin": 5173,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5592,
											"end": 5615,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 5646,
											"end": 5650,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5626,
											"end": 5631,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5645,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5618,
											"end": 5645,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5645,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 5618,
											"end": 5645,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5592,
											"end": 5687,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5592,
											"end": 5687,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5726,
											"end": 5727,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5705,
											"end": 5715,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5722,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5727,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5742,
											"end": 5752,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 5731,
											"end": 5761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "153"
										},
										{
											"begin": 5697,
											"end": 5808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5243,
											"end": 5815,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5173,
											"end": 5815,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5173,
											"end": 5815,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5173,
											"end": 5815,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 897,
											"end": 2203,
											"name": "tag",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 897,
											"end": 2203,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 965,
											"end": 972,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1008,
											"end": 1017,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1020,
											"end": 1036,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1020,
											"end": 1036,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 1008,
											"end": 1036,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1008,
											"end": 1036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1092,
											"end": 1158,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1088,
											"end": 1089,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1088,
											"end": 1158,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1084,
											"end": 1158,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1084,
											"end": 1158,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1196,
											"end": 1262,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1186,
											"end": 1191,
											"name": "PUSH",
											"source": 4,
											"value": "10000000000000000"
										},
										{
											"begin": 1182,
											"end": 1183,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1182,
											"end": 1191,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1177,
											"end": 1178,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1177,
											"end": 1192,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1176,
											"end": 1262,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1172,
											"end": 1262,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1172,
											"end": 1262,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1300,
											"end": 1366,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF"
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH",
											"source": 4,
											"value": "100000000"
										},
										{
											"begin": 1286,
											"end": 1287,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1286,
											"end": 1295,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1281,
											"end": 1282,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1281,
											"end": 1296,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1280,
											"end": 1366,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1276,
											"end": 1366,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1276,
											"end": 1366,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1404,
											"end": 1470,
											"name": "PUSH",
											"source": 4,
											"value": "FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF"
										},
										{
											"begin": 1394,
											"end": 1399,
											"name": "PUSH",
											"source": 4,
											"value": "10000"
										},
										{
											"begin": 1390,
											"end": 1391,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1390,
											"end": 1399,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1385,
											"end": 1386,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1385,
											"end": 1400,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1384,
											"end": 1470,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1380,
											"end": 1470,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1380,
											"end": 1470,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1573,
											"name": "PUSH",
											"source": 4,
											"value": "FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF"
										},
										{
											"begin": 1498,
											"end": 1502,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1494,
											"end": 1495,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1494,
											"end": 1502,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1489,
											"end": 1490,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1489,
											"end": 1503,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1488,
											"end": 1573,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1484,
											"end": 1573,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1484,
											"end": 1573,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1610,
											"end": 1676,
											"name": "PUSH",
											"source": 4,
											"value": "F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F"
										},
										{
											"begin": 1601,
											"end": 1605,
											"name": "PUSH",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 1597,
											"end": 1598,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1597,
											"end": 1605,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1592,
											"end": 1593,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1592,
											"end": 1606,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1591,
											"end": 1676,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1587,
											"end": 1676,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1587,
											"end": 1676,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1717,
											"end": 1726,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1804,
											"end": 1805,
											"name": "PUSH",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1734,
											"end": 1800,
											"name": "PUSH",
											"source": 4,
											"value": "808080808080808080808080808080808080808080808080808080808080808"
										},
										{
											"begin": 1730,
											"end": 1731,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1730,
											"end": 1800,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 1729,
											"end": 1805,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "tag",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "tag",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1717,
											"end": 1805,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1717,
											"end": 1805,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1819,
											"end": 1828,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1906,
											"end": 1907,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1836,
											"end": 1902,
											"name": "PUSH",
											"source": 4,
											"value": "404040404040404040404040404040404040404040404040404040404040404"
										},
										{
											"begin": 1832,
											"end": 1833,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1832,
											"end": 1902,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "158"
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "159"
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 1831,
											"end": 1907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "tag",
											"source": 4,
											"value": "159"
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "tag",
											"source": 4,
											"value": "158"
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1819,
											"end": 1907,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1819,
											"end": 1907,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1921,
											"end": 1930,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2008,
											"end": 2009,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1938,
											"end": 2004,
											"name": "PUSH",
											"source": 4,
											"value": "202020202020202020202020202020202020202020202020202020202020202"
										},
										{
											"begin": 1934,
											"end": 1935,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1934,
											"end": 2004,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "160"
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "161"
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 1933,
											"end": 2009,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "tag",
											"source": 4,
											"value": "161"
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "tag",
											"source": 4,
											"value": "160"
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1921,
											"end": 2009,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1921,
											"end": 2009,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2054,
											"end": 2120,
											"name": "PUSH",
											"source": 4,
											"value": "3030303030303030303030303030303030303030303030303030303030303030"
										},
										{
											"begin": 2047,
											"end": 2051,
											"name": "PUSH",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 2041,
											"end": 2042,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2037,
											"end": 2038,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2037,
											"end": 2042,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 2032,
											"end": 2033,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2032,
											"end": 2043,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2031,
											"end": 2051,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 2027,
											"end": 2028,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2027,
											"end": 2051,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2027,
											"end": 2120,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2023,
											"end": 2120,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 2023,
											"end": 2120,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2184,
											"end": 2185,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2176,
											"end": 2186,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2176,
											"end": 2186,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 2169,
											"end": 2186,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 2169,
											"end": 2186,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2169,
											"end": 2186,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2169,
											"end": 2186,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2169,
											"end": 2186,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2169,
											"end": 2186,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 897,
											"end": 2203,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 897,
											"end": 2203,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 897,
											"end": 2203,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 897,
											"end": 2203,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "tag",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4241,
											"end": 4253,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 4272,
											"end": 4324,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 4294,
											"end": 4300,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4302,
											"end": 4306,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4308,
											"end": 4309,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4311,
											"end": 4323,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4272,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 4272,
											"end": 4324,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4272,
											"end": 4324,
											"name": "tag",
											"source": 3,
											"value": "163"
										},
										{
											"begin": 4272,
											"end": 4324,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4265,
											"end": 4324,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4265,
											"end": 4324,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4108,
											"end": 4331,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "tag",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5330,
											"end": 5342,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5387,
											"end": 5392,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5362,
											"end": 5383,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 5362,
											"end": 5392,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 5362,
											"end": 5392,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 5354,
											"end": 5435,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "tag",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "tag",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5446,
											"end": 5458,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5460,
											"end": 5483,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5493,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5498,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5487,
											"end": 5498,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5506,
											"end": 5511,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5513,
											"end": 5517,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 5487,
											"end": 5518,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "tag",
											"source": 3,
											"value": "169"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "3F"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "tag",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "tag",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5445,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5445,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5445,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5445,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5562,
											"end": 5568,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5577,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5579,
											"end": 5589,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5591,
											"end": 5603,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5535,
											"end": 5561,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 5535,
											"end": 5604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "tag",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5528,
											"end": 5604,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5528,
											"end": 5604,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5528,
											"end": 5604,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5528,
											"end": 5604,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "tag",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7851,
											"end": 7863,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 7879,
											"end": 7886,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7927,
											"end": 7928,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7906,
											"end": 7916,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7906,
											"end": 7923,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7906,
											"end": 7928,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8121,
											"end": 8139,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "179"
										},
										{
											"begin": 8132,
											"end": 8138,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 8121,
											"end": 8131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 8121,
											"end": 8139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8121,
											"end": 8139,
											"name": "tag",
											"source": 3,
											"value": "179"
										},
										{
											"begin": 8121,
											"end": 8139,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 8113,
											"end": 8173,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "tag",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "tag",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "tag",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8208,
											"end": 8218,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "tag",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8249,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 8257,
											"end": 8267,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8269,
											"end": 8281,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8249,
											"end": 8256,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "186"
										},
										{
											"begin": 8249,
											"end": 8282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8249,
											"end": 8282,
											"name": "tag",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 8249,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "tag",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1412,
											"end": 1732,
											"name": "tag",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 1412,
											"end": 1732,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1472,
											"end": 1476,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1724,
											"end": 1725,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1702,
											"end": 1709,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 1702,
											"end": 1725,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1695,
											"end": 1725,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1695,
											"end": 1725,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1412,
											"end": 1732,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1412,
											"end": 1732,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1412,
											"end": 1732,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1412,
											"end": 1732,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8821,
											"end": 9361,
											"name": "tag",
											"source": 3,
											"value": "186"
										},
										{
											"begin": 8821,
											"end": 9361,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9000,
											"end": 9001,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8980,
											"end": 8990,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8980,
											"end": 8997,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8980,
											"end": 9001,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "189"
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9208,
											"end": 9218,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9202,
											"end": 9219,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9264,
											"end": 9279,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9251,
											"end": 9261,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9247,
											"end": 9249,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9243,
											"end": 9262,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9236,
											"end": 9280,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "tag",
											"source": 3,
											"value": "189"
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9331,
											"end": 9343,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 9324,
											"end": 9344,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "tag",
											"source": 3,
											"value": "191"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7,
											"end": 133,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 7,
											"end": 133,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 84,
											"end": 126,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 77,
											"end": 82,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 73,
											"end": 127,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 62,
											"end": 127,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 62,
											"end": 127,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7,
											"end": 133,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7,
											"end": 133,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7,
											"end": 133,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7,
											"end": 133,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 139,
											"end": 199,
											"name": "tag",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 139,
											"end": 199,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 167,
											"end": 170,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 188,
											"end": 193,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 181,
											"end": 193,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 181,
											"end": 193,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 139,
											"end": 199,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 139,
											"end": 199,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 139,
											"end": 199,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 139,
											"end": 199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 205,
											"end": 347,
											"name": "tag",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 205,
											"end": 347,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 255,
											"end": 264,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 288,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "266"
										},
										{
											"begin": 306,
											"end": 340,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 315,
											"end": 339,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 333,
											"end": 338,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 315,
											"end": 339,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 315,
											"end": 339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 315,
											"end": 339,
											"name": "tag",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 315,
											"end": 339,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 306,
											"end": 340,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 306,
											"end": 340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 306,
											"end": 340,
											"name": "tag",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 306,
											"end": 340,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 288,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 288,
											"end": 341,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 288,
											"end": 341,
											"name": "tag",
											"source": 8,
											"value": "266"
										},
										{
											"begin": 288,
											"end": 341,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 275,
											"end": 341,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 275,
											"end": 341,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 205,
											"end": 347,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 205,
											"end": 347,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 205,
											"end": 347,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 205,
											"end": 347,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 353,
											"end": 479,
											"name": "tag",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 353,
											"end": 479,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 403,
											"end": 412,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 436,
											"end": 473,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 467,
											"end": 472,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 436,
											"end": 473,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 436,
											"end": 473,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 436,
											"end": 473,
											"name": "tag",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 436,
											"end": 473,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 423,
											"end": 473,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 423,
											"end": 473,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 353,
											"end": 479,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 353,
											"end": 479,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 353,
											"end": 479,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 353,
											"end": 479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 485,
											"end": 624,
											"name": "tag",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 485,
											"end": 624,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 548,
											"end": 557,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 581,
											"end": 618,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 612,
											"end": 617,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 581,
											"end": 618,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 581,
											"end": 618,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 581,
											"end": 618,
											"name": "tag",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 581,
											"end": 618,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 568,
											"end": 618,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 568,
											"end": 618,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 485,
											"end": 624,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 485,
											"end": 624,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 485,
											"end": 624,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 485,
											"end": 624,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 630,
											"end": 787,
											"name": "tag",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 630,
											"end": 787,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 730,
											"end": 780,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 774,
											"end": 779,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 730,
											"end": 780,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 730,
											"end": 780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 730,
											"end": 780,
											"name": "tag",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 730,
											"end": 780,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 725,
											"end": 728,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 718,
											"end": 781,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 630,
											"end": 787,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 630,
											"end": 787,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 630,
											"end": 787,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 793,
											"end": 1041,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 793,
											"end": 1041,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 899,
											"end": 903,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 937,
											"end": 939,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 926,
											"end": 935,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 922,
											"end": 940,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 914,
											"end": 940,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 914,
											"end": 940,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 950,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 1031,
											"end": 1032,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1020,
											"end": 1029,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1016,
											"end": 1033,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1007,
											"end": 1013,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 950,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 950,
											"end": 1034,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 950,
											"end": 1034,
											"name": "tag",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 950,
											"end": 1034,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 793,
											"end": 1041,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 793,
											"end": 1041,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 793,
											"end": 1041,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 793,
											"end": 1041,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 793,
											"end": 1041,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1128,
											"end": 1245,
											"name": "tag",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 1128,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1237,
											"end": 1238,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1234,
											"end": 1235,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1227,
											"end": 1239,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1374,
											"end": 1451,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 1374,
											"end": 1451,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1411,
											"end": 1418,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1440,
											"end": 1445,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1429,
											"end": 1445,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1429,
											"end": 1445,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1374,
											"end": 1451,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1374,
											"end": 1451,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1374,
											"end": 1451,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1374,
											"end": 1451,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1457,
											"end": 1579,
											"name": "tag",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 1457,
											"end": 1579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1530,
											"end": 1554,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 1548,
											"end": 1553,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1530,
											"end": 1554,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 1530,
											"end": 1554,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1530,
											"end": 1554,
											"name": "tag",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 1530,
											"end": 1554,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1523,
											"end": 1528,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1520,
											"end": 1555,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1510,
											"end": 1573,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 1510,
											"end": 1573,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1569,
											"end": 1570,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1566,
											"end": 1567,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1559,
											"end": 1571,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1510,
											"end": 1573,
											"name": "tag",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 1510,
											"end": 1573,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1457,
											"end": 1579,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1457,
											"end": 1579,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1585,
											"end": 1724,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 1585,
											"end": 1724,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1631,
											"end": 1636,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1669,
											"end": 1675,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1656,
											"end": 1676,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1647,
											"end": 1676,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1647,
											"end": 1676,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1685,
											"end": 1718,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 1712,
											"end": 1717,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1685,
											"end": 1718,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 1685,
											"end": 1718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1685,
											"end": 1718,
											"name": "tag",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 1685,
											"end": 1718,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1585,
											"end": 1724,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1585,
											"end": 1724,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1585,
											"end": 1724,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1585,
											"end": 1724,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1585,
											"end": 1724,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 2059,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 1730,
											"end": 2059,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1789,
											"end": 1795,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1838,
											"end": 1840,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1826,
											"end": 1835,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1817,
											"end": 1824,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1813,
											"end": 1836,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1809,
											"end": 1841,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1806,
											"end": 1925,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1806,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 1806,
											"end": 1925,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1844,
											"end": 1923,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "288"
										},
										{
											"begin": 1844,
											"end": 1923,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 1844,
											"end": 1923,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1844,
											"end": 1923,
											"name": "tag",
											"source": 8,
											"value": "288"
										},
										{
											"begin": 1844,
											"end": 1923,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1806,
											"end": 1925,
											"name": "tag",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 1806,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1964,
											"end": 1965,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1989,
											"end": 2042,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 2034,
											"end": 2041,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2025,
											"end": 2031,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2014,
											"end": 2023,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2010,
											"end": 2032,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1989,
											"end": 2042,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 1989,
											"end": 2042,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1989,
											"end": 2042,
											"name": "tag",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 1989,
											"end": 2042,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1979,
											"end": 2042,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1979,
											"end": 2042,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1935,
											"end": 2052,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 2059,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 2059,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 2059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 2059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 2059,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2065,
											"end": 2155,
											"name": "tag",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 2065,
											"end": 2155,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2099,
											"end": 2106,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2142,
											"end": 2147,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2135,
											"end": 2148,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2128,
											"end": 2149,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2117,
											"end": 2149,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2117,
											"end": 2149,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2065,
											"end": 2155,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2065,
											"end": 2155,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2065,
											"end": 2155,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2065,
											"end": 2155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2161,
											"end": 2270,
											"name": "tag",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 2161,
											"end": 2270,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2242,
											"end": 2263,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 2257,
											"end": 2262,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2242,
											"end": 2263,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 2242,
											"end": 2263,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2242,
											"end": 2263,
											"name": "tag",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 2242,
											"end": 2263,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2240,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2230,
											"end": 2264,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2161,
											"end": 2270,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2161,
											"end": 2270,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2161,
											"end": 2270,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2276,
											"end": 2394,
											"name": "tag",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 2276,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2363,
											"end": 2387,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "294"
										},
										{
											"begin": 2381,
											"end": 2386,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2363,
											"end": 2387,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 2363,
											"end": 2387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2363,
											"end": 2387,
											"name": "tag",
											"source": 8,
											"value": "294"
										},
										{
											"begin": 2363,
											"end": 2387,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2358,
											"end": 2361,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2351,
											"end": 2388,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2276,
											"end": 2394,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2276,
											"end": 2394,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2276,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2400,
											"end": 2720,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2400,
											"end": 2720,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2515,
											"end": 2519,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2553,
											"end": 2555,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2542,
											"end": 2551,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2538,
											"end": 2556,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2530,
											"end": 2556,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2530,
											"end": 2556,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2566,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 2628,
											"end": 2629,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2617,
											"end": 2626,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2604,
											"end": 2610,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2566,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 2566,
											"end": 2631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2566,
											"end": 2631,
											"name": "tag",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 2566,
											"end": 2631,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2641,
											"end": 2713,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 2709,
											"end": 2711,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2698,
											"end": 2707,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2694,
											"end": 2712,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2685,
											"end": 2691,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2641,
											"end": 2713,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 2641,
											"end": 2713,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2641,
											"end": 2713,
											"name": "tag",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 2641,
											"end": 2713,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2400,
											"end": 2720,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2400,
											"end": 2720,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2400,
											"end": 2720,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2400,
											"end": 2720,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2400,
											"end": 2720,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2400,
											"end": 2720,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2726,
											"end": 2888,
											"name": "tag",
											"source": 8,
											"value": "208"
										},
										{
											"begin": 2726,
											"end": 2888,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2812,
											"end": 2821,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2845,
											"end": 2882,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 2876,
											"end": 2881,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2845,
											"end": 2882,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 2845,
											"end": 2882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2845,
											"end": 2882,
											"name": "tag",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 2845,
											"end": 2882,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2832,
											"end": 2882,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2832,
											"end": 2882,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2726,
											"end": 2888,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2726,
											"end": 2888,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2726,
											"end": 2888,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2726,
											"end": 2888,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2894,
											"end": 3097,
											"name": "tag",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 2894,
											"end": 3097,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 3084,
											"end": 3089,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "208"
										},
										{
											"begin": 3017,
											"end": 3090,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "tag",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 3017,
											"end": 3090,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3012,
											"end": 3015,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3005,
											"end": 3091,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2894,
											"end": 3097,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2894,
											"end": 3097,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2894,
											"end": 3097,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3103,
											"end": 3397,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 3103,
											"end": 3397,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3232,
											"end": 3236,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3270,
											"end": 3272,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3259,
											"end": 3268,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3255,
											"end": 3273,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3247,
											"end": 3273,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3247,
											"end": 3273,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3283,
											"end": 3390,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 3387,
											"end": 3388,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3376,
											"end": 3385,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3372,
											"end": 3389,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3363,
											"end": 3369,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3283,
											"end": 3390,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 3283,
											"end": 3390,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3283,
											"end": 3390,
											"name": "tag",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 3283,
											"end": 3390,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3103,
											"end": 3397,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3103,
											"end": 3397,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3103,
											"end": 3397,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3103,
											"end": 3397,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3103,
											"end": 3397,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3403,
											"end": 3499,
											"name": "tag",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 3403,
											"end": 3499,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3440,
											"end": 3447,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3469,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 3487,
											"end": 3492,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3469,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 3469,
											"end": 3493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3469,
											"end": 3493,
											"name": "tag",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 3469,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3458,
											"end": 3493,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3458,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3403,
											"end": 3499,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3403,
											"end": 3499,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3403,
											"end": 3499,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3403,
											"end": 3499,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3505,
											"end": 3627,
											"name": "tag",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 3505,
											"end": 3627,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3602,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 3596,
											"end": 3601,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3602,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 3578,
											"end": 3602,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3602,
											"name": "tag",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 3578,
											"end": 3602,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3571,
											"end": 3576,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3568,
											"end": 3603,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3558,
											"end": 3621,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "308"
										},
										{
											"begin": 3558,
											"end": 3621,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3617,
											"end": 3618,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3614,
											"end": 3615,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3607,
											"end": 3619,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3558,
											"end": 3621,
											"name": "tag",
											"source": 8,
											"value": "308"
										},
										{
											"begin": 3558,
											"end": 3621,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3505,
											"end": 3627,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3505,
											"end": 3627,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3633,
											"end": 3772,
											"name": "tag",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 3633,
											"end": 3772,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3679,
											"end": 3684,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3717,
											"end": 3723,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3704,
											"end": 3724,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3695,
											"end": 3724,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3695,
											"end": 3724,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3733,
											"end": 3766,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 3760,
											"end": 3765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3733,
											"end": 3766,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 3733,
											"end": 3766,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3733,
											"end": 3766,
											"name": "tag",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 3733,
											"end": 3766,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3633,
											"end": 3772,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3633,
											"end": 3772,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3633,
											"end": 3772,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3633,
											"end": 3772,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3633,
											"end": 3772,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3778,
											"end": 4397,
											"name": "tag",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 3778,
											"end": 4397,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3855,
											"end": 3861,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3863,
											"end": 3869,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3871,
											"end": 3877,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3920,
											"end": 3922,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3908,
											"end": 3917,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3899,
											"end": 3906,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3895,
											"end": 3918,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3891,
											"end": 3923,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 3888,
											"end": 4007,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3888,
											"end": 4007,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 3888,
											"end": 4007,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3926,
											"end": 4005,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "313"
										},
										{
											"begin": 3926,
											"end": 4005,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 3926,
											"end": 4005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3926,
											"end": 4005,
											"name": "tag",
											"source": 8,
											"value": "313"
										},
										{
											"begin": 3926,
											"end": 4005,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3888,
											"end": 4007,
											"name": "tag",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 3888,
											"end": 4007,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4046,
											"end": 4047,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4071,
											"end": 4124,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 4116,
											"end": 4123,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4107,
											"end": 4113,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4096,
											"end": 4105,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4092,
											"end": 4114,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4071,
											"end": 4124,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 4071,
											"end": 4124,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4071,
											"end": 4124,
											"name": "tag",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 4071,
											"end": 4124,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4061,
											"end": 4124,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4061,
											"end": 4124,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4017,
											"end": 4134,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4173,
											"end": 4175,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4199,
											"end": 4252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "315"
										},
										{
											"begin": 4244,
											"end": 4251,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4235,
											"end": 4241,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4224,
											"end": 4233,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4220,
											"end": 4242,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4199,
											"end": 4252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 4199,
											"end": 4252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4199,
											"end": 4252,
											"name": "tag",
											"source": 8,
											"value": "315"
										},
										{
											"begin": 4199,
											"end": 4252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4189,
											"end": 4252,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4189,
											"end": 4252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4144,
											"end": 4262,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4301,
											"end": 4303,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4327,
											"end": 4380,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "316"
										},
										{
											"begin": 4372,
											"end": 4379,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4369,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4352,
											"end": 4361,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4348,
											"end": 4370,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4327,
											"end": 4380,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 4327,
											"end": 4380,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4327,
											"end": 4380,
											"name": "tag",
											"source": 8,
											"value": "316"
										},
										{
											"begin": 4327,
											"end": 4380,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4317,
											"end": 4380,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4317,
											"end": 4380,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4272,
											"end": 4390,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3778,
											"end": 4397,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3778,
											"end": 4397,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3778,
											"end": 4397,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3778,
											"end": 4397,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3778,
											"end": 4397,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3778,
											"end": 4397,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4403,
											"end": 4625,
											"name": "tag",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 4403,
											"end": 4625,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4496,
											"end": 4500,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4534,
											"end": 4536,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4523,
											"end": 4532,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4519,
											"end": 4537,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4511,
											"end": 4537,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4511,
											"end": 4537,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4618,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "318"
										},
										{
											"begin": 4615,
											"end": 4616,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4604,
											"end": 4613,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4600,
											"end": 4617,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4591,
											"end": 4597,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4618,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 4547,
											"end": 4618,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4618,
											"name": "tag",
											"source": 8,
											"value": "318"
										},
										{
											"begin": 4547,
											"end": 4618,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4403,
											"end": 4625,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4403,
											"end": 4625,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4403,
											"end": 4625,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4403,
											"end": 4625,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4403,
											"end": 4625,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4749,
											"name": "tag",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 4631,
											"end": 4749,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4718,
											"end": 4742,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 4736,
											"end": 4741,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4718,
											"end": 4742,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 4718,
											"end": 4742,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4718,
											"end": 4742,
											"name": "tag",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 4718,
											"end": 4742,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4713,
											"end": 4716,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4706,
											"end": 4743,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4749,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4749,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4749,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4926,
											"end": 4930,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4964,
											"end": 4967,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4953,
											"end": 4962,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4949,
											"end": 4968,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4941,
											"end": 4968,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4941,
											"end": 4968,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4978,
											"end": 5049,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "322"
										},
										{
											"begin": 5046,
											"end": 5047,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5035,
											"end": 5044,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5031,
											"end": 5048,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5022,
											"end": 5028,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4978,
											"end": 5049,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 4978,
											"end": 5049,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4978,
											"end": 5049,
											"name": "tag",
											"source": 8,
											"value": "322"
										},
										{
											"begin": 4978,
											"end": 5049,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5059,
											"end": 5131,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "323"
										},
										{
											"begin": 5127,
											"end": 5129,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5116,
											"end": 5125,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5112,
											"end": 5130,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5103,
											"end": 5109,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 5059,
											"end": 5131,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 5059,
											"end": 5131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5059,
											"end": 5131,
											"name": "tag",
											"source": 8,
											"value": "323"
										},
										{
											"begin": 5059,
											"end": 5131,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5141,
											"end": 5213,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 5209,
											"end": 5211,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5198,
											"end": 5207,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5194,
											"end": 5212,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5185,
											"end": 5191,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5141,
											"end": 5213,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 5141,
											"end": 5213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5141,
											"end": 5213,
											"name": "tag",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 5141,
											"end": 5213,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5223,
											"end": 5289,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 5285,
											"end": 5287,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5274,
											"end": 5283,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5270,
											"end": 5288,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5261,
											"end": 5267,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5223,
											"end": 5289,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 5223,
											"end": 5289,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5223,
											"end": 5289,
											"name": "tag",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 5223,
											"end": 5289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4755,
											"end": 5296,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5302,
											"end": 5403,
											"name": "tag",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 5302,
											"end": 5403,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5338,
											"end": 5345,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5378,
											"end": 5396,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5371,
											"end": 5376,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5367,
											"end": 5397,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5356,
											"end": 5397,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5356,
											"end": 5397,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5302,
											"end": 5403,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5302,
											"end": 5403,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5302,
											"end": 5403,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5302,
											"end": 5403,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5409,
											"end": 5524,
											"name": "tag",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 5409,
											"end": 5524,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5494,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "328"
										},
										{
											"begin": 5511,
											"end": 5516,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5494,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 5494,
											"end": 5517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5494,
											"end": 5517,
											"name": "tag",
											"source": 8,
											"value": "328"
										},
										{
											"begin": 5494,
											"end": 5517,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5489,
											"end": 5492,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5482,
											"end": 5518,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5409,
											"end": 5524,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5409,
											"end": 5524,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5409,
											"end": 5524,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5530,
											"end": 5748,
											"name": "tag",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 5530,
											"end": 5748,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5621,
											"end": 5625,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5659,
											"end": 5661,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5648,
											"end": 5657,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5644,
											"end": 5662,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5636,
											"end": 5662,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5636,
											"end": 5662,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5672,
											"end": 5741,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "330"
										},
										{
											"begin": 5738,
											"end": 5739,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5727,
											"end": 5736,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5723,
											"end": 5740,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5714,
											"end": 5720,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5672,
											"end": 5741,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 5672,
											"end": 5741,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5672,
											"end": 5741,
											"name": "tag",
											"source": 8,
											"value": "330"
										},
										{
											"begin": 5672,
											"end": 5741,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5530,
											"end": 5748,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5530,
											"end": 5748,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5530,
											"end": 5748,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5530,
											"end": 5748,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5530,
											"end": 5748,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5754,
											"end": 5870,
											"name": "tag",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 5754,
											"end": 5870,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5824,
											"end": 5845,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "332"
										},
										{
											"begin": 5839,
											"end": 5844,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5824,
											"end": 5845,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 5824,
											"end": 5845,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5824,
											"end": 5845,
											"name": "tag",
											"source": 8,
											"value": "332"
										},
										{
											"begin": 5824,
											"end": 5845,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5817,
											"end": 5822,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5814,
											"end": 5846,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5804,
											"end": 5864,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 5804,
											"end": 5864,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5860,
											"end": 5861,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5857,
											"end": 5858,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5850,
											"end": 5862,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5804,
											"end": 5864,
											"name": "tag",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 5804,
											"end": 5864,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5754,
											"end": 5870,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5754,
											"end": 5870,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5876,
											"end": 6009,
											"name": "tag",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 5876,
											"end": 6009,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5919,
											"end": 5924,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5957,
											"end": 5963,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5944,
											"end": 5964,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 5935,
											"end": 5964,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5935,
											"end": 5964,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5973,
											"end": 6003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "335"
										},
										{
											"begin": 5997,
											"end": 6002,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5973,
											"end": 6003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 5973,
											"end": 6003,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5973,
											"end": 6003,
											"name": "tag",
											"source": 8,
											"value": "335"
										},
										{
											"begin": 5973,
											"end": 6003,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5876,
											"end": 6009,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5876,
											"end": 6009,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5876,
											"end": 6009,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5876,
											"end": 6009,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5876,
											"end": 6009,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6015,
											"end": 6483,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 6015,
											"end": 6483,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6080,
											"end": 6086,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6088,
											"end": 6094,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6137,
											"end": 6139,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6125,
											"end": 6134,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6116,
											"end": 6123,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6112,
											"end": 6135,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6108,
											"end": 6140,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 6105,
											"end": 6224,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6105,
											"end": 6224,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 6105,
											"end": 6224,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6143,
											"end": 6222,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "338"
										},
										{
											"begin": 6143,
											"end": 6222,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 6143,
											"end": 6222,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6143,
											"end": 6222,
											"name": "tag",
											"source": 8,
											"value": "338"
										},
										{
											"begin": 6143,
											"end": 6222,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6105,
											"end": 6224,
											"name": "tag",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 6105,
											"end": 6224,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6263,
											"end": 6264,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6288,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "339"
										},
										{
											"begin": 6333,
											"end": 6340,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6324,
											"end": 6330,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6313,
											"end": 6322,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 6309,
											"end": 6331,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6288,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 6288,
											"end": 6341,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6288,
											"end": 6341,
											"name": "tag",
											"source": 8,
											"value": "339"
										},
										{
											"begin": 6288,
											"end": 6341,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6278,
											"end": 6341,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6278,
											"end": 6341,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6234,
											"end": 6351,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6390,
											"end": 6392,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6416,
											"end": 6466,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "340"
										},
										{
											"begin": 6458,
											"end": 6465,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6449,
											"end": 6455,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6438,
											"end": 6447,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 6434,
											"end": 6456,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6416,
											"end": 6466,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 6416,
											"end": 6466,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6416,
											"end": 6466,
											"name": "tag",
											"source": 8,
											"value": "340"
										},
										{
											"begin": 6416,
											"end": 6466,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6406,
											"end": 6466,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6406,
											"end": 6466,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6361,
											"end": 6476,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6015,
											"end": 6483,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6015,
											"end": 6483,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6015,
											"end": 6483,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6015,
											"end": 6483,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6015,
											"end": 6483,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6015,
											"end": 6483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6489,
											"end": 6711,
											"name": "tag",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 6489,
											"end": 6711,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6582,
											"end": 6586,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6620,
											"end": 6622,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6609,
											"end": 6618,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6605,
											"end": 6623,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6597,
											"end": 6623,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6597,
											"end": 6623,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6633,
											"end": 6704,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "342"
										},
										{
											"begin": 6701,
											"end": 6702,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6690,
											"end": 6699,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6686,
											"end": 6703,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6677,
											"end": 6683,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6633,
											"end": 6704,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 6633,
											"end": 6704,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6633,
											"end": 6704,
											"name": "tag",
											"source": 8,
											"value": "342"
										},
										{
											"begin": 6633,
											"end": 6704,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6489,
											"end": 6711,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6489,
											"end": 6711,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6489,
											"end": 6711,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6489,
											"end": 6711,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6489,
											"end": 6711,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6717,
											"end": 6794,
											"name": "tag",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 6717,
											"end": 6794,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6754,
											"end": 6761,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6783,
											"end": 6788,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6772,
											"end": 6788,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6772,
											"end": 6788,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6717,
											"end": 6794,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6717,
											"end": 6794,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6717,
											"end": 6794,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6717,
											"end": 6794,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6800,
											"end": 6922,
											"name": "tag",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 6800,
											"end": 6922,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6873,
											"end": 6897,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "345"
										},
										{
											"begin": 6891,
											"end": 6896,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6873,
											"end": 6897,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 6873,
											"end": 6897,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6873,
											"end": 6897,
											"name": "tag",
											"source": 8,
											"value": "345"
										},
										{
											"begin": 6873,
											"end": 6897,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6866,
											"end": 6871,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6863,
											"end": 6898,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6853,
											"end": 6916,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 6853,
											"end": 6916,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6912,
											"end": 6913,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6909,
											"end": 6910,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6902,
											"end": 6914,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6853,
											"end": 6916,
											"name": "tag",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 6853,
											"end": 6916,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6800,
											"end": 6922,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6800,
											"end": 6922,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 7071,
											"name": "tag",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 6928,
											"end": 7071,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6985,
											"end": 6990,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7016,
											"end": 7022,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7010,
											"end": 7023,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7001,
											"end": 7023,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7001,
											"end": 7023,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7032,
											"end": 7065,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 7059,
											"end": 7064,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7032,
											"end": 7065,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 7032,
											"end": 7065,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7032,
											"end": 7065,
											"name": "tag",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 7032,
											"end": 7065,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 7071,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 7071,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 7071,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 7071,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6928,
											"end": 7071,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7077,
											"end": 7428,
											"name": "tag",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 7077,
											"end": 7428,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7147,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7196,
											"end": 7198,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7184,
											"end": 7193,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7175,
											"end": 7182,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7171,
											"end": 7194,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7167,
											"end": 7199,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 7164,
											"end": 7283,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7164,
											"end": 7283,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "350"
										},
										{
											"begin": 7164,
											"end": 7283,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7202,
											"end": 7281,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 7202,
											"end": 7281,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 7202,
											"end": 7281,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7202,
											"end": 7281,
											"name": "tag",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 7202,
											"end": 7281,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7164,
											"end": 7283,
											"name": "tag",
											"source": 8,
											"value": "350"
										},
										{
											"begin": 7164,
											"end": 7283,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7322,
											"end": 7323,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7347,
											"end": 7411,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 7403,
											"end": 7410,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7394,
											"end": 7400,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7383,
											"end": 7392,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7379,
											"end": 7401,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7347,
											"end": 7411,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 7347,
											"end": 7411,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7347,
											"end": 7411,
											"name": "tag",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 7347,
											"end": 7411,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7337,
											"end": 7411,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7337,
											"end": 7411,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7293,
											"end": 7421,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7077,
											"end": 7428,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7077,
											"end": 7428,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7077,
											"end": 7428,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7077,
											"end": 7428,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7077,
											"end": 7428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7434,
											"end": 7582,
											"name": "tag",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 7434,
											"end": 7582,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7536,
											"end": 7547,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7573,
											"end": 7576,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7558,
											"end": 7576,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7558,
											"end": 7576,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7434,
											"end": 7582,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7434,
											"end": 7582,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7434,
											"end": 7582,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7434,
											"end": 7582,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7434,
											"end": 7582,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7588,
											"end": 7755,
											"name": "tag",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 7588,
											"end": 7755,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7728,
											"end": 7747,
											"name": "PUSH",
											"source": 8,
											"value": "446174612061737365727465643A203078000000000000000000000000000000"
										},
										{
											"begin": 7724,
											"end": 7725,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7716,
											"end": 7722,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7712,
											"end": 7726,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7748,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7588,
											"end": 7755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7588,
											"end": 7755,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 8163,
											"name": "tag",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 7761,
											"end": 8163,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7921,
											"end": 7924,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7942,
											"end": 8027,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 8024,
											"end": 8026,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 8019,
											"end": 8022,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7942,
											"end": 8027,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 7942,
											"end": 8027,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7942,
											"end": 8027,
											"name": "tag",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 7942,
											"end": 8027,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7935,
											"end": 8027,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7935,
											"end": 8027,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8036,
											"end": 8129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "357"
										},
										{
											"begin": 8125,
											"end": 8128,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8036,
											"end": 8129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 8036,
											"end": 8129,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8036,
											"end": 8129,
											"name": "tag",
											"source": 8,
											"value": "357"
										},
										{
											"begin": 8036,
											"end": 8129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8154,
											"end": 8156,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 8149,
											"end": 8152,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8145,
											"end": 8157,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8138,
											"end": 8157,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8138,
											"end": 8157,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 8163,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 8163,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 8163,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 8163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8169,
											"end": 8267,
											"name": "tag",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 8169,
											"end": 8267,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8220,
											"end": 8226,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8254,
											"end": 8259,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8248,
											"end": 8260,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8238,
											"end": 8260,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8238,
											"end": 8260,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8169,
											"end": 8267,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8169,
											"end": 8267,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8169,
											"end": 8267,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8169,
											"end": 8267,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8273,
											"end": 8420,
											"name": "tag",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 8273,
											"end": 8420,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8374,
											"end": 8385,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8411,
											"end": 8414,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8396,
											"end": 8414,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8396,
											"end": 8414,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8273,
											"end": 8420,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8273,
											"end": 8420,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8273,
											"end": 8420,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8273,
											"end": 8420,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8273,
											"end": 8420,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8426,
											"end": 8672,
											"name": "tag",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 8426,
											"end": 8672,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8507,
											"end": 8508,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "tag",
											"source": 8,
											"value": "361"
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8531,
											"end": 8537,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8528,
											"end": 8529,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8525,
											"end": 8538,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8616,
											"end": 8617,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8611,
											"end": 8614,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8607,
											"end": 8618,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8601,
											"end": 8619,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8597,
											"end": 8598,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8592,
											"end": 8595,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8588,
											"end": 8599,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8581,
											"end": 8620,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8553,
											"end": 8555,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8550,
											"end": 8551,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8546,
											"end": 8556,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8541,
											"end": 8556,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8541,
											"end": 8556,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "361"
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "tag",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 8517,
											"end": 8630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8664,
											"end": 8665,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8655,
											"end": 8661,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8650,
											"end": 8653,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8646,
											"end": 8662,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8639,
											"end": 8666,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8488,
											"end": 8672,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8426,
											"end": 8672,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8426,
											"end": 8672,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8426,
											"end": 8672,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8426,
											"end": 8672,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8678,
											"end": 9064,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 8678,
											"end": 9064,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8782,
											"end": 8785,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8810,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "365"
										},
										{
											"begin": 8842,
											"end": 8847,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8810,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 8810,
											"end": 8848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8810,
											"end": 8848,
											"name": "tag",
											"source": 8,
											"value": "365"
										},
										{
											"begin": 8810,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8864,
											"end": 8952,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 8945,
											"end": 8951,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8940,
											"end": 8943,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8864,
											"end": 8952,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 8864,
											"end": 8952,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8864,
											"end": 8952,
											"name": "tag",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 8864,
											"end": 8952,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8857,
											"end": 8952,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 8857,
											"end": 8952,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8961,
											"end": 9026,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "367"
										},
										{
											"begin": 9019,
											"end": 9025,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9014,
											"end": 9017,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9007,
											"end": 9011,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9000,
											"end": 9005,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 8996,
											"end": 9012,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8961,
											"end": 9026,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 8961,
											"end": 9026,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8961,
											"end": 9026,
											"name": "tag",
											"source": 8,
											"value": "367"
										},
										{
											"begin": 8961,
											"end": 9026,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9051,
											"end": 9057,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9046,
											"end": 9049,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9042,
											"end": 9058,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9035,
											"end": 9058,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9035,
											"end": 9058,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8786,
											"end": 9064,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8678,
											"end": 9064,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8678,
											"end": 9064,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8678,
											"end": 9064,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8678,
											"end": 9064,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8678,
											"end": 9064,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9070,
											"end": 9235,
											"name": "tag",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 9070,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9210,
											"end": 9227,
											"name": "PUSH",
											"source": 8,
											"value": "20666F72206461746149643A2030780000000000000000000000000000000000"
										},
										{
											"begin": 9206,
											"end": 9207,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9198,
											"end": 9204,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9194,
											"end": 9208,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9187,
											"end": 9228,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9070,
											"end": 9235,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9070,
											"end": 9235,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9241,
											"end": 9643,
											"name": "tag",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 9241,
											"end": 9643,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9401,
											"end": 9404,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9422,
											"end": 9507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "370"
										},
										{
											"begin": 9504,
											"end": 9506,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 9499,
											"end": 9502,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9422,
											"end": 9507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 9422,
											"end": 9507,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9422,
											"end": 9507,
											"name": "tag",
											"source": 8,
											"value": "370"
										},
										{
											"begin": 9422,
											"end": 9507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9415,
											"end": 9507,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9415,
											"end": 9507,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9516,
											"end": 9609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "371"
										},
										{
											"begin": 9605,
											"end": 9608,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9516,
											"end": 9609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 9516,
											"end": 9609,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9516,
											"end": 9609,
											"name": "tag",
											"source": 8,
											"value": "371"
										},
										{
											"begin": 9516,
											"end": 9609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9634,
											"end": 9636,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 9629,
											"end": 9632,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9625,
											"end": 9637,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9618,
											"end": 9637,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9618,
											"end": 9637,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9241,
											"end": 9643,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9241,
											"end": 9643,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9241,
											"end": 9643,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9241,
											"end": 9643,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9649,
											"end": 9816,
											"name": "tag",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 9649,
											"end": 9816,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9789,
											"end": 9808,
											"name": "PUSH",
											"source": 8,
											"value": "20616E642061737365727465723A203078000000000000000000000000000000"
										},
										{
											"begin": 9785,
											"end": 9786,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9777,
											"end": 9783,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9773,
											"end": 9787,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9766,
											"end": 9809,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9649,
											"end": 9816,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9649,
											"end": 9816,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9822,
											"end": 10224,
											"name": "tag",
											"source": 8,
											"value": "231"
										},
										{
											"begin": 9822,
											"end": 10224,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9982,
											"end": 9985,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10003,
											"end": 10088,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 10085,
											"end": 10087,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 10080,
											"end": 10083,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10003,
											"end": 10088,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 10003,
											"end": 10088,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10003,
											"end": 10088,
											"name": "tag",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 10003,
											"end": 10088,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9996,
											"end": 10088,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9996,
											"end": 10088,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10097,
											"end": 10190,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "375"
										},
										{
											"begin": 10186,
											"end": 10189,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10097,
											"end": 10190,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 10097,
											"end": 10190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10097,
											"end": 10190,
											"name": "tag",
											"source": 8,
											"value": "375"
										},
										{
											"begin": 10097,
											"end": 10190,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10215,
											"end": 10217,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 10210,
											"end": 10213,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10206,
											"end": 10218,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10199,
											"end": 10218,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10199,
											"end": 10218,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9822,
											"end": 10224,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9822,
											"end": 10224,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9822,
											"end": 10224,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9822,
											"end": 10224,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10230,
											"end": 10395,
											"name": "tag",
											"source": 8,
											"value": "232"
										},
										{
											"begin": 10230,
											"end": 10395,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10370,
											"end": 10387,
											"name": "PUSH",
											"source": 8,
											"value": "2061742074696D657374616D703A200000000000000000000000000000000000"
										},
										{
											"begin": 10366,
											"end": 10367,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10358,
											"end": 10364,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10354,
											"end": 10368,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10347,
											"end": 10388,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10230,
											"end": 10395,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10230,
											"end": 10395,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10401,
											"end": 10803,
											"name": "tag",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 10401,
											"end": 10803,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10561,
											"end": 10564,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10582,
											"end": 10667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 10664,
											"end": 10666,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 10659,
											"end": 10662,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10582,
											"end": 10667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 10582,
											"end": 10667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10582,
											"end": 10667,
											"name": "tag",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 10582,
											"end": 10667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10575,
											"end": 10667,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10575,
											"end": 10667,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10676,
											"end": 10769,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "379"
										},
										{
											"begin": 10765,
											"end": 10768,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10676,
											"end": 10769,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "232"
										},
										{
											"begin": 10676,
											"end": 10769,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10676,
											"end": 10769,
											"name": "tag",
											"source": 8,
											"value": "379"
										},
										{
											"begin": 10676,
											"end": 10769,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10794,
											"end": 10796,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 10789,
											"end": 10792,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10785,
											"end": 10797,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10778,
											"end": 10797,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10778,
											"end": 10797,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10401,
											"end": 10803,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10401,
											"end": 10803,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10401,
											"end": 10803,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10401,
											"end": 10803,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10809,
											"end": 11031,
											"name": "tag",
											"source": 8,
											"value": "234"
										},
										{
											"begin": 10809,
											"end": 11031,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10949,
											"end": 10983,
											"name": "PUSH",
											"source": 8,
											"value": "20696E207468652044617461417373657274657220636F6E7472616374206174"
										},
										{
											"begin": 10945,
											"end": 10946,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10937,
											"end": 10943,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10933,
											"end": 10947,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10926,
											"end": 10984,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11018,
											"end": 11023,
											"name": "PUSH",
											"source": 8,
											"value": "2030780000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11013,
											"end": 11015,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11005,
											"end": 11011,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11001,
											"end": 11016,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10994,
											"end": 11024,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10809,
											"end": 11031,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10809,
											"end": 11031,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11037,
											"end": 11439,
											"name": "tag",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 11037,
											"end": 11439,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11197,
											"end": 11200,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11218,
											"end": 11303,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 11300,
											"end": 11302,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 11295,
											"end": 11298,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11218,
											"end": 11303,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 11218,
											"end": 11303,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11218,
											"end": 11303,
											"name": "tag",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 11218,
											"end": 11303,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11211,
											"end": 11303,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11211,
											"end": 11303,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11312,
											"end": 11405,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 11401,
											"end": 11404,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11312,
											"end": 11405,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "234"
										},
										{
											"begin": 11312,
											"end": 11405,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11312,
											"end": 11405,
											"name": "tag",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 11312,
											"end": 11405,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11430,
											"end": 11432,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 11425,
											"end": 11428,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11421,
											"end": 11433,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11414,
											"end": 11433,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11414,
											"end": 11433,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11037,
											"end": 11439,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11037,
											"end": 11439,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11037,
											"end": 11439,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11037,
											"end": 11439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11445,
											"end": 11605,
											"name": "tag",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 11445,
											"end": 11605,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11585,
											"end": 11597,
											"name": "PUSH",
											"source": 8,
											"value": "2069732076616C69642E00000000000000000000000000000000000000000000"
										},
										{
											"begin": 11581,
											"end": 11582,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11573,
											"end": 11579,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11569,
											"end": 11583,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11562,
											"end": 11598,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11445,
											"end": 11605,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11445,
											"end": 11605,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11611,
											"end": 12013,
											"name": "tag",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 11611,
											"end": 12013,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11771,
											"end": 11774,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11792,
											"end": 11877,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 11874,
											"end": 11876,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 11869,
											"end": 11872,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11792,
											"end": 11877,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 11792,
											"end": 11877,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11792,
											"end": 11877,
											"name": "tag",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 11792,
											"end": 11877,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11785,
											"end": 11877,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11785,
											"end": 11877,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11886,
											"end": 11979,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "387"
										},
										{
											"begin": 11975,
											"end": 11978,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11886,
											"end": 11979,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 11886,
											"end": 11979,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11886,
											"end": 11979,
											"name": "tag",
											"source": 8,
											"value": "387"
										},
										{
											"begin": 11886,
											"end": 11979,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12004,
											"end": 12006,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 11999,
											"end": 12002,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11995,
											"end": 12007,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11988,
											"end": 12007,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11988,
											"end": 12007,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11611,
											"end": 12013,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11611,
											"end": 12013,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11611,
											"end": 12013,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11611,
											"end": 12013,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12939,
											"end": 12942,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12961,
											"end": 13109,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "389"
										},
										{
											"begin": 13105,
											"end": 13108,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12961,
											"end": 13109,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 12961,
											"end": 13109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12961,
											"end": 13109,
											"name": "tag",
											"source": 8,
											"value": "389"
										},
										{
											"begin": 12961,
											"end": 13109,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12954,
											"end": 13109,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 12954,
											"end": 13109,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13126,
											"end": 13219,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "390"
										},
										{
											"begin": 13215,
											"end": 13218,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13206,
											"end": 13212,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 13126,
											"end": 13219,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 13126,
											"end": 13219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13126,
											"end": 13219,
											"name": "tag",
											"source": 8,
											"value": "390"
										},
										{
											"begin": 13126,
											"end": 13219,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13119,
											"end": 13219,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13119,
											"end": 13219,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13236,
											"end": 13384,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 13380,
											"end": 13383,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13236,
											"end": 13384,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 13236,
											"end": 13384,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13236,
											"end": 13384,
											"name": "tag",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 13236,
											"end": 13384,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13229,
											"end": 13384,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13229,
											"end": 13384,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13401,
											"end": 13494,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "392"
										},
										{
											"begin": 13490,
											"end": 13493,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13481,
											"end": 13487,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 13401,
											"end": 13494,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 13401,
											"end": 13494,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13401,
											"end": 13494,
											"name": "tag",
											"source": 8,
											"value": "392"
										},
										{
											"begin": 13401,
											"end": 13494,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13394,
											"end": 13494,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13394,
											"end": 13494,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13511,
											"end": 13659,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 13655,
											"end": 13658,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13511,
											"end": 13659,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "231"
										},
										{
											"begin": 13511,
											"end": 13659,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13511,
											"end": 13659,
											"name": "tag",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 13511,
											"end": 13659,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13504,
											"end": 13659,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13504,
											"end": 13659,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13676,
											"end": 13769,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "394"
										},
										{
											"begin": 13765,
											"end": 13768,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13756,
											"end": 13762,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 13676,
											"end": 13769,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 13676,
											"end": 13769,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13676,
											"end": 13769,
											"name": "tag",
											"source": 8,
											"value": "394"
										},
										{
											"begin": 13676,
											"end": 13769,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13669,
											"end": 13769,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13669,
											"end": 13769,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13786,
											"end": 13934,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "395"
										},
										{
											"begin": 13930,
											"end": 13933,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13786,
											"end": 13934,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 13786,
											"end": 13934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13786,
											"end": 13934,
											"name": "tag",
											"source": 8,
											"value": "395"
										},
										{
											"begin": 13786,
											"end": 13934,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13779,
											"end": 13934,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13779,
											"end": 13934,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13951,
											"end": 14044,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "396"
										},
										{
											"begin": 14040,
											"end": 14043,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14031,
											"end": 14037,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 13951,
											"end": 14044,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 13951,
											"end": 14044,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13951,
											"end": 14044,
											"name": "tag",
											"source": 8,
											"value": "396"
										},
										{
											"begin": 13951,
											"end": 14044,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13944,
											"end": 14044,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13944,
											"end": 14044,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14061,
											"end": 14209,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 14205,
											"end": 14208,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14061,
											"end": 14209,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 14061,
											"end": 14209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14061,
											"end": 14209,
											"name": "tag",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 14061,
											"end": 14209,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14054,
											"end": 14209,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14054,
											"end": 14209,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14226,
											"end": 14319,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "398"
										},
										{
											"begin": 14315,
											"end": 14318,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14306,
											"end": 14312,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 14226,
											"end": 14319,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 14226,
											"end": 14319,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14226,
											"end": 14319,
											"name": "tag",
											"source": 8,
											"value": "398"
										},
										{
											"begin": 14226,
											"end": 14319,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14219,
											"end": 14319,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14219,
											"end": 14319,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14336,
											"end": 14484,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 14480,
											"end": 14483,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14336,
											"end": 14484,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 14336,
											"end": 14484,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14336,
											"end": 14484,
											"name": "tag",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 14336,
											"end": 14484,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14329,
											"end": 14484,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14329,
											"end": 14484,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14501,
											"end": 14504,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14494,
											"end": 14504,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14494,
											"end": 14504,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 12019,
											"end": 14510,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14516,
											"end": 14684,
											"name": "tag",
											"source": 8,
											"value": "238"
										},
										{
											"begin": 14516,
											"end": 14684,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14599,
											"end": 14610,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14633,
											"end": 14639,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14628,
											"end": 14631,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14621,
											"end": 14640,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14673,
											"end": 14677,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14668,
											"end": 14671,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14664,
											"end": 14678,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14649,
											"end": 14678,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14649,
											"end": 14678,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14516,
											"end": 14684,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 14516,
											"end": 14684,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14516,
											"end": 14684,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14516,
											"end": 14684,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14516,
											"end": 14684,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14690,
											"end": 14792,
											"name": "tag",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 14690,
											"end": 14792,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14731,
											"end": 14737,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14782,
											"end": 14784,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 14778,
											"end": 14785,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 14773,
											"end": 14775,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 14766,
											"end": 14771,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 14762,
											"end": 14776,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14758,
											"end": 14786,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 14748,
											"end": 14786,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14748,
											"end": 14786,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14690,
											"end": 14792,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14690,
											"end": 14792,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14690,
											"end": 14792,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14690,
											"end": 14792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14798,
											"end": 15171,
											"name": "tag",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 14798,
											"end": 15171,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14884,
											"end": 14887,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14912,
											"end": 14950,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 14944,
											"end": 14949,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14912,
											"end": 14950,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 14912,
											"end": 14950,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14912,
											"end": 14950,
											"name": "tag",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 14912,
											"end": 14950,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14966,
											"end": 15036,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "404"
										},
										{
											"begin": 15029,
											"end": 15035,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15024,
											"end": 15027,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 14966,
											"end": 15036,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "238"
										},
										{
											"begin": 14966,
											"end": 15036,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14966,
											"end": 15036,
											"name": "tag",
											"source": 8,
											"value": "404"
										},
										{
											"begin": 14966,
											"end": 15036,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14959,
											"end": 15036,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 14959,
											"end": 15036,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15045,
											"end": 15110,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "405"
										},
										{
											"begin": 15103,
											"end": 15109,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15098,
											"end": 15101,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 15091,
											"end": 15095,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 15084,
											"end": 15089,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 15080,
											"end": 15096,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15045,
											"end": 15110,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 15045,
											"end": 15110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15045,
											"end": 15110,
											"name": "tag",
											"source": 8,
											"value": "405"
										},
										{
											"begin": 15045,
											"end": 15110,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15135,
											"end": 15164,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "406"
										},
										{
											"begin": 15157,
											"end": 15163,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15135,
											"end": 15164,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 15135,
											"end": 15164,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15135,
											"end": 15164,
											"name": "tag",
											"source": 8,
											"value": "406"
										},
										{
											"begin": 15135,
											"end": 15164,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15130,
											"end": 15133,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 15126,
											"end": 15165,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15119,
											"end": 15165,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 15119,
											"end": 15165,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14888,
											"end": 15171,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14798,
											"end": 15171,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 14798,
											"end": 15171,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14798,
											"end": 15171,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14798,
											"end": 15171,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14798,
											"end": 15171,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15177,
											"end": 15295,
											"name": "tag",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 15177,
											"end": 15295,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15264,
											"end": 15288,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "408"
										},
										{
											"begin": 15282,
											"end": 15287,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15264,
											"end": 15288,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 15264,
											"end": 15288,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15264,
											"end": 15288,
											"name": "tag",
											"source": 8,
											"value": "408"
										},
										{
											"begin": 15264,
											"end": 15288,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15259,
											"end": 15262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 15252,
											"end": 15289,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15177,
											"end": 15295,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15177,
											"end": 15295,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15177,
											"end": 15295,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "tag",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15647,
											"end": 15651,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15685,
											"end": 15688,
											"name": "PUSH",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 15674,
											"end": 15683,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 15670,
											"end": 15689,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15662,
											"end": 15689,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15662,
											"end": 15689,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15735,
											"end": 15744,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15729,
											"end": 15733,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15725,
											"end": 15745,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 15721,
											"end": 15722,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 15710,
											"end": 15719,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 15706,
											"end": 15723,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15699,
											"end": 15746,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15763,
											"end": 15839,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "410"
										},
										{
											"begin": 15834,
											"end": 15838,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 15825,
											"end": 15831,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 15763,
											"end": 15839,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 15763,
											"end": 15839,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15763,
											"end": 15839,
											"name": "tag",
											"source": 8,
											"value": "410"
										},
										{
											"begin": 15763,
											"end": 15839,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15755,
											"end": 15839,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 15755,
											"end": 15839,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15849,
											"end": 15921,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 15917,
											"end": 15919,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 15906,
											"end": 15915,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 15902,
											"end": 15920,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15893,
											"end": 15899,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 15849,
											"end": 15921,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 15849,
											"end": 15921,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15849,
											"end": 15921,
											"name": "tag",
											"source": 8,
											"value": "411"
										},
										{
											"begin": 15849,
											"end": 15921,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15931,
											"end": 16003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 15999,
											"end": 16001,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 15988,
											"end": 15997,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 15984,
											"end": 16002,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15975,
											"end": 15981,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 15931,
											"end": 16003,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 15931,
											"end": 16003,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15931,
											"end": 16003,
											"name": "tag",
											"source": 8,
											"value": "412"
										},
										{
											"begin": 15931,
											"end": 16003,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16013,
											"end": 16085,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "413"
										},
										{
											"begin": 16081,
											"end": 16083,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 16070,
											"end": 16079,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 16066,
											"end": 16084,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16057,
											"end": 16063,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 16013,
											"end": 16085,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 16013,
											"end": 16085,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16013,
											"end": 16085,
											"name": "tag",
											"source": 8,
											"value": "413"
										},
										{
											"begin": 16013,
											"end": 16085,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16095,
											"end": 16166,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "414"
										},
										{
											"begin": 16161,
											"end": 16164,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 16150,
											"end": 16159,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 16146,
											"end": 16165,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16137,
											"end": 16143,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 16095,
											"end": 16166,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 16095,
											"end": 16166,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16095,
											"end": 16166,
											"name": "tag",
											"source": 8,
											"value": "414"
										},
										{
											"begin": 16095,
											"end": 16166,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16176,
											"end": 16262,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "415"
										},
										{
											"begin": 16257,
											"end": 16260,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 16246,
											"end": 16255,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 16242,
											"end": 16261,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16233,
											"end": 16239,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 16176,
											"end": 16262,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 16176,
											"end": 16262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16176,
											"end": 16262,
											"name": "tag",
											"source": 8,
											"value": "415"
										},
										{
											"begin": 16176,
											"end": 16262,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16272,
											"end": 16345,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "416"
										},
										{
											"begin": 16340,
											"end": 16343,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 16329,
											"end": 16338,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 16325,
											"end": 16344,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16316,
											"end": 16322,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 16272,
											"end": 16345,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 16272,
											"end": 16345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16272,
											"end": 16345,
											"name": "tag",
											"source": 8,
											"value": "416"
										},
										{
											"begin": 16272,
											"end": 16345,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16355,
											"end": 16428,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "417"
										},
										{
											"begin": 16423,
											"end": 16426,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 16412,
											"end": 16421,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 16408,
											"end": 16427,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16399,
											"end": 16405,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 16355,
											"end": 16428,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 16355,
											"end": 16428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16355,
											"end": 16428,
											"name": "tag",
											"source": 8,
											"value": "417"
										},
										{
											"begin": 16355,
											"end": 16428,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16438,
											"end": 16511,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "418"
										},
										{
											"begin": 16506,
											"end": 16509,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 16495,
											"end": 16504,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 16491,
											"end": 16510,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16482,
											"end": 16488,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 16438,
											"end": 16511,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 16438,
											"end": 16511,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16438,
											"end": 16511,
											"name": "tag",
											"source": 8,
											"value": "418"
										},
										{
											"begin": 16438,
											"end": 16511,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "SWAP11",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "SWAP10",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 15301,
											"end": 16518,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16524,
											"end": 16667,
											"name": "tag",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 16524,
											"end": 16667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16581,
											"end": 16586,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 16612,
											"end": 16618,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 16606,
											"end": 16619,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 16597,
											"end": 16619,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 16597,
											"end": 16619,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16628,
											"end": 16661,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "420"
										},
										{
											"begin": 16655,
											"end": 16660,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 16628,
											"end": 16661,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "203"
										},
										{
											"begin": 16628,
											"end": 16661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16628,
											"end": 16661,
											"name": "tag",
											"source": 8,
											"value": "420"
										},
										{
											"begin": 16628,
											"end": 16661,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16524,
											"end": 16667,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 16524,
											"end": 16667,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 16524,
											"end": 16667,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16524,
											"end": 16667,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16524,
											"end": 16667,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16673,
											"end": 17024,
											"name": "tag",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 16673,
											"end": 17024,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16743,
											"end": 16749,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 16792,
											"end": 16794,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 16780,
											"end": 16789,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 16771,
											"end": 16778,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 16767,
											"end": 16790,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 16763,
											"end": 16795,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 16760,
											"end": 16879,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 16760,
											"end": 16879,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "422"
										},
										{
											"begin": 16760,
											"end": 16879,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 16798,
											"end": 16877,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "423"
										},
										{
											"begin": 16798,
											"end": 16877,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 16798,
											"end": 16877,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16798,
											"end": 16877,
											"name": "tag",
											"source": 8,
											"value": "423"
										},
										{
											"begin": 16798,
											"end": 16877,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16760,
											"end": 16879,
											"name": "tag",
											"source": 8,
											"value": "422"
										},
										{
											"begin": 16760,
											"end": 16879,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16918,
											"end": 16919,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 16943,
											"end": 17007,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "424"
										},
										{
											"begin": 16999,
											"end": 17006,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 16990,
											"end": 16996,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 16979,
											"end": 16988,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 16975,
											"end": 16997,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 16943,
											"end": 17007,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 16943,
											"end": 17007,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 16943,
											"end": 17007,
											"name": "tag",
											"source": 8,
											"value": "424"
										},
										{
											"begin": 16943,
											"end": 17007,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 16933,
											"end": 17007,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 16933,
											"end": 17007,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16889,
											"end": 17017,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16673,
											"end": 17024,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 16673,
											"end": 17024,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 16673,
											"end": 17024,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16673,
											"end": 17024,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 16673,
											"end": 17024,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17030,
											"end": 17472,
											"name": "tag",
											"source": 8,
											"value": "93"
										},
										{
											"begin": 17030,
											"end": 17472,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17179,
											"end": 17183,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17217,
											"end": 17219,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 17206,
											"end": 17215,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 17202,
											"end": 17220,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17194,
											"end": 17220,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 17194,
											"end": 17220,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17230,
											"end": 17301,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "426"
										},
										{
											"begin": 17298,
											"end": 17299,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17287,
											"end": 17296,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 17283,
											"end": 17300,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17274,
											"end": 17280,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 17230,
											"end": 17301,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 17230,
											"end": 17301,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17230,
											"end": 17301,
											"name": "tag",
											"source": 8,
											"value": "426"
										},
										{
											"begin": 17230,
											"end": 17301,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17311,
											"end": 17383,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "427"
										},
										{
											"begin": 17379,
											"end": 17381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 17368,
											"end": 17377,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 17364,
											"end": 17382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17355,
											"end": 17361,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 17311,
											"end": 17383,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 17311,
											"end": 17383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17311,
											"end": 17383,
											"name": "tag",
											"source": 8,
											"value": "427"
										},
										{
											"begin": 17311,
											"end": 17383,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17393,
											"end": 17465,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "428"
										},
										{
											"begin": 17461,
											"end": 17463,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 17450,
											"end": 17459,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 17446,
											"end": 17464,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17437,
											"end": 17443,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 17393,
											"end": 17465,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 17393,
											"end": 17465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17393,
											"end": 17465,
											"name": "tag",
											"source": 8,
											"value": "428"
										},
										{
											"begin": 17393,
											"end": 17465,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17030,
											"end": 17472,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 17030,
											"end": 17472,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 17030,
											"end": 17472,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17030,
											"end": 17472,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17030,
											"end": 17472,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17030,
											"end": 17472,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17030,
											"end": 17472,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17478,
											"end": 17810,
											"name": "tag",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 17478,
											"end": 17810,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17599,
											"end": 17603,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17637,
											"end": 17639,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 17626,
											"end": 17635,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 17622,
											"end": 17640,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17614,
											"end": 17640,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 17614,
											"end": 17640,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17650,
											"end": 17721,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "430"
										},
										{
											"begin": 17718,
											"end": 17719,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17707,
											"end": 17716,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 17703,
											"end": 17720,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17694,
											"end": 17700,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 17650,
											"end": 17721,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 17650,
											"end": 17721,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17650,
											"end": 17721,
											"name": "tag",
											"source": 8,
											"value": "430"
										},
										{
											"begin": 17650,
											"end": 17721,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17731,
											"end": 17803,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "431"
										},
										{
											"begin": 17799,
											"end": 17801,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 17788,
											"end": 17797,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 17784,
											"end": 17802,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17775,
											"end": 17781,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 17731,
											"end": 17803,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 17731,
											"end": 17803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17731,
											"end": 17803,
											"name": "tag",
											"source": 8,
											"value": "431"
										},
										{
											"begin": 17731,
											"end": 17803,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17478,
											"end": 17810,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 17478,
											"end": 17810,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 17478,
											"end": 17810,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17478,
											"end": 17810,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17478,
											"end": 17810,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17478,
											"end": 17810,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17816,
											"end": 17985,
											"name": "tag",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 17816,
											"end": 17985,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 17900,
											"end": 17911,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 17934,
											"end": 17940,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 17929,
											"end": 17932,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 17922,
											"end": 17941,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 17974,
											"end": 17978,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 17969,
											"end": 17972,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 17965,
											"end": 17979,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 17950,
											"end": 17979,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 17950,
											"end": 17979,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17816,
											"end": 17985,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 17816,
											"end": 17985,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 17816,
											"end": 17985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17816,
											"end": 17985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17816,
											"end": 17985,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 17991,
											"end": 18232,
											"name": "tag",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 17991,
											"end": 18232,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18131,
											"end": 18165,
											"name": "PUSH",
											"source": 8,
											"value": "5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F"
										},
										{
											"begin": 18127,
											"end": 18128,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18119,
											"end": 18125,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18115,
											"end": 18129,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18108,
											"end": 18166,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 18200,
											"end": 18224,
											"name": "PUSH",
											"source": 8,
											"value": "20746F206E6F6E2D7A65726F20616C6C6F77616E636500000000000000000000"
										},
										{
											"begin": 18195,
											"end": 18197,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 18187,
											"end": 18193,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18183,
											"end": 18198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18176,
											"end": 18225,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 17991,
											"end": 18232,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 17991,
											"end": 18232,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 18238,
											"end": 18604,
											"name": "tag",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 18238,
											"end": 18604,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18380,
											"end": 18383,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18401,
											"end": 18468,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "435"
										},
										{
											"begin": 18465,
											"end": 18467,
											"name": "PUSH",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 18460,
											"end": 18463,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 18401,
											"end": 18468,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 18401,
											"end": 18468,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 18401,
											"end": 18468,
											"name": "tag",
											"source": 8,
											"value": "435"
										},
										{
											"begin": 18401,
											"end": 18468,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18394,
											"end": 18468,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 18394,
											"end": 18468,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18477,
											"end": 18570,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "436"
										},
										{
											"begin": 18566,
											"end": 18569,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18477,
											"end": 18570,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 18477,
											"end": 18570,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 18477,
											"end": 18570,
											"name": "tag",
											"source": 8,
											"value": "436"
										},
										{
											"begin": 18477,
											"end": 18570,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18595,
											"end": 18597,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 18590,
											"end": 18593,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18586,
											"end": 18598,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18579,
											"end": 18598,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18579,
											"end": 18598,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18238,
											"end": 18604,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 18238,
											"end": 18604,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18238,
											"end": 18604,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18238,
											"end": 18604,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 18610,
											"end": 19029,
											"name": "tag",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 18610,
											"end": 19029,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18776,
											"end": 18780,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18814,
											"end": 18816,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 18803,
											"end": 18812,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 18799,
											"end": 18817,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18791,
											"end": 18817,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18791,
											"end": 18817,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18863,
											"end": 18872,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18857,
											"end": 18861,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18853,
											"end": 18873,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 18849,
											"end": 18850,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 18838,
											"end": 18847,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 18834,
											"end": 18851,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 18827,
											"end": 18874,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 18891,
											"end": 19022,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "438"
										},
										{
											"begin": 19017,
											"end": 19021,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 18891,
											"end": 19022,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 18891,
											"end": 19022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 18891,
											"end": 19022,
											"name": "tag",
											"source": 8,
											"value": "438"
										},
										{
											"begin": 18891,
											"end": 19022,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 18883,
											"end": 19022,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18883,
											"end": 19022,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18610,
											"end": 19029,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 18610,
											"end": 19029,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 18610,
											"end": 19029,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 18610,
											"end": 19029,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19035,
											"end": 19367,
											"name": "tag",
											"source": 8,
											"value": "107"
										},
										{
											"begin": 19035,
											"end": 19367,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19156,
											"end": 19160,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19194,
											"end": 19196,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 19183,
											"end": 19192,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19179,
											"end": 19197,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19171,
											"end": 19197,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19171,
											"end": 19197,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19207,
											"end": 19278,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "440"
										},
										{
											"begin": 19275,
											"end": 19276,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19264,
											"end": 19273,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 19260,
											"end": 19277,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19251,
											"end": 19257,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 19207,
											"end": 19278,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 19207,
											"end": 19278,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19207,
											"end": 19278,
											"name": "tag",
											"source": 8,
											"value": "440"
										},
										{
											"begin": 19207,
											"end": 19278,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19288,
											"end": 19360,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "441"
										},
										{
											"begin": 19356,
											"end": 19358,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 19345,
											"end": 19354,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 19341,
											"end": 19359,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19332,
											"end": 19338,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 19288,
											"end": 19360,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 19288,
											"end": 19360,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19288,
											"end": 19360,
											"name": "tag",
											"source": 8,
											"value": "441"
										},
										{
											"begin": 19288,
											"end": 19360,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19035,
											"end": 19367,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 19035,
											"end": 19367,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19035,
											"end": 19367,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19035,
											"end": 19367,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19035,
											"end": 19367,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19035,
											"end": 19367,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19373,
											"end": 19452,
											"name": "tag",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 19373,
											"end": 19452,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19412,
											"end": 19419,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19441,
											"end": 19446,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 19430,
											"end": 19446,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19430,
											"end": 19446,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19373,
											"end": 19452,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19373,
											"end": 19452,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 19373,
											"end": 19452,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19373,
											"end": 19452,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19458,
											"end": 19615,
											"name": "tag",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 19458,
											"end": 19615,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19563,
											"end": 19608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "444"
										},
										{
											"begin": 19583,
											"end": 19607,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "445"
										},
										{
											"begin": 19601,
											"end": 19606,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19583,
											"end": 19607,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 19583,
											"end": 19607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19583,
											"end": 19607,
											"name": "tag",
											"source": 8,
											"value": "445"
										},
										{
											"begin": 19583,
											"end": 19607,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19563,
											"end": 19608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 19563,
											"end": 19608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19563,
											"end": 19608,
											"name": "tag",
											"source": 8,
											"value": "444"
										},
										{
											"begin": 19563,
											"end": 19608,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19558,
											"end": 19561,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19551,
											"end": 19609,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 19458,
											"end": 19615,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19458,
											"end": 19615,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19458,
											"end": 19615,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19621,
											"end": 20018,
											"name": "tag",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 19621,
											"end": 20018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19761,
											"end": 19764,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 19776,
											"end": 19851,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "447"
										},
										{
											"begin": 19847,
											"end": 19850,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19838,
											"end": 19844,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 19776,
											"end": 19851,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 19776,
											"end": 19851,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19776,
											"end": 19851,
											"name": "tag",
											"source": 8,
											"value": "447"
										},
										{
											"begin": 19776,
											"end": 19851,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19876,
											"end": 19878,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 19871,
											"end": 19874,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19867,
											"end": 19879,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19860,
											"end": 19879,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19860,
											"end": 19879,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19889,
											"end": 19964,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "448"
										},
										{
											"begin": 19960,
											"end": 19963,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19951,
											"end": 19957,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 19889,
											"end": 19964,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 19889,
											"end": 19964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 19889,
											"end": 19964,
											"name": "tag",
											"source": 8,
											"value": "448"
										},
										{
											"begin": 19889,
											"end": 19964,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 19989,
											"end": 19991,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 19984,
											"end": 19987,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 19980,
											"end": 19992,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 19973,
											"end": 19992,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 19973,
											"end": 19992,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20009,
											"end": 20012,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20002,
											"end": 20012,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20002,
											"end": 20012,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19621,
											"end": 20018,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 19621,
											"end": 20018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 19621,
											"end": 20018,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19621,
											"end": 20018,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19621,
											"end": 20018,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 19621,
											"end": 20018,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20024,
											"end": 20173,
											"name": "tag",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 20024,
											"end": 20173,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20060,
											"end": 20067,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20100,
											"end": 20166,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 20093,
											"end": 20098,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20089,
											"end": 20167,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 20078,
											"end": 20167,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20078,
											"end": 20167,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20024,
											"end": 20173,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20024,
											"end": 20173,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20024,
											"end": 20173,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20024,
											"end": 20173,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20179,
											"end": 20257,
											"name": "tag",
											"source": 8,
											"value": "249"
										},
										{
											"begin": 20179,
											"end": 20257,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20217,
											"end": 20224,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20246,
											"end": 20251,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20235,
											"end": 20251,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20235,
											"end": 20251,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20179,
											"end": 20257,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20179,
											"end": 20257,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20179,
											"end": 20257,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20179,
											"end": 20257,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20263,
											"end": 20416,
											"name": "tag",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 20263,
											"end": 20416,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20366,
											"end": 20409,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "452"
										},
										{
											"begin": 20385,
											"end": 20408,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "453"
										},
										{
											"begin": 20402,
											"end": 20407,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20385,
											"end": 20408,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 20385,
											"end": 20408,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20385,
											"end": 20408,
											"name": "tag",
											"source": 8,
											"value": "453"
										},
										{
											"begin": 20385,
											"end": 20408,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20366,
											"end": 20409,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "249"
										},
										{
											"begin": 20366,
											"end": 20409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20366,
											"end": 20409,
											"name": "tag",
											"source": 8,
											"value": "452"
										},
										{
											"begin": 20366,
											"end": 20409,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20361,
											"end": 20364,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20354,
											"end": 20410,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 20263,
											"end": 20416,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20263,
											"end": 20416,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20263,
											"end": 20416,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20422,
											"end": 20814,
											"name": "tag",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 20422,
											"end": 20814,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20560,
											"end": 20563,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20575,
											"end": 20650,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "455"
										},
										{
											"begin": 20646,
											"end": 20649,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20637,
											"end": 20643,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 20575,
											"end": 20650,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 20575,
											"end": 20650,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20575,
											"end": 20650,
											"name": "tag",
											"source": 8,
											"value": "455"
										},
										{
											"begin": 20575,
											"end": 20650,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20675,
											"end": 20677,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 20670,
											"end": 20673,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20666,
											"end": 20678,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 20659,
											"end": 20678,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20659,
											"end": 20678,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20688,
											"end": 20761,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "456"
										},
										{
											"begin": 20757,
											"end": 20760,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20748,
											"end": 20754,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 20688,
											"end": 20761,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 20688,
											"end": 20761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20688,
											"end": 20761,
											"name": "tag",
											"source": 8,
											"value": "456"
										},
										{
											"begin": 20688,
											"end": 20761,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20786,
											"end": 20787,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 20781,
											"end": 20784,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 20777,
											"end": 20788,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 20770,
											"end": 20788,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 20770,
											"end": 20788,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20805,
											"end": 20808,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 20798,
											"end": 20808,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 20798,
											"end": 20808,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20422,
											"end": 20814,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 20422,
											"end": 20814,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 20422,
											"end": 20814,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20422,
											"end": 20814,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20422,
											"end": 20814,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 20422,
											"end": 20814,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 20820,
											"end": 21000,
											"name": "tag",
											"source": 8,
											"value": "251"
										},
										{
											"begin": 20820,
											"end": 21000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 20868,
											"end": 20945,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 20865,
											"end": 20866,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20858,
											"end": 20946,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 20965,
											"end": 20969,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 20962,
											"end": 20963,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 20955,
											"end": 20970,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 20989,
											"end": 20993,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 20986,
											"end": 20987,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 20979,
											"end": 20994,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 21006,
											"end": 21239,
											"name": "tag",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 21006,
											"end": 21239,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21045,
											"end": 21048,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21068,
											"end": 21092,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "459"
										},
										{
											"begin": 21086,
											"end": 21091,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21068,
											"end": 21092,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 21068,
											"end": 21092,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21068,
											"end": 21092,
											"name": "tag",
											"source": 8,
											"value": "459"
										},
										{
											"begin": 21068,
											"end": 21092,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21059,
											"end": 21092,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 21059,
											"end": 21092,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21114,
											"end": 21180,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21107,
											"end": 21112,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21104,
											"end": 21181,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 21101,
											"end": 21204,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "460"
										},
										{
											"begin": 21101,
											"end": 21204,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 21184,
											"end": 21202,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "461"
										},
										{
											"begin": 21184,
											"end": 21202,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "251"
										},
										{
											"begin": 21184,
											"end": 21202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21184,
											"end": 21202,
											"name": "tag",
											"source": 8,
											"value": "461"
										},
										{
											"begin": 21184,
											"end": 21202,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21101,
											"end": 21204,
											"name": "tag",
											"source": 8,
											"value": "460"
										},
										{
											"begin": 21101,
											"end": 21204,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21231,
											"end": 21232,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 21224,
											"end": 21229,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21220,
											"end": 21233,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 21213,
											"end": 21233,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 21213,
											"end": 21233,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21006,
											"end": 21239,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 21006,
											"end": 21239,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 21006,
											"end": 21239,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21006,
											"end": 21239,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21245,
											"end": 21425,
											"name": "tag",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 21245,
											"end": 21425,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21293,
											"end": 21370,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21290,
											"end": 21291,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21283,
											"end": 21371,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21390,
											"end": 21394,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 21387,
											"end": 21388,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 21380,
											"end": 21395,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21414,
											"end": 21418,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 21411,
											"end": 21412,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21404,
											"end": 21419,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 21431,
											"end": 21616,
											"name": "tag",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 21431,
											"end": 21616,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21471,
											"end": 21472,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21488,
											"end": 21508,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "464"
										},
										{
											"begin": 21506,
											"end": 21507,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21488,
											"end": 21508,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 21488,
											"end": 21508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21488,
											"end": 21508,
											"name": "tag",
											"source": 8,
											"value": "464"
										},
										{
											"begin": 21488,
											"end": 21508,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21483,
											"end": 21508,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 21483,
											"end": 21508,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21522,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "465"
										},
										{
											"begin": 21540,
											"end": 21541,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 21522,
											"end": 21542,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 21522,
											"end": 21542,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21522,
											"end": 21542,
											"name": "tag",
											"source": 8,
											"value": "465"
										},
										{
											"begin": 21522,
											"end": 21542,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21517,
											"end": 21542,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 21517,
											"end": 21542,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21561,
											"end": 21562,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21551,
											"end": 21586,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "466"
										},
										{
											"begin": 21551,
											"end": 21586,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 21566,
											"end": 21584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "467"
										},
										{
											"begin": 21566,
											"end": 21584,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 21566,
											"end": 21584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21566,
											"end": 21584,
											"name": "tag",
											"source": 8,
											"value": "467"
										},
										{
											"begin": 21566,
											"end": 21584,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21551,
											"end": 21586,
											"name": "tag",
											"source": 8,
											"value": "466"
										},
										{
											"begin": 21551,
											"end": 21586,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21608,
											"end": 21609,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21605,
											"end": 21606,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21601,
											"end": 21610,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 21596,
											"end": 21610,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 21596,
											"end": 21610,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21431,
											"end": 21616,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 21431,
											"end": 21616,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 21431,
											"end": 21616,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21431,
											"end": 21616,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21431,
											"end": 21616,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21622,
											"end": 21802,
											"name": "tag",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 21622,
											"end": 21802,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21670,
											"end": 21747,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21667,
											"end": 21668,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21660,
											"end": 21748,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21767,
											"end": 21771,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 21764,
											"end": 21765,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 21757,
											"end": 21772,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 21791,
											"end": 21795,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 21788,
											"end": 21789,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21781,
											"end": 21796,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 21808,
											"end": 22002,
											"name": "tag",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 21808,
											"end": 22002,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21848,
											"end": 21852,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 21868,
											"end": 21888,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "470"
										},
										{
											"begin": 21886,
											"end": 21887,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21868,
											"end": 21888,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 21868,
											"end": 21888,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21868,
											"end": 21888,
											"name": "tag",
											"source": 8,
											"value": "470"
										},
										{
											"begin": 21868,
											"end": 21888,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21863,
											"end": 21888,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 21863,
											"end": 21888,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21902,
											"end": 21922,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "471"
										},
										{
											"begin": 21920,
											"end": 21921,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 21902,
											"end": 21922,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 21902,
											"end": 21922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21902,
											"end": 21922,
											"name": "tag",
											"source": 8,
											"value": "471"
										},
										{
											"begin": 21902,
											"end": 21922,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21897,
											"end": 21922,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 21897,
											"end": 21922,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21946,
											"end": 21947,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21943,
											"end": 21944,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 21939,
											"end": 21948,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 21931,
											"end": 21948,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 21931,
											"end": 21948,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21970,
											"end": 21971,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 21964,
											"end": 21968,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 21961,
											"end": 21972,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 21958,
											"end": 21995,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 21958,
											"end": 21995,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "472"
										},
										{
											"begin": 21958,
											"end": 21995,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 21975,
											"end": 21993,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "473"
										},
										{
											"begin": 21975,
											"end": 21993,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "251"
										},
										{
											"begin": 21975,
											"end": 21993,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 21975,
											"end": 21993,
											"name": "tag",
											"source": 8,
											"value": "473"
										},
										{
											"begin": 21975,
											"end": 21993,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21958,
											"end": 21995,
											"name": "tag",
											"source": 8,
											"value": "472"
										},
										{
											"begin": 21958,
											"end": 21995,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 21808,
											"end": 22002,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 21808,
											"end": 22002,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 21808,
											"end": 22002,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21808,
											"end": 22002,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 21808,
											"end": 22002,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22008,
											"end": 22356,
											"name": "tag",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 22008,
											"end": 22356,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22048,
											"end": 22055,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22071,
											"end": 22091,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "475"
										},
										{
											"begin": 22089,
											"end": 22090,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22071,
											"end": 22091,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 22071,
											"end": 22091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22071,
											"end": 22091,
											"name": "tag",
											"source": 8,
											"value": "475"
										},
										{
											"begin": 22071,
											"end": 22091,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22066,
											"end": 22091,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 22066,
											"end": 22091,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22105,
											"end": 22125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "476"
										},
										{
											"begin": 22123,
											"end": 22124,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 22105,
											"end": 22125,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 22105,
											"end": 22125,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22105,
											"end": 22125,
											"name": "tag",
											"source": 8,
											"value": "476"
										},
										{
											"begin": 22105,
											"end": 22125,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22100,
											"end": 22125,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 22100,
											"end": 22125,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22293,
											"end": 22294,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 22225,
											"end": 22291,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 22221,
											"end": 22295,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 22218,
											"end": 22219,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 22215,
											"end": 22296,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 22210,
											"end": 22211,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22203,
											"end": 22212,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 22196,
											"end": 22213,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 22192,
											"end": 22297,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 22189,
											"end": 22320,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 22189,
											"end": 22320,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "477"
										},
										{
											"begin": 22189,
											"end": 22320,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 22300,
											"end": 22318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "478"
										},
										{
											"begin": 22300,
											"end": 22318,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "251"
										},
										{
											"begin": 22300,
											"end": 22318,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22300,
											"end": 22318,
											"name": "tag",
											"source": 8,
											"value": "478"
										},
										{
											"begin": 22300,
											"end": 22318,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22189,
											"end": 22320,
											"name": "tag",
											"source": 8,
											"value": "477"
										},
										{
											"begin": 22189,
											"end": 22320,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22348,
											"end": 22349,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22345,
											"end": 22346,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22341,
											"end": 22350,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 22330,
											"end": 22350,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 22330,
											"end": 22350,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22008,
											"end": 22356,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 22008,
											"end": 22356,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 22008,
											"end": 22356,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22008,
											"end": 22356,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22008,
											"end": 22356,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22362,
											"end": 22448,
											"name": "tag",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 22362,
											"end": 22448,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22397,
											"end": 22404,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22437,
											"end": 22441,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 22430,
											"end": 22435,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22426,
											"end": 22442,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 22415,
											"end": 22442,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 22415,
											"end": 22442,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22362,
											"end": 22448,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 22362,
											"end": 22448,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 22362,
											"end": 22448,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22362,
											"end": 22448,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22454,
											"end": 22642,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 22454,
											"end": 22642,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22492,
											"end": 22495,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22511,
											"end": 22529,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "481"
										},
										{
											"begin": 22527,
											"end": 22528,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22511,
											"end": 22529,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 22511,
											"end": 22529,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22511,
											"end": 22529,
											"name": "tag",
											"source": 8,
											"value": "481"
										},
										{
											"begin": 22511,
											"end": 22529,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22506,
											"end": 22529,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 22506,
											"end": 22529,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22543,
											"end": 22561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "482"
										},
										{
											"begin": 22559,
											"end": 22560,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 22543,
											"end": 22561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 22543,
											"end": 22561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22543,
											"end": 22561,
											"name": "tag",
											"source": 8,
											"value": "482"
										},
										{
											"begin": 22543,
											"end": 22561,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22538,
											"end": 22561,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 22538,
											"end": 22561,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22584,
											"end": 22585,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22581,
											"end": 22582,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 22577,
											"end": 22586,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 22570,
											"end": 22586,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 22570,
											"end": 22586,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22607,
											"end": 22611,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 22602,
											"end": 22605,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 22599,
											"end": 22612,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 22596,
											"end": 22635,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 22596,
											"end": 22635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "483"
										},
										{
											"begin": 22596,
											"end": 22635,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 22615,
											"end": 22633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "484"
										},
										{
											"begin": 22615,
											"end": 22633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "251"
										},
										{
											"begin": 22615,
											"end": 22633,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22615,
											"end": 22633,
											"name": "tag",
											"source": 8,
											"value": "484"
										},
										{
											"begin": 22615,
											"end": 22633,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22596,
											"end": 22635,
											"name": "tag",
											"source": 8,
											"value": "483"
										},
										{
											"begin": 22596,
											"end": 22635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22454,
											"end": 22642,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 22454,
											"end": 22642,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 22454,
											"end": 22642,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22454,
											"end": 22642,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22454,
											"end": 22642,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22648,
											"end": 22828,
											"name": "tag",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 22648,
											"end": 22828,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22696,
											"end": 22773,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 22693,
											"end": 22694,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22686,
											"end": 22774,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22793,
											"end": 22797,
											"name": "PUSH",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 22790,
											"end": 22791,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 22783,
											"end": 22798,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 22817,
											"end": 22821,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 22814,
											"end": 22815,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22807,
											"end": 22822,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 22834,
											"end": 22971,
											"name": "tag",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 22834,
											"end": 22971,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22888,
											"end": 22893,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 22919,
											"end": 22925,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 22913,
											"end": 22926,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 22904,
											"end": 22926,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 22904,
											"end": 22926,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22935,
											"end": 22965,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "487"
										},
										{
											"begin": 22959,
											"end": 22964,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 22935,
											"end": 22965,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 22935,
											"end": 22965,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22935,
											"end": 22965,
											"name": "tag",
											"source": 8,
											"value": "487"
										},
										{
											"begin": 22935,
											"end": 22965,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 22834,
											"end": 22971,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 22834,
											"end": 22971,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 22834,
											"end": 22971,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22834,
											"end": 22971,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22834,
											"end": 22971,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 22977,
											"end": 23322,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 22977,
											"end": 23322,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23044,
											"end": 23050,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23093,
											"end": 23095,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 23081,
											"end": 23090,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23072,
											"end": 23079,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 23068,
											"end": 23091,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 23064,
											"end": 23096,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 23061,
											"end": 23180,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 23061,
											"end": 23180,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "489"
										},
										{
											"begin": 23061,
											"end": 23180,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 23099,
											"end": 23178,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "490"
										},
										{
											"begin": 23099,
											"end": 23178,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 23099,
											"end": 23178,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 23099,
											"end": 23178,
											"name": "tag",
											"source": 8,
											"value": "490"
										},
										{
											"begin": 23099,
											"end": 23178,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23061,
											"end": 23180,
											"name": "tag",
											"source": 8,
											"value": "489"
										},
										{
											"begin": 23061,
											"end": 23180,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23219,
											"end": 23220,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23244,
											"end": 23305,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "491"
										},
										{
											"begin": 23297,
											"end": 23304,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 23288,
											"end": 23294,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23277,
											"end": 23286,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 23273,
											"end": 23295,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23244,
											"end": 23305,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 23244,
											"end": 23305,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 23244,
											"end": 23305,
											"name": "tag",
											"source": 8,
											"value": "491"
										},
										{
											"begin": 23244,
											"end": 23305,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23234,
											"end": 23305,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 23234,
											"end": 23305,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23190,
											"end": 23315,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22977,
											"end": 23322,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 22977,
											"end": 23322,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 22977,
											"end": 23322,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22977,
											"end": 23322,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 22977,
											"end": 23322,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 23328,
											"end": 23557,
											"name": "tag",
											"source": 8,
											"value": "254"
										},
										{
											"begin": 23328,
											"end": 23557,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23468,
											"end": 23502,
											"name": "PUSH",
											"source": 8,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 23464,
											"end": 23465,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23456,
											"end": 23462,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23452,
											"end": 23466,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23445,
											"end": 23503,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 23537,
											"end": 23549,
											"name": "PUSH",
											"source": 8,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 23532,
											"end": 23534,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 23524,
											"end": 23530,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23520,
											"end": 23535,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23513,
											"end": 23550,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 23328,
											"end": 23557,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23328,
											"end": 23557,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 23563,
											"end": 23929,
											"name": "tag",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 23563,
											"end": 23929,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23705,
											"end": 23708,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 23726,
											"end": 23793,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "494"
										},
										{
											"begin": 23790,
											"end": 23792,
											"name": "PUSH",
											"source": 8,
											"value": "2A"
										},
										{
											"begin": 23785,
											"end": 23788,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 23726,
											"end": 23793,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 23726,
											"end": 23793,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 23726,
											"end": 23793,
											"name": "tag",
											"source": 8,
											"value": "494"
										},
										{
											"begin": 23726,
											"end": 23793,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23719,
											"end": 23793,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 23719,
											"end": 23793,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23802,
											"end": 23895,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "495"
										},
										{
											"begin": 23891,
											"end": 23894,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23802,
											"end": 23895,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "254"
										},
										{
											"begin": 23802,
											"end": 23895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 23802,
											"end": 23895,
											"name": "tag",
											"source": 8,
											"value": "495"
										},
										{
											"begin": 23802,
											"end": 23895,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 23920,
											"end": 23922,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 23915,
											"end": 23918,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 23911,
											"end": 23923,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 23904,
											"end": 23923,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 23904,
											"end": 23923,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23563,
											"end": 23929,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 23563,
											"end": 23929,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 23563,
											"end": 23929,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23563,
											"end": 23929,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 23935,
											"end": 24354,
											"name": "tag",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 23935,
											"end": 24354,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24101,
											"end": 24105,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 24139,
											"end": 24141,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 24128,
											"end": 24137,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 24124,
											"end": 24142,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 24116,
											"end": 24142,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 24116,
											"end": 24142,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24188,
											"end": 24197,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24182,
											"end": 24186,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24178,
											"end": 24198,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 24174,
											"end": 24175,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 24163,
											"end": 24172,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 24159,
											"end": 24176,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 24152,
											"end": 24199,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 24216,
											"end": 24347,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "497"
										},
										{
											"begin": 24342,
											"end": 24346,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 24216,
											"end": 24347,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 24216,
											"end": 24347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 24216,
											"end": 24347,
											"name": "tag",
											"source": 8,
											"value": "497"
										},
										{
											"begin": 24216,
											"end": 24347,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24208,
											"end": 24347,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 24208,
											"end": 24347,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23935,
											"end": 24354,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 23935,
											"end": 24354,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 23935,
											"end": 24354,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 23935,
											"end": 24354,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 24360,
											"end": 24585,
											"name": "tag",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 24360,
											"end": 24585,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24500,
											"end": 24534,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 24496,
											"end": 24497,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 24488,
											"end": 24494,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 24484,
											"end": 24498,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 24477,
											"end": 24535,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 24569,
											"end": 24577,
											"name": "PUSH",
											"source": 8,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 24564,
											"end": 24566,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 24556,
											"end": 24562,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 24552,
											"end": 24567,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 24545,
											"end": 24578,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 24360,
											"end": 24585,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24360,
											"end": 24585,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 24591,
											"end": 24957,
											"name": "tag",
											"source": 8,
											"value": "257"
										},
										{
											"begin": 24591,
											"end": 24957,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24733,
											"end": 24736,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 24754,
											"end": 24821,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "500"
										},
										{
											"begin": 24818,
											"end": 24820,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 24813,
											"end": 24816,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 24754,
											"end": 24821,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 24754,
											"end": 24821,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 24754,
											"end": 24821,
											"name": "tag",
											"source": 8,
											"value": "500"
										},
										{
											"begin": 24754,
											"end": 24821,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24747,
											"end": 24821,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 24747,
											"end": 24821,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24830,
											"end": 24923,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "501"
										},
										{
											"begin": 24919,
											"end": 24922,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 24830,
											"end": 24923,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 24830,
											"end": 24923,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 24830,
											"end": 24923,
											"name": "tag",
											"source": 8,
											"value": "501"
										},
										{
											"begin": 24830,
											"end": 24923,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 24948,
											"end": 24950,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 24943,
											"end": 24946,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 24939,
											"end": 24951,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 24932,
											"end": 24951,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 24932,
											"end": 24951,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24591,
											"end": 24957,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 24591,
											"end": 24957,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 24591,
											"end": 24957,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24591,
											"end": 24957,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 24963,
											"end": 25382,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 24963,
											"end": 25382,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 25129,
											"end": 25133,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 25167,
											"end": 25169,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 25156,
											"end": 25165,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 25152,
											"end": 25170,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 25144,
											"end": 25170,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 25144,
											"end": 25170,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 25216,
											"end": 25225,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 25210,
											"end": 25214,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 25206,
											"end": 25226,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 25202,
											"end": 25203,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 25191,
											"end": 25200,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 25187,
											"end": 25204,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 25180,
											"end": 25227,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 25244,
											"end": 25375,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "503"
										},
										{
											"begin": 25370,
											"end": 25374,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 25244,
											"end": 25375,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "257"
										},
										{
											"begin": 25244,
											"end": 25375,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 25244,
											"end": 25375,
											"name": "tag",
											"source": 8,
											"value": "503"
										},
										{
											"begin": 25244,
											"end": 25375,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 25236,
											"end": 25375,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 25236,
											"end": 25375,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24963,
											"end": 25382,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 24963,
											"end": 25382,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 24963,
											"end": 25382,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 24963,
											"end": 25382,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 25388,
											"end": 25659,
											"name": "tag",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 25388,
											"end": 25659,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 25518,
											"end": 25521,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 25540,
											"end": 25633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "505"
										},
										{
											"begin": 25629,
											"end": 25632,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 25620,
											"end": 25626,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 25540,
											"end": 25633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 25540,
											"end": 25633,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 25540,
											"end": 25633,
											"name": "tag",
											"source": 8,
											"value": "505"
										},
										{
											"begin": 25540,
											"end": 25633,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 25533,
											"end": 25633,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 25533,
											"end": 25633,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 25650,
											"end": 25653,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 25643,
											"end": 25653,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 25643,
											"end": 25653,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 25388,
											"end": 25659,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 25388,
											"end": 25659,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 25388,
											"end": 25659,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 25388,
											"end": 25659,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 25388,
											"end": 25659,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 25665,
											"end": 25844,
											"name": "tag",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 25665,
											"end": 25844,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 25805,
											"end": 25836,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 25801,
											"end": 25802,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 25793,
											"end": 25799,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 25789,
											"end": 25803,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 25782,
											"end": 25837,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 25665,
											"end": 25844,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 25665,
											"end": 25844,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 25850,
											"end": 26216,
											"name": "tag",
											"source": 8,
											"value": "259"
										},
										{
											"begin": 25850,
											"end": 26216,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 25992,
											"end": 25995,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 26013,
											"end": 26080,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "508"
										},
										{
											"begin": 26077,
											"end": 26079,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 26072,
											"end": 26075,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 26013,
											"end": 26080,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 26013,
											"end": 26080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 26013,
											"end": 26080,
											"name": "tag",
											"source": 8,
											"value": "508"
										},
										{
											"begin": 26013,
											"end": 26080,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 26006,
											"end": 26080,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 26006,
											"end": 26080,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26089,
											"end": 26182,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "509"
										},
										{
											"begin": 26178,
											"end": 26181,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 26089,
											"end": 26182,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 26089,
											"end": 26182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 26089,
											"end": 26182,
											"name": "tag",
											"source": 8,
											"value": "509"
										},
										{
											"begin": 26089,
											"end": 26182,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 26207,
											"end": 26209,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 26202,
											"end": 26205,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 26198,
											"end": 26210,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 26191,
											"end": 26210,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 26191,
											"end": 26210,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 25850,
											"end": 26216,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 25850,
											"end": 26216,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 25850,
											"end": 26216,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 25850,
											"end": 26216,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 26222,
											"end": 26641,
											"name": "tag",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 26222,
											"end": 26641,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 26388,
											"end": 26392,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 26426,
											"end": 26428,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 26415,
											"end": 26424,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 26411,
											"end": 26429,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 26403,
											"end": 26429,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 26403,
											"end": 26429,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26475,
											"end": 26484,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 26469,
											"end": 26473,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 26465,
											"end": 26485,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 26461,
											"end": 26462,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 26450,
											"end": 26459,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 26446,
											"end": 26463,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 26439,
											"end": 26486,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 26503,
											"end": 26634,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "511"
										},
										{
											"begin": 26629,
											"end": 26633,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 26503,
											"end": 26634,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "259"
										},
										{
											"begin": 26503,
											"end": 26634,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 26503,
											"end": 26634,
											"name": "tag",
											"source": 8,
											"value": "511"
										},
										{
											"begin": 26503,
											"end": 26634,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 26495,
											"end": 26634,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 26495,
											"end": 26634,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26222,
											"end": 26641,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 26222,
											"end": 26641,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 26222,
											"end": 26641,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26222,
											"end": 26641,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 26647,
											"end": 26746,
											"name": "tag",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 26647,
											"end": 26746,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 26699,
											"end": 26705,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 26733,
											"end": 26738,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 26727,
											"end": 26739,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 26717,
											"end": 26739,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 26717,
											"end": 26739,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26647,
											"end": 26746,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 26647,
											"end": 26746,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 26647,
											"end": 26746,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26647,
											"end": 26746,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 26752,
											"end": 27129,
											"name": "tag",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 26752,
											"end": 27129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 26840,
											"end": 26843,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 26868,
											"end": 26907,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "514"
										},
										{
											"begin": 26901,
											"end": 26906,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 26868,
											"end": 26907,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 26868,
											"end": 26907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 26868,
											"end": 26907,
											"name": "tag",
											"source": 8,
											"value": "514"
										},
										{
											"begin": 26868,
											"end": 26907,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 26923,
											"end": 26994,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "515"
										},
										{
											"begin": 26987,
											"end": 26993,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 26982,
											"end": 26985,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 26923,
											"end": 26994,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 26923,
											"end": 26994,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 26923,
											"end": 26994,
											"name": "tag",
											"source": 8,
											"value": "515"
										},
										{
											"begin": 26923,
											"end": 26994,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 26916,
											"end": 26994,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 26916,
											"end": 26994,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 27003,
											"end": 27068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "516"
										},
										{
											"begin": 27061,
											"end": 27067,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 27056,
											"end": 27059,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 27049,
											"end": 27053,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 27042,
											"end": 27047,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 27038,
											"end": 27054,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 27003,
											"end": 27068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 27003,
											"end": 27068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 27003,
											"end": 27068,
											"name": "tag",
											"source": 8,
											"value": "516"
										},
										{
											"begin": 27003,
											"end": 27068,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 27093,
											"end": 27122,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "517"
										},
										{
											"begin": 27115,
											"end": 27121,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 27093,
											"end": 27122,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 27093,
											"end": 27122,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 27093,
											"end": 27122,
											"name": "tag",
											"source": 8,
											"value": "517"
										},
										{
											"begin": 27093,
											"end": 27122,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 27088,
											"end": 27091,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 27084,
											"end": 27123,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 27077,
											"end": 27123,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 27077,
											"end": 27123,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26844,
											"end": 27129,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26752,
											"end": 27129,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 26752,
											"end": 27129,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 26752,
											"end": 27129,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26752,
											"end": 27129,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 26752,
											"end": 27129,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 27135,
											"end": 27448,
											"name": "tag",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 27135,
											"end": 27448,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 27248,
											"end": 27252,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 27286,
											"end": 27288,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 27275,
											"end": 27284,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 27271,
											"end": 27289,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 27263,
											"end": 27289,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 27263,
											"end": 27289,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 27335,
											"end": 27344,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 27329,
											"end": 27333,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 27325,
											"end": 27345,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 27321,
											"end": 27322,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 27310,
											"end": 27319,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 27306,
											"end": 27323,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 27299,
											"end": 27346,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 27363,
											"end": 27441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "519"
										},
										{
											"begin": 27436,
											"end": 27440,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 27427,
											"end": 27433,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 27363,
											"end": 27441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 27363,
											"end": 27441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 27363,
											"end": 27441,
											"name": "tag",
											"source": 8,
											"value": "519"
										},
										{
											"begin": 27363,
											"end": 27441,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 27355,
											"end": 27441,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 27355,
											"end": 27441,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 27135,
											"end": 27448,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 27135,
											"end": 27448,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 27135,
											"end": 27448,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 27135,
											"end": 27448,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 27135,
											"end": 27448,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@uma/core/contracts/common/implementation/AncillaryData.sol",
								"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
								"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
								"src/DataAsserter.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"assertDataFor(bytes32,bytes32,address)": "93ee663b",
							"assertionDisputedCallback(bytes32)": "d448a4ec",
							"assertionLiveness()": "b75d4e24",
							"assertionResolvedCallback(bytes32,bool)": "f1b156b2",
							"assertionsData(bytes32)": "b33893da",
							"defaultCurrency()": "20402e1d",
							"defaultIdentifier()": "d509b017",
							"getData(bytes32)": "54f6127f",
							"oo()": "8921a614"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optimisticOracleV3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"DataAsserted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"DataAssertionResolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"}],\"name\":\"assertDataFor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"assertionDisputedCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assertionLiveness\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"assertedTruthfully\",\"type\":\"bool\"}],\"name\":\"assertionResolvedCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"assertionsData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oo\",\"outputs\":[{\"internalType\":\"contract OptimisticOracleV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DataAsserter.sol\":\"DataAsserter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc5b5dc12fbc4002f282eaa7a5f06d8310ed62c1c77c5770f6283e058454c39a\",\"dweb:/ipfs/Qme9rE2wS3yBuyJq9GgbmzbsBQsW2M2sVFqYYLw7bosGrv\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://656cda26512ddd7373c2d5551c8fae759fc30f05b10f0fc2e738e9274199dbd4\",\"dweb:/ipfs/QmTSArSzQRFbQmHgq7U1PZXnsDFhvDZhKVu9CzMG4yo6Lx\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"@uma/core/contracts/common/implementation/AncillaryData.sol\":{\"keccak256\":\"0x8ff33ac32d3e6de25de9e0ac2c0ff9a621f187fa97e9ee84092b327471baa3ce\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0bbaed49756e8cf7ef405e132f441cd7a735ac6186a200b0179147e7d137b74a\",\"dweb:/ipfs/QmeSBJX5a61LZPxbkUKS2NF4LSxemgDwjD65fCAmyP7PX2\"]},\"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol\":{\"keccak256\":\"0xf8427cb144e47a47625df27e5182bd8f3774becf23d67fd16e51599bd1386bc5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://63d4212d86dfc755e5eead59e05038aaf889be3e9daee9fd9a8070825c7b8b8f\",\"dweb:/ipfs/QmQ87qqtqhSQdfdEjT3wPGSitQ9uPoyYToVu9WTECqYsQP\"]},\"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\":{\"keccak256\":\"0x06c16f033cb100a20286b0f9c866a33a227a9e534544d5da6e5e20103d182d00\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://a354805eab907d5e9e7910f66ef5c5c5594bb5144a77541d6d30c6cb3cbd6871\",\"dweb:/ipfs/QmTfUDPJrsuUQ2aPwsbQwTaSvjUzBQFvFxXtmscZFymM4X\"]},\"src/DataAsserter.sol\":{\"keccak256\":\"0x35e8d564ea6f622658bf2cfc66ad4e76db991d4211771c0b342321a01af23450\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://7ba616f349870057d19fd7c2a76ec312d882db29f538d87b99d0755391bfc3f5\",\"dweb:/ipfs/QmbdxHvLw3KVoX3zVvmbjDAKmPXhsB6RgoPqeHv1JfuXU6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1455,
								"contract": "src/DataAsserter.sol:DataAsserter",
								"label": "assertionsData",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(DataAssertion)1450_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_bytes32,t_struct(DataAssertion)1450_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct DataAsserter.DataAssertion)",
								"numberOfBytes": "32",
								"value": "t_struct(DataAssertion)1450_storage"
							},
							"t_struct(DataAssertion)1450_storage": {
								"encoding": "inplace",
								"label": "struct DataAsserter.DataAssertion",
								"members": [
									{
										"astId": 1443,
										"contract": "src/DataAsserter.sol:DataAsserter",
										"label": "dataId",
										"offset": 0,
										"slot": "0",
										"type": "t_bytes32"
									},
									{
										"astId": 1445,
										"contract": "src/DataAsserter.sol:DataAsserter",
										"label": "data",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									},
									{
										"astId": 1447,
										"contract": "src/DataAsserter.sol:DataAsserter",
										"label": "asserter",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 1449,
										"contract": "src/DataAsserter.sol:DataAsserter",
										"label": "resolved",
										"offset": 20,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2676:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2668:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2690:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2682:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2702:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2694:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:42:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2728:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2728:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2727:6:0"
									},
									"scope": 77,
									"src": "2646:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2534:0",
							"usedErrors": []
						}
					],
					"src": "106:2631:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							113
						]
					},
					"id": 114,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "123:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 80,
								"nodeType": "StructuredDocumentation",
								"src": "148:480:1",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 113,
							"linearizedBaseContracts": [
								113
							],
							"name": "IERC20Permit",
							"nameLocation": "639:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "658:792:1",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 98,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1464:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1488:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1480:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1480:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1511:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1503:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1503:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1536:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1528:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 86,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1559:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1551:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 88,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1551:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1583:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1577:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 90,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1577:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1602:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1594:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 92,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1594:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1621:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1613:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1470:158:1"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1637:0:1"
									},
									"scope": 113,
									"src": "1455:183:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "1644:294:1",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1952:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1967:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "1959:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1959:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1958:15:1"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "1997:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:9:1"
									},
									"scope": 113,
									"src": "1943:63:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "2012:128:1",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2207:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2223:2:1"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2249:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2249:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2248:9:1"
									},
									"scope": 113,
									"src": "2198:60:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 114,
							"src": "629:1631:1",
							"usedErrors": []
						}
					],
					"src": "123:2138:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							819
						],
						"IERC20": [
							77
						],
						"IERC20Permit": [
							113
						],
						"SafeERC20": [
							489
						]
					},
					"id": 490,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 115,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 116,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 490,
							"sourceUnit": 78,
							"src": "140:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 117,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 490,
							"sourceUnit": 114,
							"src": "164:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 118,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 490,
							"sourceUnit": 820,
							"src": "205:36:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 119,
								"nodeType": "StructuredDocumentation",
								"src": "243:457:2",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 489,
							"linearizedBaseContracts": [
								489
							],
							"name": "SafeERC20",
							"nameLocation": "709:9:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 122,
									"libraryName": {
										"id": 120,
										"name": "Address",
										"nameLocations": [
											"731:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 819,
										"src": "731:7:2"
									},
									"nodeType": "UsingForDirective",
									"src": "725:26:2",
									"typeName": {
										"id": 121,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "743:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "1013:103:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 134,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 126,
															"src": "1043:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 137,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 126,
																			"src": "1073:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1079:8:2",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 44,
																		"src": "1073:14:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 139,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1088:8:2",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1073:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 140,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "1098:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 141,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "1102:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 135,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1050:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 136,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1054:18:2",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1050:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 142,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1050:58:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 133,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "1023:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1023:86:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "ExpressionStatement",
												"src": "1023:86:2"
											}
										]
									},
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "757:179:2",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "950:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "970:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "963:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 125,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 124,
														"name": "IERC20",
														"nameLocations": [
															"963:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "963:6:2"
													},
													"referencedDeclaration": 77,
													"src": "963:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "985:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "977:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "977:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "997:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "989:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "989:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "962:41:2"
									},
									"returnParameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:0:2"
									},
									"scope": 489,
									"src": "941:175:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 172,
										"nodeType": "Block",
										"src": "1445:113:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 160,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 150,
															"src": "1475:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 163,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 150,
																			"src": "1505:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 164,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1511:12:2",
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 76,
																		"src": "1505:18:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 165,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1524:8:2",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1505:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 166,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 152,
																	"src": "1534:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 167,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 154,
																	"src": "1540:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 168,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 156,
																	"src": "1544:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 161,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1482:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 162,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1486:18:2",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1482:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1482:68:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 159,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "1455:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1455:96:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 171,
												"nodeType": "ExpressionStatement",
												"src": "1455:96:2"
											}
										]
									},
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "1122:228:2",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1364:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1388:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1381:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 149,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 148,
														"name": "IERC20",
														"nameLocations": [
															"1381:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1381:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1381:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1403:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1395:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1395:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1417:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1409:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1409:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1429:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1421:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1421:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1380:55:2"
									},
									"returnParameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1445:0:2"
									},
									"scope": 489,
									"src": "1355:203:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 216,
										"nodeType": "Block",
										"src": "1894:497:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 185,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 181,
																			"src": "2143:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2152:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2143:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 188,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2142:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 198,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 193,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "2183:4:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$489",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$489",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 192,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2175:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 191,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "2175:7:2",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 194,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2175:13:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 195,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 179,
																					"src": "2190:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 189,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 177,
																					"src": "2159:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$77",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 190,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2165:9:2",
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 54,
																				"src": "2159:15:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 196,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2159:39:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 197,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2202:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2159:44:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 199,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2158:46:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2142:62:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 201,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2218:56:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 184,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2121:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2121:163:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 203,
												"nodeType": "ExpressionStatement",
												"src": "2121:163:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 205,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "2314:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 208,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 177,
																			"src": "2344:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 209,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2350:7:2",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2344:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2358:8:2",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2344:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 211,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "2368:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 212,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 181,
																	"src": "2377:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 206,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2321:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2325:18:2",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2321:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2321:62:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 204,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "2294:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2294:90:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 215,
												"nodeType": "ExpressionStatement",
												"src": "2294:90:2"
											}
										]
									},
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "1564:249:2",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 217,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1827:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1846:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1839:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 176,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 175,
														"name": "IERC20",
														"nameLocations": [
															"1839:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1839:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1839:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1861:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1853:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1853:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1878:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1870:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1870:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:46:2"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1894:0:2"
									},
									"scope": 489,
									"src": "1818:573:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 253,
										"nodeType": "Block",
										"src": "2668:194:2",
										"statements": [
											{
												"assignments": [
													229
												],
												"declarations": [
													{
														"constant": false,
														"id": 229,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2686:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 253,
														"src": "2678:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 228,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2678:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 238,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 234,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2725:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$489",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$489",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 233,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2717:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 232,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2717:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2717:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 236,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "2732:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 230,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 221,
															"src": "2701:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 231,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2707:9:2",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 54,
														"src": "2701:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2701:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2678:62:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 240,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 221,
															"src": "2770:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 243,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 221,
																			"src": "2800:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 244,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2806:7:2",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2800:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 245,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2814:8:2",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2800:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 246,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 223,
																	"src": "2824:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 249,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 247,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 229,
																		"src": "2833:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 248,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 225,
																		"src": "2848:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2833:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 241,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2777:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 242,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2781:18:2",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2777:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2777:77:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 239,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "2750:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2750:105:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 252,
												"nodeType": "ExpressionStatement",
												"src": "2750:105:2"
											}
										]
									},
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "2397:180:2",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2591:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2620:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "2613:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 220,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 219,
														"name": "IERC20",
														"nameLocations": [
															"2613:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2613:6:2"
													},
													"referencedDeclaration": 77,
													"src": "2613:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2635:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "2627:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2627:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2652:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "2644:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:46:2"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2668:0:2"
									},
									"scope": 489,
									"src": "2582:280:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "3139:321:2",
										"statements": [
											{
												"id": 297,
												"nodeType": "UncheckedBlock",
												"src": "3149:305:2",
												"statements": [
													{
														"assignments": [
															266
														],
														"declarations": [
															{
																"constant": false,
																"id": 266,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "3181:12:2",
																"nodeType": "VariableDeclaration",
																"scope": 297,
																"src": "3173:20:2",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 265,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3173:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 275,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 271,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3220:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$489",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$489",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3212:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 269,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3212:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3212:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 273,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "3227:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "3196:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3202:9:2",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 54,
																"src": "3196:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3196:39:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3173:62:2"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 279,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 277,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 266,
																		"src": "3257:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 278,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 262,
																		"src": "3273:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3257:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3280:43:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 276,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "3249:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3249:75:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 282,
														"nodeType": "ExpressionStatement",
														"src": "3249:75:2"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 284,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "3358:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 287,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 258,
																					"src": "3388:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$77",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 288,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3394:7:2",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 64,
																				"src": "3388:13:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3402:8:2",
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "3388:22:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 290,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 260,
																			"src": "3412:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 291,
																				"name": "oldAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 266,
																				"src": "3421:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 292,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 262,
																				"src": "3436:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3421:20:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 285,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "3365:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 286,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "3369:18:2",
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "3365:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3365:77:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 283,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 440,
																"src": "3338:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3338:105:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 296,
														"nodeType": "ExpressionStatement",
														"src": "3338:105:2"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "2868:180:2",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3062:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3091:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3084:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 257,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 256,
														"name": "IERC20",
														"nameLocations": [
															"3084:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "3084:6:2"
													},
													"referencedDeclaration": 77,
													"src": "3084:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3106:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3098:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3098:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3123:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3115:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3115:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3083:46:2"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3139:0:2"
									},
									"scope": 489,
									"src": "3053:407:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "3833:333:2",
										"statements": [
											{
												"assignments": [
													311
												],
												"declarations": [
													{
														"constant": false,
														"id": 311,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3856:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 345,
														"src": "3843:25:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 310,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3843:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 320,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 314,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 303,
																	"src": "3894:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 315,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3900:7:2",
																"memberName": "approve",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 64,
																"src": "3894:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 316,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3908:8:2",
															"memberName": "selector",
															"nodeType": "MemberAccess",
															"src": "3894:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"id": 317,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "3918:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 318,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "3927:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 312,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3871:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 313,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3875:18:2",
														"memberName": "encodeWithSelector",
														"nodeType": "MemberAccess",
														"src": "3871:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes4) pure returns (bytes memory)"
														}
													},
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3871:62:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3843:90:2"
											},
											{
												"condition": {
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3948:45:2",
													"subExpression": {
														"arguments": [
															{
																"id": 322,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 303,
																"src": "3973:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 323,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 311,
																"src": "3980:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 321,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "3949:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 324,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3949:44:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 344,
												"nodeType": "IfStatement",
												"src": "3944:216:2",
												"trueBody": {
													"id": 343,
													"nodeType": "Block",
													"src": "3995:165:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 327,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 303,
																		"src": "4029:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"expression": {
																						"id": 330,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 303,
																						"src": "4059:5:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$77",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 331,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "4065:7:2",
																					"memberName": "approve",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 64,
																					"src": "4059:13:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 332,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4073:8:2",
																				"memberName": "selector",
																				"nodeType": "MemberAccess",
																				"src": "4059:22:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				}
																			},
																			{
																				"id": 333,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 305,
																				"src": "4083:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"hexValue": "30",
																				"id": 334,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4092:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"expression": {
																				"id": 328,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4036:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 329,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4040:18:2",
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "4036:22:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 335,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4036:58:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 326,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "4009:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 336,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4009:86:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 337,
															"nodeType": "ExpressionStatement",
															"src": "4009:86:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 339,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 303,
																		"src": "4129:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 340,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 311,
																		"src": "4136:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 338,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "4109:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4109:40:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 342,
															"nodeType": "ExpressionStatement",
															"src": "4109:40:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 300,
										"nodeType": "StructuredDocumentation",
										"src": "3466:285:2",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n 0 before setting it to a non-zero value."
									},
									"id": 346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3765:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3785:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "3778:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 302,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 301,
														"name": "IERC20",
														"nameLocations": [
															"3778:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "3778:6:2"
													},
													"referencedDeclaration": 77,
													"src": "3778:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3800:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "3792:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3792:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3817:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "3809:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3809:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3777:46:2"
									},
									"returnParameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3833:0:2"
									},
									"scope": 489,
									"src": "3756:410:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 402,
										"nodeType": "Block",
										"src": "4533:257:2",
										"statements": [
											{
												"assignments": [
													368
												],
												"declarations": [
													{
														"constant": false,
														"id": 368,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "4551:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 402,
														"src": "4543:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 367,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4543:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 373,
												"initialValue": {
													"arguments": [
														{
															"id": 371,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "4578:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 369,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 350,
															"src": "4565:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 370,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4571:6:2",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 106,
														"src": "4565:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4565:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4543:41:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 377,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "4607:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 378,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 354,
															"src": "4614:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 379,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "4623:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 380,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "4630:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 381,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 360,
															"src": "4640:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 382,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "4643:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 383,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "4646:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 374,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 350,
															"src": "4594:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4600:6:2",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 98,
														"src": "4594:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4594:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 385,
												"nodeType": "ExpressionStatement",
												"src": "4594:54:2"
											},
											{
												"assignments": [
													387
												],
												"declarations": [
													{
														"constant": false,
														"id": 387,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "4666:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 402,
														"src": "4658:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 386,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4658:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 392,
												"initialValue": {
													"arguments": [
														{
															"id": 390,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "4692:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 388,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 350,
															"src": "4679:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4685:6:2",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 106,
														"src": "4679:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4679:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4658:40:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "4716:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 397,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 395,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 368,
																	"src": "4730:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 396,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4744:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "4730:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4716:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4747:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 393,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4708:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4708:75:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 401,
												"nodeType": "ExpressionStatement",
												"src": "4708:75:2"
											}
										]
									},
									"documentation": {
										"id": 347,
										"nodeType": "StructuredDocumentation",
										"src": "4172:141:2",
										"text": " @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."
									},
									"id": 403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "4327:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4360:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4347:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$113",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 349,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 348,
														"name": "IERC20Permit",
														"nameLocations": [
															"4347:12:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 113,
														"src": "4347:12:2"
													},
													"referencedDeclaration": 113,
													"src": "4347:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$113",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4383:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4375:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4375:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4406:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4398:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4431:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4423:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "4454:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4446:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4446:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "4478:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4472:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 359,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4472:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4497:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4489:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 361,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4489:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "4516:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4508:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 363,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4508:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4337:186:2"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4533:0:2"
									},
									"scope": 489,
									"src": "4318:472:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 439,
										"nodeType": "Block",
										"src": "5243:572:2",
										"statements": [
											{
												"assignments": [
													413
												],
												"declarations": [
													{
														"constant": false,
														"id": 413,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5605:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 439,
														"src": "5592:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 412,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5592:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 422,
												"initialValue": {
													"arguments": [
														{
															"id": 419,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "5646:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 420,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5652:34:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 416,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 407,
																	"src": "5626:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 415,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5618:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 414,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5618:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5618:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 418,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5633:12:2",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 579,
														"src": "5618:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5618:69:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5592:95:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 427,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 424,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "5705:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 425,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5716:6:2",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "5705:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 426,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5726:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5705:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 430,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "5742:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 432,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5755:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				},
																				"typeName": {
																					"id": 431,
																					"name": "bool",
																					"nodeType": "ElementaryTypeName",
																					"src": "5755:4:2",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 433,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5754:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	],
																	"expression": {
																		"id": 428,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5731:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "5735:6:2",
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "5731:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5731:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5705:56:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
															"id": 436,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5763:44:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															},
															"value": "SafeERC20: ERC20 operation did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															}
														],
														"id": 423,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5697:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5697:111:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 438,
												"nodeType": "ExpressionStatement",
												"src": "5697:111:2"
											}
										]
									},
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "4796:372:2",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "5182:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5209:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5202:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 406,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 405,
														"name": "IERC20",
														"nameLocations": [
															"5202:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "5202:6:2"
													},
													"referencedDeclaration": 77,
													"src": "5202:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5229:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5216:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 408,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5216:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5201:33:2"
									},
									"returnParameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5243:0:2"
									},
									"scope": 489,
									"src": "5173:642:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 487,
										"nodeType": "Block",
										"src": "6405:505:2",
										"statements": [
											{
												"assignments": [
													452,
													454
												],
												"declarations": [
													{
														"constant": false,
														"id": 452,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6706:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 487,
														"src": "6701:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 451,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6701:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 454,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6728:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 487,
														"src": "6715:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 453,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6715:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 462,
												"initialValue": {
													"arguments": [
														{
															"id": 460,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "6762:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 457,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 444,
																	"src": "6750:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 456,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6742:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 455,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6742:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6742:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6757:4:2",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "6742:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6742:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6700:67:2"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 477,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 463,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 452,
															"src": "6796:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 475,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 464,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 454,
																				"src": "6808:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 465,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6819:6:2",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "6808:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 466,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6829:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "6808:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 470,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 454,
																				"src": "6845:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 472,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "6858:4:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 471,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "6858:4:2",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 473,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "6857:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 468,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "6834:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 469,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "6838:6:2",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "6834:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6834:30:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "6808:56:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 476,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6807:58:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "6796:69:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 482,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 444,
																		"src": "6896:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 481,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6888:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 480,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6888:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6888:14:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 478,
																"name": "Address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "6869:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Address_$819_$",
																	"typeString": "type(library Address)"
																}
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6877:10:2",
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 507,
															"src": "6869:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 484,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6869:34:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6796:107:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 450,
												"id": 486,
												"nodeType": "Return",
												"src": "6777:126:2"
											}
										]
									},
									"documentation": {
										"id": 441,
										"nodeType": "StructuredDocumentation",
										"src": "5821:490:2",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 488,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "6325:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6356:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "6349:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 443,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 442,
														"name": "IERC20",
														"nameLocations": [
															"6349:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "6349:6:2"
													},
													"referencedDeclaration": 77,
													"src": "6349:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6376:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "6363:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 445,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6363:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6348:33:2"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "6399:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 448,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6399:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6398:6:2"
									},
									"scope": 489,
									"src": "6316:594:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 490,
							"src": "701:6211:2",
							"usedErrors": []
						}
					],
					"src": "115:6798:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							819
						]
					},
					"id": 820,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 491,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 492,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 819,
							"linearizedBaseContracts": [
								819
							],
							"name": "Address",
							"nameLocation": "202:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "1478:254:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 500,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 495,
																"src": "1702:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1710:4:3",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1702:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 502,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1715:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1702:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1724:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1702:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 499,
												"id": 505,
												"nodeType": "Return",
												"src": "1695:30:3"
											}
										]
									},
									"documentation": {
										"id": 493,
										"nodeType": "StructuredDocumentation",
										"src": "216:1191:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1421:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1440:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1432:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1431:17:3"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1472:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 497,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1472:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:6:3"
									},
									"scope": 819,
									"src": "1412:320:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 540,
										"nodeType": "Block",
										"src": "2718:241:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 518,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2744:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$819",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$819",
																				"typeString": "library Address"
																			}
																		],
																		"id": 517,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2736:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 516,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2736:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 519,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2736:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2750:7:3",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2736:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 521,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 512,
																"src": "2761:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2736:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 523,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2769:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 515,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2728:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2728:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 525,
												"nodeType": "ExpressionStatement",
												"src": "2728:73:3"
											},
											{
												"assignments": [
													527,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 527,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2818:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 540,
														"src": "2813:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 526,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2813:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 534,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 532,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2861:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 528,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 510,
																"src": "2831:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 529,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2841:4:3",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2831:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 531,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 530,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 512,
																"src": "2853:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2831:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2831:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2812:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 536,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "2882:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2891:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 535,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2874:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2874:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 539,
												"nodeType": "ExpressionStatement",
												"src": "2874:78:3"
											}
										]
									},
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "1738:904:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 541,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2656:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2682:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "2666:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2666:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2701:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "2693:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:43:3"
									},
									"returnParameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2718:0:3"
									},
									"scope": 819,
									"src": "2647:312:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "3790:96:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 552,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "3829:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 553,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "3837:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 554,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3843:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3846:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 551,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															599,
															643
														],
														"referencedDeclaration": 643,
														"src": "3807:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3807:72:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 550,
												"id": 557,
												"nodeType": "Return",
												"src": "3800:79:3"
											}
										]
									},
									"documentation": {
										"id": 542,
										"nodeType": "StructuredDocumentation",
										"src": "2965:731:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3710:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3731:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "3723:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3723:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3752:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "3739:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 545,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3739:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3722:35:3"
									},
									"returnParameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "3776:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 548,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3776:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:14:3"
									},
									"scope": 819,
									"src": "3701:185:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "4255:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 572,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 562,
															"src": "4294:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 573,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "4302:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 574,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4308:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 575,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "4311:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 571,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															599,
															643
														],
														"referencedDeclaration": 643,
														"src": "4272:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4272:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 570,
												"id": 577,
												"nodeType": "Return",
												"src": "4265:59:3"
											}
										]
									},
									"documentation": {
										"id": 560,
										"nodeType": "StructuredDocumentation",
										"src": "3892:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4117:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4147:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4139:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 561,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4139:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4176:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4163:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 563,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4163:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4204:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4190:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 565,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4190:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4129:93:3"
									},
									"returnParameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4241:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 568,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4241:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4240:14:3"
									},
									"scope": 819,
									"src": "4108:223:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 598,
										"nodeType": "Block",
										"src": "4806:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 592,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "4845:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 593,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "4853:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 594,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 586,
															"src": "4859:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4866:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 591,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															599,
															643
														],
														"referencedDeclaration": 643,
														"src": "4823:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4823:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 590,
												"id": 597,
												"nodeType": "Return",
												"src": "4816:94:3"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "4337:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4702:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4732:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "4724:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4724:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4753:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "4740:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 583,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4740:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4767:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "4759:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 585,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4759:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4723:50:3"
									},
									"returnParameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "4792:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 588,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4792:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4791:14:3"
									},
									"scope": 819,
									"src": "4693:224:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 642,
										"nodeType": "Block",
										"src": "5344:267:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 616,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5370:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$819",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$819",
																				"typeString": "library Address"
																			}
																		],
																		"id": 615,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5362:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 614,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5362:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5362:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 618,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5376:7:3",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5362:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 619,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 606,
																"src": "5387:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5362:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5394:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 613,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5354:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5354:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 623,
												"nodeType": "ExpressionStatement",
												"src": "5354:81:3"
											},
											{
												"assignments": [
													625,
													627
												],
												"declarations": [
													{
														"constant": false,
														"id": 625,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5451:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 642,
														"src": "5446:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 624,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5446:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 627,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5473:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 642,
														"src": "5460:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 626,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5460:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 634,
												"initialValue": {
													"arguments": [
														{
															"id": 632,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "5513:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 628,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 602,
																"src": "5487:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5494:4:3",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5487:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 631,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 630,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 606,
																"src": "5506:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5487:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5487:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5445:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 636,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 602,
															"src": "5562:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 637,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "5570:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 638,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "5579:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 639,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5591:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 635,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "5535:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5535:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 612,
												"id": 641,
												"nodeType": "Return",
												"src": "5528:76:3"
											}
										]
									},
									"documentation": {
										"id": 600,
										"nodeType": "StructuredDocumentation",
										"src": "4923:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 643,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5174:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5213:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5205:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5205:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5242:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5229:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 603,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5229:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5264:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5256:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 605,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5256:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5293:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5279:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 607,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5279:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5195:116:3"
									},
									"returnParameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5330:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 610,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5330:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5329:14:3"
									},
									"scope": 819,
									"src": "5165:446:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 659,
										"nodeType": "Block",
										"src": "5888:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 654,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 646,
															"src": "5924:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 655,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 648,
															"src": "5932:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5938:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 653,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															660,
															689
														],
														"referencedDeclaration": 689,
														"src": "5905:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5905:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 652,
												"id": 658,
												"nodeType": "Return",
												"src": "5898:80:3"
											}
										]
									},
									"documentation": {
										"id": 644,
										"nodeType": "StructuredDocumentation",
										"src": "5617:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 660,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5797:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5824:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "5816:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 645,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5845:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "5832:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 647,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5832:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5815:35:3"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "5874:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 650,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5874:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5873:14:3"
									},
									"scope": 819,
									"src": "5788:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 688,
										"nodeType": "Block",
										"src": "6327:168:3",
										"statements": [
											{
												"assignments": [
													673,
													675
												],
												"declarations": [
													{
														"constant": false,
														"id": 673,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6343:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 688,
														"src": "6338:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 672,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6338:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 675,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6365:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 688,
														"src": "6352:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 674,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6352:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 680,
												"initialValue": {
													"arguments": [
														{
															"id": 678,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "6397:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 676,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 663,
															"src": "6379:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 677,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6386:10:3",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6379:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6379:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6337:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 682,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 663,
															"src": "6446:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 683,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 673,
															"src": "6454:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 684,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "6463:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 685,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "6475:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 681,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "6419:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 686,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6419:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 671,
												"id": 687,
												"nodeType": "Return",
												"src": "6412:76:3"
											}
										]
									},
									"documentation": {
										"id": 661,
										"nodeType": "StructuredDocumentation",
										"src": "5991:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 689,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6178:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6214:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6206:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 662,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6243:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6230:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 664,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6230:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6271:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6257:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 666,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6196:93:3"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6313:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 669,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6313:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6312:14:3"
									},
									"scope": 819,
									"src": "6169:326:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "6771:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 700,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "6809:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "6817:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6823:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 699,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															706,
															735
														],
														"referencedDeclaration": 735,
														"src": "6788:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6788:77:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 698,
												"id": 704,
												"nodeType": "Return",
												"src": "6781:84:3"
											}
										]
									},
									"documentation": {
										"id": 690,
										"nodeType": "StructuredDocumentation",
										"src": "6501:168:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6683:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6712:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "6704:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 691,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6704:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6733:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "6720:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 693,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6720:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6703:35:3"
									},
									"returnParameters": {
										"id": 698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "6757:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 696,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6757:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6756:14:3"
									},
									"scope": 819,
									"src": "6674:198:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "7213:170:3",
										"statements": [
											{
												"assignments": [
													719,
													721
												],
												"declarations": [
													{
														"constant": false,
														"id": 719,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7229:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 734,
														"src": "7224:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 718,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7224:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 721,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7251:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 734,
														"src": "7238:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 720,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7238:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 726,
												"initialValue": {
													"arguments": [
														{
															"id": 724,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "7285:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 722,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "7265:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 723,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7272:12:3",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7265:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7265:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7223:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 728,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "7334:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 729,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 719,
															"src": "7342:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 730,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 721,
															"src": "7351:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 731,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 713,
															"src": "7363:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 727,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "7307:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7307:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 717,
												"id": 733,
												"nodeType": "Return",
												"src": "7300:76:3"
											}
										]
									},
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "6878:175:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7067:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7105:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "7097:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7097:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7134:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "7121:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 710,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7121:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7162:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "7148:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 712,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7148:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7087:93:3"
									},
									"returnParameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "7199:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 715,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7199:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7198:14:3"
									},
									"scope": 819,
									"src": "7058:325:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 773,
										"nodeType": "Block",
										"src": "7865:434:3",
										"statements": [
											{
												"condition": {
													"id": 749,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 740,
													"src": "7879:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 771,
													"nodeType": "Block",
													"src": "8235:58:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 767,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 742,
																		"src": "8257:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 768,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 744,
																		"src": "8269:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 766,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 818,
																	"src": "8249:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 769,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8249:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 770,
															"nodeType": "ExpressionStatement",
															"src": "8249:33:3"
														}
													]
												},
												"id": 772,
												"nodeType": "IfStatement",
												"src": "7875:418:3",
												"trueBody": {
													"id": 765,
													"nodeType": "Block",
													"src": "7888:341:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 750,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 742,
																		"src": "7906:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7917:6:3",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7906:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7927:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7906:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 762,
															"nodeType": "IfStatement",
															"src": "7902:286:3",
															"trueBody": {
																"id": 761,
																"nodeType": "Block",
																"src": "7930:258:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 756,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 738,
																							"src": "8132:6:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 755,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 507,
																						"src": "8121:10:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 757,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8121:18:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 758,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8141:31:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 754,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8113:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 759,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8113:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 760,
																		"nodeType": "ExpressionStatement",
																		"src": "8113:60:3"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 763,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 742,
																"src": "8208:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 748,
															"id": 764,
															"nodeType": "Return",
															"src": "8201:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "7389:277:3",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 774,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7680:26:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7724:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7716:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 737,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7745:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7740:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 739,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7740:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7775:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7762:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 741,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7762:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7809:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7795:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 743,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7795:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:121:3"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7851:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 746,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7851:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7850:14:3"
									},
									"scope": 819,
									"src": "7671:628:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 797,
										"nodeType": "Block",
										"src": "8680:135:3",
										"statements": [
											{
												"condition": {
													"id": 786,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 777,
													"src": "8694:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 795,
													"nodeType": "Block",
													"src": "8751:58:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 791,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 779,
																		"src": "8773:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 792,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "8785:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 790,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 818,
																	"src": "8765:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 793,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8765:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 794,
															"nodeType": "ExpressionStatement",
															"src": "8765:33:3"
														}
													]
												},
												"id": 796,
												"nodeType": "IfStatement",
												"src": "8690:119:3",
												"trueBody": {
													"id": 789,
													"nodeType": "Block",
													"src": "8703:42:3",
													"statements": [
														{
															"expression": {
																"id": 787,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 779,
																"src": "8724:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 785,
															"id": 788,
															"nodeType": "Return",
															"src": "8717:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 775,
										"nodeType": "StructuredDocumentation",
										"src": "8305:210:3",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 798,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8529:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8560:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "8555:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 776,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8555:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8590:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "8577:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 778,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8577:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8624:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "8610:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 780,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8610:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8545:97:3"
									},
									"returnParameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "8666:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 783,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8666:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8665:14:3"
									},
									"scope": 819,
									"src": "8520:295:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 817,
										"nodeType": "Block",
										"src": "8904:457:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 805,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 800,
															"src": "8980:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8991:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8980:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 807,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9000:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8980:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 815,
													"nodeType": "Block",
													"src": "9310:45:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 812,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 802,
																		"src": "9331:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 811,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9324:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 813,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9324:20:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 814,
															"nodeType": "ExpressionStatement",
															"src": "9324:20:3"
														}
													]
												},
												"id": 816,
												"nodeType": "IfStatement",
												"src": "8976:379:3",
												"trueBody": {
													"id": 810,
													"nodeType": "Block",
													"src": "9003:301:3",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9161:133:3",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9179:40:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9208:10:3"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9202:5:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9202:17:3"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9183:15:3",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9247:2:3",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9251:10:3"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9243:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9243:19:3"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9264:15:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9236:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9236:44:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9236:44:3"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 800,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9208:10:3",
																	"valueSize": 1
																},
																{
																	"declaration": 800,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9251:10:3",
																	"valueSize": 1
																}
															],
															"id": 809,
															"nodeType": "InlineAssembly",
															"src": "9152:142:3"
														}
													]
												}
											}
										]
									},
									"id": 818,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8830:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8851:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "8838:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 799,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8838:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8877:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "8863:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 801,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8863:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8837:53:3"
									},
									"returnParameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8904:0:3"
									},
									"scope": 819,
									"src": "8821:540:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 820,
							"src": "194:9169:3",
							"usedErrors": []
						}
					],
					"src": "101:9263:3"
				},
				"id": 3
			},
			"@uma/core/contracts/common/implementation/AncillaryData.sol": {
				"ast": {
					"absolutePath": "@uma/core/contracts/common/implementation/AncillaryData.sol",
					"exportedSymbols": {
						"AncillaryData": [
							1227
						]
					},
					"id": 1228,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 821,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AncillaryData",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 822,
								"nodeType": "StructuredDocumentation",
								"src": "67:595:4",
								"text": " @title Library for encoding and decoding ancillary data for DVM price requests.\n @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\n web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\n dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\n smart contracts. More details on UMA's ancillary data guidelines below:\n https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit"
							},
							"fullyImplemented": true,
							"id": 1227,
							"linearizedBaseContracts": [
								1227
							],
							"name": "AncillaryData",
							"nameLocation": "671:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 961,
										"nodeType": "Block",
										"src": "974:1229:4",
										"statements": [
											{
												"id": 960,
												"nodeType": "UncheckedBlock",
												"src": "984:1213:4",
												"statements": [
													{
														"assignments": [
															830
														],
														"declarations": [
															{
																"constant": false,
																"id": 830,
																"mutability": "mutable",
																"name": "x",
																"nameLocation": "1016:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 960,
																"src": "1008:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 829,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1008:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 835,
														"initialValue": {
															"arguments": [
																{
																	"id": 833,
																	"name": "bytesIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 824,
																	"src": "1028:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 832,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1020:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 831,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1020:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1020:16:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1008:28:4"
													},
													{
														"expression": {
															"id": 840,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 836,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1084:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 837,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "1088:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830303030303030303030303030303030303030303030303030303030303030306666666666666666666666666666666666666666666666666666666666666666",
																	"id": 838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1092:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_340282366920938463463374607431768211455_by_1",
																		"typeString": "int_const 3402...(31 digits omitted)...1455"
																	},
																	"value": "0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff"
																},
																"src": "1088:70:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1084:74:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 841,
														"nodeType": "ExpressionStatement",
														"src": "1084:74:4"
													},
													{
														"expression": {
															"id": 854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 842,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1172:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 853,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 850,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 843,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1177:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 848,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 844,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1182:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_18446744073709551616_by_1",
																								"typeString": "int_const 18446744073709551616"
																							},
																							"id": 847,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 845,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1186:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "3634",
																								"id": 846,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1189:2:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_64_by_1",
																									"typeString": "int_const 64"
																								},
																								"value": "64"
																							},
																							"src": "1186:5:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_18446744073709551616_by_1",
																								"typeString": "int_const 18446744073709551616"
																							}
																						},
																						"src": "1182:9:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 849,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1181:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1177:15:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 851,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1176:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830303030303030303030303030303030666666666666666666666666666666663030303030303030303030303030303066666666666666666666666666666666",
																	"id": 852,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1196:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_6277101735386680763495507056286727952657427581105975853055_by_1",
																		"typeString": "int_const 6277...(50 digits omitted)...3055"
																	},
																	"value": "0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff"
																},
																"src": "1176:86:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1172:90:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 855,
														"nodeType": "ExpressionStatement",
														"src": "1172:90:4"
													},
													{
														"expression": {
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 856,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1276:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 867,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 864,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 857,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1281:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 862,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 858,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1286:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_4294967296_by_1",
																								"typeString": "int_const 4294967296"
																							},
																							"id": 861,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 859,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1290:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "3332",
																								"id": 860,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1293:2:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								},
																								"value": "32"
																							},
																							"src": "1290:5:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_4294967296_by_1",
																								"typeString": "int_const 4294967296"
																							}
																						},
																						"src": "1286:9:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 863,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1285:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1281:15:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 865,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1280:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830303030303030306666666666666666303030303030303066666666666666663030303030303030666666666666666630303030303030306666666666666666",
																	"id": 866,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1300:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_26959946660873538060741835960174461801791452538186943042387869433855_by_1",
																		"typeString": "int_const 2695...(60 digits omitted)...3855"
																	},
																	"value": "0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff"
																},
																"src": "1280:86:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1276:90:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 869,
														"nodeType": "ExpressionStatement",
														"src": "1276:90:4"
													},
													{
														"expression": {
															"id": 882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 870,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1380:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 881,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 878,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 871,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1385:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 876,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 872,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1390:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_65536_by_1",
																								"typeString": "int_const 65536"
																							},
																							"id": 875,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 873,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1394:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "3136",
																								"id": 874,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1397:2:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_16_by_1",
																									"typeString": "int_const 16"
																								},
																								"value": "16"
																							},
																							"src": "1394:5:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_65536_by_1",
																								"typeString": "int_const 65536"
																							}
																						},
																						"src": "1390:9:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 877,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1389:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1385:15:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 879,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1384:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830303030666666663030303066666666303030306666666630303030666666663030303066666666303030306666666630303030666666663030303066666666",
																	"id": 880,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1766820105243087041267848467410591083712559083657179364930612997358944255_by_1",
																		"typeString": "int_const 1766...(65 digits omitted)...4255"
																	},
																	"value": "0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff"
																},
																"src": "1384:86:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1380:90:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 883,
														"nodeType": "ExpressionStatement",
														"src": "1380:90:4"
													},
													{
														"expression": {
															"id": 896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 884,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1484:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 892,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 885,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1489:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 890,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 886,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1494:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_256_by_1",
																								"typeString": "int_const 256"
																							},
																							"id": 889,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 887,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1498:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "38",
																								"id": 888,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1501:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_8_by_1",
																									"typeString": "int_const 8"
																								},
																								"value": "8"
																							},
																							"src": "1498:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_256_by_1",
																								"typeString": "int_const 256"
																							}
																						},
																						"src": "1494:8:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 891,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1493:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1489:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 893,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1488:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830306666303066663030666630306666303066663030666630306666303066663030666630306666303066663030666630306666303066663030666630306666",
																	"id": 894,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1507:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_450552876409790643671482431940419874915447411150352389258589821042463539455_by_1",
																		"typeString": "int_const 4505...(67 digits omitted)...9455"
																	},
																	"value": "0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff"
																},
																"src": "1488:85:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1484:89:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 897,
														"nodeType": "ExpressionStatement",
														"src": "1484:89:4"
													},
													{
														"expression": {
															"id": 910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 898,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1587:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 909,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 906,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 899,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1592:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 904,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 900,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1597:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_16_by_1",
																								"typeString": "int_const 16"
																							},
																							"id": 903,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 901,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1601:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "34",
																								"id": 902,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1604:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4_by_1",
																									"typeString": "int_const 4"
																								},
																								"value": "4"
																							},
																							"src": "1601:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_16_by_1",
																								"typeString": "int_const 16"
																							}
																						},
																						"src": "1597:8:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 905,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1596:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1592:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 907,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1591:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830663066306630663066306630663066306630663066306630663066306630663066306630663066306630663066306630663066306630663066306630663066",
																	"id": 908,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1610:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_6811299366900952671974763824040465167839410862684739061144563765171360567055_by_1",
																		"typeString": "int_const 6811...(68 digits omitted)...7055"
																	},
																	"value": "0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f"
																},
																"src": "1591:85:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1587:89:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 911,
														"nodeType": "ExpressionStatement",
														"src": "1587:89:4"
													},
													{
														"assignments": [
															913
														],
														"declarations": [
															{
																"constant": false,
																"id": 913,
																"mutability": "mutable",
																"name": "h",
																"nameLocation": "1725:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 960,
																"src": "1717:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 912,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1717:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 920,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 919,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 916,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 914,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 830,
																			"src": "1730:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307830383038303830383038303830383038303830383038303830383038303830383038303830383038303830383038303830383038303830383038303830383038",
																			"id": 915,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1734:66:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3632692995680508091719874039488248089514352460098527499277100674758058969096_by_1",
																				"typeString": "int_const 3632...(68 digits omitted)...9096"
																			},
																			"value": "0x0808080808080808080808080808080808080808080808080808080808080808"
																		},
																		"src": "1730:70:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 917,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1729:72:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "38",
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1804:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_8_by_1",
																	"typeString": "int_const 8"
																},
																"value": "8"
															},
															"src": "1729:76:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1717:88:4"
													},
													{
														"assignments": [
															922
														],
														"declarations": [
															{
																"constant": false,
																"id": 922,
																"mutability": "mutable",
																"name": "i",
																"nameLocation": "1827:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 960,
																"src": "1819:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 921,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1819:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 929,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 928,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 925,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 923,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 830,
																			"src": "1832:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307830343034303430343034303430343034303430343034303430343034303430343034303430343034303430343034303430343034303430343034303430343034",
																			"id": 924,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1836:66:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1816346497840254045859937019744124044757176230049263749638550337379029484548_by_1",
																				"typeString": "int_const 1816...(68 digits omitted)...4548"
																			},
																			"value": "0x0404040404040404040404040404040404040404040404040404040404040404"
																		},
																		"src": "1832:70:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 926,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1831:72:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "34",
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1906:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"src": "1831:76:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1819:88:4"
													},
													{
														"assignments": [
															931
														],
														"declarations": [
															{
																"constant": false,
																"id": 931,
																"mutability": "mutable",
																"name": "j",
																"nameLocation": "1929:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 960,
																"src": "1921:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 930,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1921:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 938,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 937,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 934,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 932,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 830,
																			"src": "1934:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307830323032303230323032303230323032303230323032303230323032303230323032303230323032303230323032303230323032303230323032303230323032",
																			"id": 933,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1938:66:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_908173248920127022929968509872062022378588115024631874819275168689514742274_by_1",
																				"typeString": "int_const 9081...(67 digits omitted)...2274"
																			},
																			"value": "0x0202020202020202020202020202020202020202020202020202020202020202"
																		},
																		"src": "1934:70:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 935,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1933:72:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "32",
																"id": 936,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2008:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1933:76:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1921:88:4"
													},
													{
														"expression": {
															"id": 953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 939,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "2023:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 952,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 950,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 940,
																		"name": "x",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 830,
																		"src": "2027:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 949,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 946,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 941,
																						"name": "h",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 913,
																						"src": "2032:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "&",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 944,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 942,
																									"name": "i",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 922,
																									"src": "2037:1:4",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "|",
																								"rightExpression": {
																									"id": 943,
																									"name": "j",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 931,
																									"src": "2041:1:4",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "2037:5:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 945,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2036:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "2032:11:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 947,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2031:13:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783237",
																			"id": 948,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2047:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_39_by_1",
																				"typeString": "int_const 39"
																			},
																			"value": "0x27"
																		},
																		"src": "2031:20:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2027:24:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "307833303330333033303330333033303330333033303330333033303330333033303330333033303330333033303330333033303330333033303330333033303330",
																	"id": 951,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2054:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_21796157974083048550319244236929488537086114760591164995662604048548353814576_by_1",
																		"typeString": "int_const 2179...(69 digits omitted)...4576"
																	},
																	"value": "0x3030303030303030303030303030303030303030303030303030303030303030"
																},
																"src": "2027:93:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2023:97:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 954,
														"nodeType": "ExpressionStatement",
														"src": "2023:97:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 957,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "2184:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 956,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2176:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 955,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "2176:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2176:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"functionReturnParameters": 828,
														"id": 959,
														"nodeType": "Return",
														"src": "2169:17:4"
													}
												]
											}
										]
									},
									"id": 962,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUtf8Bytes32Bottom",
									"nameLocation": "906:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "bytesIn",
												"nameLocation": "934:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "926:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 823,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:17:4"
									},
									"returnParameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "965:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 826,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "965:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "964:9:4"
									},
									"scope": 1227,
									"src": "897:1306:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "2661:107:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"id": 975,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 973,
																		"name": "bytesIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 965,
																		"src": "2715:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">>",
																	"rightExpression": {
																		"hexValue": "313238",
																		"id": 974,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2726:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_128_by_1",
																			"typeString": "int_const 128"
																		},
																		"value": "128"
																	},
																	"src": "2715:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 972,
																"name": "toUtf8Bytes32Bottom",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 962,
																"src": "2695:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32) pure returns (bytes32)"
																}
															},
															"id": 976,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2695:35:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 978,
																	"name": "bytesIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 965,
																	"src": "2752:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 977,
																"name": "toUtf8Bytes32Bottom",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 962,
																"src": "2732:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32) pure returns (bytes32)"
																}
															},
															"id": 979,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2732:28:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 970,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "2678:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 971,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "2682:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "2678:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2678:83:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 969,
												"id": 981,
												"nodeType": "Return",
												"src": "2671:90:4"
											}
										]
									},
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "2209:372:4",
										"text": " @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\n @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\n This has minor changes from the toUtf8BytesAddress to control for the size of the input.\n @param bytesIn bytes32 to encode.\n @return utf8 encoded bytes32."
									},
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUtf8Bytes",
									"nameLocation": "2595:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "bytesIn",
												"nameLocation": "2615:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "2607:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 964,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2607:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2606:17:4"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "2647:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 967,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2647:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2646:14:4"
									},
									"scope": 1227,
									"src": "2586:182:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1015,
										"nodeType": "Block",
										"src": "3221:142:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"id": 1002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 998,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 986,
																						"src": "3303:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 997,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "3295:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes20_$",
																						"typeString": "type(bytes20)"
																					},
																					"typeName": {
																						"id": 996,
																						"name": "bytes20",
																						"nodeType": "ElementaryTypeName",
																						"src": "3295:7:4",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 999,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3295:10:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes20",
																					"typeString": "bytes20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes20",
																					"typeString": "bytes20"
																				}
																			],
																			"id": 995,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3287:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 994,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "3287:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1000,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3287:19:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">>",
																	"rightExpression": {
																		"hexValue": "313238",
																		"id": 1001,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3310:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_128_by_1",
																			"typeString": "int_const 128"
																		},
																		"value": "128"
																	},
																	"src": "3287:26:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 993,
																"name": "toUtf8Bytes32Bottom",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 962,
																"src": "3267:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32) pure returns (bytes32)"
																}
															},
															"id": 1003,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3267:47:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1009,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 986,
																					"src": "3351:1:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1008,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3343:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bytes20_$",
																					"typeString": "type(bytes20)"
																				},
																				"typeName": {
																					"id": 1007,
																					"name": "bytes20",
																					"nodeType": "ElementaryTypeName",
																					"src": "3343:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1010,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3343:10:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes20",
																				"typeString": "bytes20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes20",
																				"typeString": "bytes20"
																			}
																		],
																		"id": 1006,
																		"name": "toUtf8Bytes32Bottom",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 962,
																		"src": "3323:19:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3323:31:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1005,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3316:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes8_$",
																	"typeString": "type(bytes8)"
																},
																"typeName": {
																	"id": 1004,
																	"name": "bytes8",
																	"nodeType": "ElementaryTypeName",
																	"src": "3316:6:4",
																	"typeDescriptions": {}
																}
															},
															"id": 1012,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3316:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes8",
																"typeString": "bytes8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes8",
																"typeString": "bytes8"
															}
														],
														"expression": {
															"id": 991,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3250:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 992,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3254:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "3250:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3250:106:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 990,
												"id": 1014,
												"nodeType": "Return",
												"src": "3231:125:4"
											}
										]
									},
									"documentation": {
										"id": 984,
										"nodeType": "StructuredDocumentation",
										"src": "2774:366:4",
										"text": " @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\n Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\n @dev Will return address in all lower case characters and without the leading 0x.\n @param x address to encode.\n @return utf8 encoded address bytes."
									},
									"id": 1016,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUtf8BytesAddress",
									"nameLocation": "3154:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3181:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3173:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3173:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3172:11:4"
									},
									"returnParameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3207:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 988,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3207:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3206:14:4"
									},
									"scope": 1227,
									"src": "3145:218:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1108,
										"nodeType": "Block",
										"src": "3642:473:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1024,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1019,
														"src": "3656:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1025,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3661:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3656:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1030,
												"nodeType": "IfStatement",
												"src": "3652:47:4",
												"trueBody": {
													"id": 1029,
													"nodeType": "Block",
													"src": "3664:35:4",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1027,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3685:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 1023,
															"id": 1028,
															"nodeType": "Return",
															"src": "3678:10:4"
														}
													]
												}
											},
											{
												"assignments": [
													1032
												],
												"declarations": [
													{
														"constant": false,
														"id": 1032,
														"mutability": "mutable",
														"name": "j",
														"nameLocation": "3716:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 1108,
														"src": "3708:9:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1031,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3708:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1034,
												"initialValue": {
													"id": 1033,
													"name": "x",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1019,
													"src": "3720:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3708:13:4"
											},
											{
												"assignments": [
													1036
												],
												"declarations": [
													{
														"constant": false,
														"id": 1036,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "3739:3:4",
														"nodeType": "VariableDeclaration",
														"scope": 1108,
														"src": "3731:11:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1035,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3731:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1037,
												"nodeType": "VariableDeclarationStatement",
												"src": "3731:11:4"
											},
											{
												"body": {
													"id": 1048,
													"nodeType": "Block",
													"src": "3767:51:4",
													"statements": [
														{
															"expression": {
																"id": 1042,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "3781:5:4",
																"subExpression": {
																	"id": 1041,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1036,
																	"src": "3781:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1043,
															"nodeType": "ExpressionStatement",
															"src": "3781:5:4"
														},
														{
															"expression": {
																"id": 1046,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1044,
																	"name": "j",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1032,
																	"src": "3800:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1045,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3805:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "3800:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1047,
															"nodeType": "ExpressionStatement",
															"src": "3800:7:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1038,
														"name": "j",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "3759:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1039,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3764:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3759:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1049,
												"nodeType": "WhileStatement",
												"src": "3752:66:4"
											},
											{
												"assignments": [
													1051
												],
												"declarations": [
													{
														"constant": false,
														"id": 1051,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "3840:4:4",
														"nodeType": "VariableDeclaration",
														"scope": 1108,
														"src": "3827:17:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1050,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3827:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1056,
												"initialValue": {
													"arguments": [
														{
															"id": 1054,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1036,
															"src": "3857:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1053,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "3847:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1052,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3851:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3847:14:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3827:34:4"
											},
											{
												"assignments": [
													1058
												],
												"declarations": [
													{
														"constant": false,
														"id": 1058,
														"mutability": "mutable",
														"name": "k",
														"nameLocation": "3879:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 1108,
														"src": "3871:9:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1057,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3871:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1060,
												"initialValue": {
													"id": 1059,
													"name": "len",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1036,
													"src": "3883:3:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3871:15:4"
											},
											{
												"body": {
													"id": 1104,
													"nodeType": "Block",
													"src": "3911:177:4",
													"statements": [
														{
															"expression": {
																"id": 1068,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1064,
																	"name": "k",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1058,
																	"src": "3925:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1067,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1065,
																		"name": "k",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1058,
																		"src": "3929:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1066,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3933:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "3929:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3925:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1069,
															"nodeType": "ExpressionStatement",
															"src": "3925:9:4"
														},
														{
															"assignments": [
																1071
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1071,
																	"mutability": "mutable",
																	"name": "temp",
																	"nameLocation": "3954:4:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 1104,
																	"src": "3948:10:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1070,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "3948:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1086,
															"initialValue": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		"id": 1084,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "3438",
																			"id": 1072,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3962:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_48_by_1",
																				"typeString": "int_const 48"
																			},
																			"value": "48"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1082,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1075,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1019,
																						"src": "3973:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1081,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1078,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1076,
																										"name": "x",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1019,
																										"src": "3978:1:4",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "/",
																									"rightExpression": {
																										"hexValue": "3130",
																										"id": 1077,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3982:2:4",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_10_by_1",
																											"typeString": "int_const 10"
																										},
																										"value": "10"
																									},
																									"src": "3978:6:4",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1079,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "3977:8:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3130",
																							"id": 1080,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3988:2:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_10_by_1",
																								"typeString": "int_const 10"
																							},
																							"value": "10"
																						},
																						"src": "3977:13:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3973:17:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1074,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3967:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1073,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "3967:5:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1083,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3967:24:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "3962:29:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1085,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3961:31:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3948:44:4"
														},
														{
															"assignments": [
																1088
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1088,
																	"mutability": "mutable",
																	"name": "b1",
																	"nameLocation": "4013:2:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 1104,
																	"src": "4006:9:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	},
																	"typeName": {
																		"id": 1087,
																		"name": "bytes1",
																		"nodeType": "ElementaryTypeName",
																		"src": "4006:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1093,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1091,
																		"name": "temp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1071,
																		"src": "4025:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 1090,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4018:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes1_$",
																		"typeString": "type(bytes1)"
																	},
																	"typeName": {
																		"id": 1089,
																		"name": "bytes1",
																		"nodeType": "ElementaryTypeName",
																		"src": "4018:6:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 1092,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4018:12:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4006:24:4"
														},
														{
															"expression": {
																"id": 1098,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1094,
																		"name": "bstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1051,
																		"src": "4044:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1096,
																	"indexExpression": {
																		"id": 1095,
																		"name": "k",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1058,
																		"src": "4049:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4044:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1097,
																	"name": "b1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1088,
																	"src": "4054:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "4044:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1099,
															"nodeType": "ExpressionStatement",
															"src": "4044:12:4"
														},
														{
															"expression": {
																"id": 1102,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1100,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1019,
																	"src": "4070:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1101,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4075:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "4070:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1103,
															"nodeType": "ExpressionStatement",
															"src": "4070:7:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1063,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1061,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1019,
														"src": "3903:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1062,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3908:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3903:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1105,
												"nodeType": "WhileStatement",
												"src": "3896:192:4"
											},
											{
												"expression": {
													"id": 1106,
													"name": "bstr",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1051,
													"src": "4104:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1023,
												"id": 1107,
												"nodeType": "Return",
												"src": "4097:11:4"
											}
										]
									},
									"documentation": {
										"id": 1017,
										"nodeType": "StructuredDocumentation",
										"src": "3369:195:4",
										"text": " @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\n @dev This method is based off of this code: https://stackoverflow.com/a/65707309."
									},
									"id": 1109,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUtf8BytesUint",
									"nameLocation": "3578:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3602:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "3594:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3594:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3593:11:4"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "3628:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1021,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3628:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:14:4"
									},
									"scope": 1227,
									"src": "3569:546:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1136,
										"nodeType": "Block",
										"src": "4287:164:4",
										"statements": [
											{
												"assignments": [
													1121
												],
												"declarations": [
													{
														"constant": false,
														"id": 1121,
														"mutability": "mutable",
														"name": "prefix",
														"nameLocation": "4310:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1136,
														"src": "4297:19:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1120,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4297:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1126,
												"initialValue": {
													"arguments": [
														{
															"id": 1123,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1111,
															"src": "4335:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1124,
															"name": "key",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1113,
															"src": "4357:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1122,
														"name": "constructPrefix",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "4319:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4319:42:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4297:64:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1129,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1111,
															"src": "4395:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1130,
															"name": "prefix",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1121,
															"src": "4417:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 1132,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1115,
																	"src": "4437:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1131,
																"name": "toUtf8Bytes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 983,
																"src": "4425:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes32) pure returns (bytes memory)"
																}
															},
															"id": 1133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4425:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1127,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4378:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1128,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "4382:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "4378:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4378:66:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1119,
												"id": 1135,
												"nodeType": "Return",
												"src": "4371:73:4"
											}
										]
									},
									"id": 1137,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "appendKeyValueBytes32",
									"nameLocation": "4130:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "currentAncillaryData",
												"nameLocation": "4174:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4161:33:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1110,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4161:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "4217:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4204:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1112,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4204:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4238:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4230:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1114,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4151:98:4"
									},
									"returnParameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4273:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1117,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4273:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4272:14:4"
									},
									"scope": 1227,
									"src": "4121:330:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1165,
										"nodeType": "Block",
										"src": "5350:171:4",
										"statements": [
											{
												"assignments": [
													1150
												],
												"declarations": [
													{
														"constant": false,
														"id": 1150,
														"mutability": "mutable",
														"name": "prefix",
														"nameLocation": "5373:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1165,
														"src": "5360:19:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1149,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5360:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1155,
												"initialValue": {
													"arguments": [
														{
															"id": 1152,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "5398:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1153,
															"name": "key",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "5420:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1151,
														"name": "constructPrefix",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "5382:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 1154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5382:42:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5360:64:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1158,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "5458:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1159,
															"name": "prefix",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1150,
															"src": "5480:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 1161,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1144,
																	"src": "5507:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1160,
																"name": "toUtf8BytesAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1016,
																"src": "5488:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (address) pure returns (bytes memory)"
																}
															},
															"id": 1162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5488:25:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1156,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5441:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1157,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5445:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "5441:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5441:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1148,
												"id": 1164,
												"nodeType": "Return",
												"src": "5434:80:4"
											}
										]
									},
									"documentation": {
										"id": 1138,
										"nodeType": "StructuredDocumentation",
										"src": "4457:722:4",
										"text": " @notice Adds \"key:value\" to `currentAncillaryData` where `value` is an address that first needs to be converted\n to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\n @return Newly appended ancillary data."
									},
									"id": 1166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "appendKeyValueAddress",
									"nameLocation": "5193:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "currentAncillaryData",
												"nameLocation": "5237:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5224:33:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1139,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5224:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "5280:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5267:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1141,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5267:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5301:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5293:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5293:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5214:98:4"
									},
									"returnParameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5336:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1146,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5336:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5335:14:4"
									},
									"scope": 1227,
									"src": "5184:337:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1194,
										"nodeType": "Block",
										"src": "6409:168:4",
										"statements": [
											{
												"assignments": [
													1179
												],
												"declarations": [
													{
														"constant": false,
														"id": 1179,
														"mutability": "mutable",
														"name": "prefix",
														"nameLocation": "6432:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1194,
														"src": "6419:19:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1178,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6419:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1184,
												"initialValue": {
													"arguments": [
														{
															"id": 1181,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1169,
															"src": "6457:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1182,
															"name": "key",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "6479:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1180,
														"name": "constructPrefix",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "6441:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6441:42:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6419:64:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1187,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1169,
															"src": "6517:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1188,
															"name": "prefix",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1179,
															"src": "6539:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 1190,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1173,
																	"src": "6563:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1189,
																"name": "toUtf8BytesUint",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1109,
																"src": "6547:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																}
															},
															"id": 1191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6547:22:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1185,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "6500:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "6504:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "6500:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6500:70:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1177,
												"id": 1193,
												"nodeType": "Return",
												"src": "6493:77:4"
											}
										]
									},
									"documentation": {
										"id": 1167,
										"nodeType": "StructuredDocumentation",
										"src": "5527:714:4",
										"text": " @notice Adds \"key:value\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\n to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\n @return Newly appended ancillary data."
									},
									"id": 1195,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "appendKeyValueUint",
									"nameLocation": "6255:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "currentAncillaryData",
												"nameLocation": "6296:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "6283:33:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1168,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6283:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "6339:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "6326:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1170,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6326:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6360:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "6352:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6352:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6273:98:4"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "6395:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1175,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6395:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6394:14:4"
									},
									"scope": 1227,
									"src": "6246:331:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1225,
										"nodeType": "Block",
										"src": "7043:180:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1205,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1198,
															"src": "7057:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1206,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7078:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7057:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1207,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7087:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7057:31:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1223,
													"nodeType": "Block",
													"src": "7159:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1219,
																		"name": "key",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1200,
																		"src": "7197:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "3a",
																		"id": 1220,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7202:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c",
																			"typeString": "literal_string \":\""
																		},
																		"value": ":"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c",
																			"typeString": "literal_string \":\""
																		}
																	],
																	"expression": {
																		"id": 1217,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "7180:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7184:12:4",
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "7180:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7180:26:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1204,
															"id": 1222,
															"nodeType": "Return",
															"src": "7173:33:4"
														}
													]
												},
												"id": 1224,
												"nodeType": "IfStatement",
												"src": "7053:164:4",
												"trueBody": {
													"id": 1216,
													"nodeType": "Block",
													"src": "7090:63:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "2c",
																		"id": 1211,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7128:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
																			"typeString": "literal_string \",\""
																		},
																		"value": ","
																	},
																	{
																		"id": 1212,
																		"name": "key",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1200,
																		"src": "7133:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "3a",
																		"id": 1213,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7138:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c",
																			"typeString": "literal_string \":\""
																		},
																		"value": ":"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
																			"typeString": "literal_string \",\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c",
																			"typeString": "literal_string \":\""
																		}
																	],
																	"expression": {
																		"id": 1209,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "7111:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7115:12:4",
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "7111:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1214,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7111:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1204,
															"id": 1215,
															"nodeType": "Return",
															"src": "7104:38:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1196,
										"nodeType": "StructuredDocumentation",
										"src": "6583:340:4",
										"text": " @notice Helper method that returns the left hand side of a \"key:value\" pair plus the colon \":\" and a leading\n comma \",\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\n some utf8 value that is ultimately added to a comma-delimited, key-value dictionary."
									},
									"id": 1226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "constructPrefix",
									"nameLocation": "6937:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "currentAncillaryData",
												"nameLocation": "6966:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "6953:33:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1197,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6953:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "7001:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "6988:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1199,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6988:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6952:53:4"
									},
									"returnParameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "7029:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1202,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7029:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7028:14:4"
									},
									"scope": 1227,
									"src": "6928:295:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1228,
							"src": "663:6562:4",
							"usedErrors": []
						}
					],
					"src": "42:7184:4"
				},
				"id": 4
			},
			"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol": {
				"ast": {
					"absolutePath": "@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
					"exportedSymbols": {
						"ClaimData": [
							1227
						]
					},
					"id": 1232,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1229,
							"literals": [
								"solidity",
								"0.8",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:5"
						},
						{
							"absolutePath": "@uma/core/contracts/common/implementation/AncillaryData.sol",
							"file": "../../common/implementation/AncillaryData.sol",
							"id": 1231,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1232,
							"sourceUnit": 1228,
							"src": "67:91:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1230,
										"name": "AncillaryData",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1227,
										"src": "76:13:5",
										"typeDescriptions": {}
									},
									"local": "ClaimData",
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "42:117:5"
				},
				"id": 5
			},
			"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol": {
				"ast": {
					"absolutePath": "@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						],
						"OptimisticOracleV3Interface": [
							1421
						]
					},
					"id": 1422,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1233,
							"literals": [
								"solidity",
								"0.8",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1234,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1422,
							"sourceUnit": 78,
							"src": "67:56:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "OptimisticOracleV3Interface",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1235,
								"nodeType": "StructuredDocumentation",
								"src": "125:104:6",
								"text": " @title Optimistic Oracle V3 Interface that callers must use to assert truths about the world."
							},
							"fullyImplemented": false,
							"id": 1421,
							"linearizedBaseContracts": [
								1421
							],
							"name": "OptimisticOracleV3Interface",
							"nameLocation": "240:27:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OptimisticOracleV3Interface.EscalationManagerSettings",
									"id": 1246,
									"members": [
										{
											"constant": false,
											"id": 1237,
											"mutability": "mutable",
											"name": "arbitrateViaEscalationManager",
											"nameLocation": "426:29:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "421:34:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1236,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "421:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1239,
											"mutability": "mutable",
											"name": "discardOracle",
											"nameLocation": "540:13:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "535:18:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1238,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "535:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1241,
											"mutability": "mutable",
											"name": "validateDisputers",
											"nameLocation": "641:17:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "636:22:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1240,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "636:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1243,
											"mutability": "mutable",
											"name": "assertingCaller",
											"nameLocation": "742:15:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "734:23:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1242,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "734:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1245,
											"mutability": "mutable",
											"name": "escalationManager",
											"nameLocation": "821:17:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "813:25:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1244,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "813:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "EscalationManagerSettings",
									"nameLocation": "385:25:6",
									"nodeType": "StructDefinition",
									"scope": 1421,
									"src": "378:538:6",
									"visibility": "public"
								},
								{
									"canonicalName": "OptimisticOracleV3Interface.Assertion",
									"id": 1273,
									"members": [
										{
											"constant": false,
											"id": 1249,
											"mutability": "mutable",
											"name": "escalationManagerSettings",
											"nameLocation": "1043:25:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1017:51:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EscalationManagerSettings_$1246_storage_ptr",
												"typeString": "struct OptimisticOracleV3Interface.EscalationManagerSettings"
											},
											"typeName": {
												"id": 1248,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1247,
													"name": "EscalationManagerSettings",
													"nameLocations": [
														"1017:25:6"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1246,
													"src": "1017:25:6"
												},
												"referencedDeclaration": 1246,
												"src": "1017:25:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EscalationManagerSettings_$1246_storage_ptr",
													"typeString": "struct OptimisticOracleV3Interface.EscalationManagerSettings"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1251,
											"mutability": "mutable",
											"name": "asserter",
											"nameLocation": "1133:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1125:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1250,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1125:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1253,
											"mutability": "mutable",
											"name": "assertionTime",
											"nameLocation": "1186:13:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1179:20:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1252,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "1179:6:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1255,
											"mutability": "mutable",
											"name": "settled",
											"nameLocation": "1240:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1235:12:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1254,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1235:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1258,
											"mutability": "mutable",
											"name": "currency",
											"nameLocation": "1299:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1292:15:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20_$77",
												"typeString": "contract IERC20"
											},
											"typeName": {
												"id": 1257,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1256,
													"name": "IERC20",
													"nameLocations": [
														"1292:6:6"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 77,
													"src": "1292:6:6"
												},
												"referencedDeclaration": 77,
												"src": "1292:6:6",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1260,
											"mutability": "mutable",
											"name": "expirationTime",
											"nameLocation": "1369:14:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1362:21:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1259,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "1362:6:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1262,
											"mutability": "mutable",
											"name": "settlementResolution",
											"nameLocation": "1480:20:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1475:25:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1261,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1475:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1264,
											"mutability": "mutable",
											"name": "domainId",
											"nameLocation": "1572:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1564:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1263,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1564:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1266,
											"mutability": "mutable",
											"name": "identifier",
											"nameLocation": "1694:10:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1686:18:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1265,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1686:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1268,
											"mutability": "mutable",
											"name": "bond",
											"nameLocation": "1797:4:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1789:12:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1267,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1789:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1270,
											"mutability": "mutable",
											"name": "callbackRecipient",
											"nameLocation": "1871:17:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1863:25:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1269,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1863:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1272,
											"mutability": "mutable",
											"name": "disputer",
											"nameLocation": "1945:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1937:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1271,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1937:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Assertion",
									"nameLocation": "997:9:6",
									"nodeType": "StructDefinition",
									"scope": 1421,
									"src": "990:998:6",
									"visibility": "public"
								},
								{
									"canonicalName": "OptimisticOracleV3Interface.WhitelistedCurrency",
									"id": 1278,
									"members": [
										{
											"constant": false,
											"id": 1275,
											"mutability": "mutable",
											"name": "isWhitelisted",
											"nameLocation": "2089:13:6",
											"nodeType": "VariableDeclaration",
											"scope": 1278,
											"src": "2084:18:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1274,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2084:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1277,
											"mutability": "mutable",
											"name": "finalFee",
											"nameLocation": "2160:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1278,
											"src": "2152:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1276,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2152:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "WhitelistedCurrency",
									"nameLocation": "2054:19:6",
									"nodeType": "StructDefinition",
									"scope": 1421,
									"src": "2047:158:6",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1279,
										"nodeType": "StructuredDocumentation",
										"src": "2211:130:6",
										"text": " @notice Returns the default identifier used by the Optimistic Oracle V3.\n @return The default identifier."
									},
									"functionSelector": "d509b017",
									"id": 1284,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultIdentifier",
									"nameLocation": "2355:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1280,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2372:2:6"
									},
									"returnParameters": {
										"id": 1283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1284,
												"src": "2398:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1281,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2398:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2397:9:6"
									},
									"scope": 1421,
									"src": "2346:61:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1285,
										"nodeType": "StructuredDocumentation",
										"src": "2413:235:6",
										"text": " @notice Fetches information about a specific assertion and returns it.\n @param assertionId unique identifier for the assertion to fetch information for.\n @return assertion information about the assertion."
									},
									"functionSelector": "88302884",
									"id": 1293,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAssertion",
									"nameLocation": "2662:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "2683:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2675:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1286,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2675:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2674:21:6"
									},
									"returnParameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2719:16:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Assertion_$1273_memory_ptr",
													"typeString": "struct OptimisticOracleV3Interface.Assertion"
												},
												"typeName": {
													"id": 1290,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1289,
														"name": "Assertion",
														"nameLocations": [
															"2719:9:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1273,
														"src": "2719:9:6"
													},
													"referencedDeclaration": 1273,
													"src": "2719:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Assertion_$1273_storage_ptr",
														"typeString": "struct OptimisticOracleV3Interface.Assertion"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2718:18:6"
									},
									"scope": 1421,
									"src": "2653:84:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1294,
										"nodeType": "StructuredDocumentation",
										"src": "2743:807:6",
										"text": " @notice Asserts a truth about the world, using the default currency and liveness. No callback recipient or\n escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage\n (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\n @dev The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\n @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n @param asserter receives bonds back at settlement. This could be msg.sender or\n any other account that the caller wants to receive the bond at settlement time.\n @return assertionId unique identifier for this assertion."
									},
									"functionSelector": "36b13af4",
									"id": 1303,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "assertTruthWithDefaults",
									"nameLocation": "3564:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "claim",
												"nameLocation": "3601:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "3588:18:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1295,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3588:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1298,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "3616:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "3608:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3608:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3587:38:6"
									},
									"returnParameters": {
										"id": 1302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1301,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "3644:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1300,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3644:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3643:9:6"
									},
									"scope": 1421,
									"src": "3555:98:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1304,
										"nodeType": "StructuredDocumentation",
										"src": "3659:2287:6",
										"text": " @notice Asserts a truth about the world, using a fully custom configuration.\n @dev The caller must approve this contract to spend at least bond amount of currency.\n @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n @param asserter receives bonds back at settlement. This could be msg.sender or\n any other account that the caller wants to receive the bond at settlement time.\n @param callbackRecipient if configured, this address will receive a function call assertionResolvedCallback and\n assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The\n recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\n @param escalationManager if configured, this address will control escalation properties of the assertion. This\n means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to\n validate disputes. Combining these, the asserter can define their own security properties for the assertion.\n escalationManager also _must_ implement the same callbacks as callbackRecipient.\n @param liveness time to wait before the assertion can be resolved. Assertion can be disputed in this time.\n @param currency bond currency pulled from the caller and held in escrow until the assertion is resolved.\n @param bond amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This\n must be >= getMinimumBond(address(currency)).\n @param identifier UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\n @param domainId optional domain that can be used to relate this assertion to others in the escalationManager and\n can be used by the configured escalationManager to define custom behavior for groups of assertions. This is\n typically used for \"escalation games\" by changing bonds or other assertion properties based on the other\n assertions that have come before. If not needed this value should be 0 to save gas.\n @return assertionId unique identifier for this assertion."
									},
									"functionSelector": "6457c979",
									"id": 1328,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "assertTruth",
									"nameLocation": "5960:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "claim",
												"nameLocation": "5994:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "5981:18:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1305,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5981:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "6017:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6009:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6009:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "callbackRecipient",
												"nameLocation": "6043:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6035:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6035:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "escalationManager",
												"nameLocation": "6078:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6070:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1311,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6070:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1314,
												"mutability": "mutable",
												"name": "liveness",
												"nameLocation": "6112:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6105:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1313,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6105:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "6137:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6130:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1316,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1315,
														"name": "IERC20",
														"nameLocations": [
															"6130:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "6130:6:6"
													},
													"referencedDeclaration": 77,
													"src": "6130:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "bond",
												"nameLocation": "6163:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6155:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6155:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1321,
												"mutability": "mutable",
												"name": "identifier",
												"nameLocation": "6185:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6177:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1320,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6177:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "domainId",
												"nameLocation": "6213:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6205:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1322,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6205:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5971:256:6"
									},
									"returnParameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6246:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1325,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6246:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6245:9:6"
									},
									"scope": 1421,
									"src": "5951:304:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1329,
										"nodeType": "StructuredDocumentation",
										"src": "6261:460:6",
										"text": " @notice Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy\n of the information within this contract. This is used to save gas when making assertions as we can avoid an\n external call to the UMA contracts to fetch this.\n @param identifier identifier to fetch information for and store locally.\n @param currency currency to fetch information for and store locally."
									},
									"functionSelector": "a8655785",
									"id": 1336,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "syncUmaParams",
									"nameLocation": "6735:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "identifier",
												"nameLocation": "6757:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1336,
												"src": "6749:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1330,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6749:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "6777:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1336,
												"src": "6769:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6769:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6748:38:6"
									},
									"returnParameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6795:0:6"
									},
									"scope": 1421,
									"src": "6726:70:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1337,
										"nodeType": "StructuredDocumentation",
										"src": "6802:621:6",
										"text": " @notice Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the\n asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle\n result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an\n amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of\n the bond is returned to the asserter or disputer.\n @param assertionId unique identifier for the assertion to resolve."
									},
									"functionSelector": "4124beef",
									"id": 1342,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleAssertion",
									"nameLocation": "7437:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1339,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "7461:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1342,
												"src": "7453:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1338,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7453:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7452:21:6"
									},
									"returnParameters": {
										"id": 1341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7482:0:6"
									},
									"scope": 1421,
									"src": "7428:55:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1343,
										"nodeType": "StructuredDocumentation",
										"src": "7489:223:6",
										"text": " @notice Settles an assertion and returns the resolution.\n @param assertionId unique identifier for the assertion to resolve and return the resolution for.\n @return resolution of the assertion."
									},
									"functionSelector": "8ea2f2ab",
									"id": 1350,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleAndGetAssertionResult",
									"nameLocation": "7726:27:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "7762:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "7754:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1344,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7754:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7753:21:6"
									},
									"returnParameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "7793:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1347,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7793:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7792:6:6"
									},
									"scope": 1421,
									"src": "7717:82:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1351,
										"nodeType": "StructuredDocumentation",
										"src": "7805:384:6",
										"text": " @notice Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then\n this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\n @param assertionId unique identifier for the assertion to fetch the resolution for.\n @return resolution of the assertion."
									},
									"functionSelector": "e39dfd7f",
									"id": 1358,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAssertionResult",
									"nameLocation": "8203:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "8230:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "8222:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1352,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8222:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8221:21:6"
									},
									"returnParameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "8266:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1355,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8266:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8265:6:6"
									},
									"scope": 1421,
									"src": "8194:78:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1359,
										"nodeType": "StructuredDocumentation",
										"src": "8278:353:6",
										"text": " @notice Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the\n currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\n @param currency currency to calculate the minimum bond for.\n @return minimum bond amount."
									},
									"functionSelector": "4360af3d",
									"id": 1366,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getMinimumBond",
									"nameLocation": "8645:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1361,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "8668:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1366,
												"src": "8660:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8660:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8659:18:6"
									},
									"returnParameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1366,
												"src": "8701:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8701:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8700:9:6"
									},
									"scope": 1421,
									"src": "8636:74:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"eventSelector": "db1513f0abeb57a364db56aa3eb52015cca5268f00fd67bc73aaf22bccab02b7",
									"id": 1391,
									"name": "AssertionMade",
									"nameLocation": "8722:13:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "8761:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8745:27:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1367,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8745:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"indexed": false,
												"mutability": "mutable",
												"name": "domainId",
												"nameLocation": "8790:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8782:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8782:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"indexed": false,
												"mutability": "mutable",
												"name": "claim",
												"nameLocation": "8814:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8808:11:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1371,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8808:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"indexed": true,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "8845:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8829:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8829:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"indexed": false,
												"mutability": "mutable",
												"name": "callbackRecipient",
												"nameLocation": "8871:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8863:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8863:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"indexed": false,
												"mutability": "mutable",
												"name": "escalationManager",
												"nameLocation": "8906:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8898:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8898:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"indexed": false,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "8941:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8933:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8933:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1382,
												"indexed": false,
												"mutability": "mutable",
												"name": "expirationTime",
												"nameLocation": "8964:14:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8957:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1381,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8957:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1385,
												"indexed": false,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "8995:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8988:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1384,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1383,
														"name": "IERC20",
														"nameLocations": [
															"8988:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "8988:6:6"
													},
													"referencedDeclaration": 77,
													"src": "8988:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1387,
												"indexed": false,
												"mutability": "mutable",
												"name": "bond",
												"nameLocation": "9021:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "9013:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9013:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1389,
												"indexed": true,
												"mutability": "mutable",
												"name": "identifier",
												"nameLocation": "9051:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "9035:26:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1388,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9035:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8735:332:6"
									},
									"src": "8716:352:6"
								},
								{
									"anonymous": false,
									"eventSelector": "60133788b013c89f2a3756dbc47e3484997b87bd7e0af98a7d70232032c1ce2b",
									"id": 1399,
									"name": "AssertionDisputed",
									"nameLocation": "9080:17:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1393,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "9114:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1399,
												"src": "9098:27:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1392,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9098:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1395,
												"indexed": true,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "9143:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1399,
												"src": "9127:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9127:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1397,
												"indexed": true,
												"mutability": "mutable",
												"name": "disputer",
												"nameLocation": "9167:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1399,
												"src": "9151:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9151:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9097:79:6"
									},
									"src": "9074:103:6"
								},
								{
									"anonymous": false,
									"eventSelector": "f4fa324b13daeb4e1aae736c2553632ae0fb16fb31f2d4da8ac99fd056313a13",
									"id": 1411,
									"name": "AssertionSettled",
									"nameLocation": "9189:16:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "9231:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9215:27:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1400,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9215:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"indexed": true,
												"mutability": "mutable",
												"name": "bondRecipient",
												"nameLocation": "9268:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9252:29:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1402,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9252:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1405,
												"indexed": false,
												"mutability": "mutable",
												"name": "disputed",
												"nameLocation": "9296:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9291:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1404,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9291:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1407,
												"indexed": false,
												"mutability": "mutable",
												"name": "settlementResolution",
												"nameLocation": "9319:20:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9314:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1406,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9314:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1409,
												"indexed": false,
												"mutability": "mutable",
												"name": "settleCaller",
												"nameLocation": "9357:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9349:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9349:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9205:170:6"
									},
									"src": "9183:193:6"
								},
								{
									"anonymous": false,
									"eventSelector": "d0f09246d369018534c67fec6a6c3259c6f962ef82c5521c337ae0ccc104e4bd",
									"id": 1420,
									"name": "AdminPropertiesSet",
									"nameLocation": "9388:18:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1414,
												"indexed": false,
												"mutability": "mutable",
												"name": "defaultCurrency",
												"nameLocation": "9414:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "9407:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1413,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1412,
														"name": "IERC20",
														"nameLocations": [
															"9407:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "9407:6:6"
													},
													"referencedDeclaration": 77,
													"src": "9407:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1416,
												"indexed": false,
												"mutability": "mutable",
												"name": "defaultLiveness",
												"nameLocation": "9438:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "9431:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1415,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "9431:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1418,
												"indexed": false,
												"mutability": "mutable",
												"name": "burnedBondPercentage",
												"nameLocation": "9463:20:6",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "9455:28:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9455:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9406:78:6"
									},
									"src": "9382:103:6"
								}
							],
							"scope": 1422,
							"src": "230:9257:6",
							"usedErrors": []
						}
					],
					"src": "42:9446:6"
				},
				"id": 6
			},
			"src/DataAsserter.sol": {
				"ast": {
					"absolutePath": "src/DataAsserter.sol",
					"exportedSymbols": {
						"Address": [
							819
						],
						"ClaimData": [
							1227
						],
						"DataAsserter": [
							1716
						],
						"IERC20": [
							77
						],
						"IERC20Permit": [
							113
						],
						"OptimisticOracleV3Interface": [
							1421
						],
						"SafeERC20": [
							489
						]
					},
					"id": 1717,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1423,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "43:23:7"
						},
						{
							"absolutePath": "@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
							"file": "@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
							"id": 1424,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1717,
							"sourceUnit": 1232,
							"src": "70:79:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
							"file": "@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
							"id": 1425,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1717,
							"sourceUnit": 1422,
							"src": "151:93:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1426,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1717,
							"sourceUnit": 490,
							"src": "246:65:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "DataAsserter",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1716,
							"linearizedBaseContracts": [
								1716
							],
							"name": "DataAsserter",
							"nameLocation": "729:12:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1430,
									"libraryName": {
										"id": 1427,
										"name": "SafeERC20",
										"nameLocations": [
											"755:9:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 489,
										"src": "755:9:7"
									},
									"nodeType": "UsingForDirective",
									"src": "749:27:7",
									"typeName": {
										"id": 1429,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1428,
											"name": "IERC20",
											"nameLocations": [
												"769:6:7"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 77,
											"src": "769:6:7"
										},
										"referencedDeclaration": 77,
										"src": "769:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "20402e1d",
									"id": 1433,
									"mutability": "immutable",
									"name": "defaultCurrency",
									"nameLocation": "806:15:7",
									"nodeType": "VariableDeclaration",
									"scope": 1716,
									"src": "782:39:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$77",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1432,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1431,
											"name": "IERC20",
											"nameLocations": [
												"782:6:7"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 77,
											"src": "782:6:7"
										},
										"referencedDeclaration": 77,
										"src": "782:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8921a614",
									"id": 1436,
									"mutability": "immutable",
									"name": "oo",
									"nameLocation": "873:2:7",
									"nodeType": "VariableDeclaration",
									"scope": 1716,
									"src": "828:47:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
										"typeString": "contract OptimisticOracleV3Interface"
									},
									"typeName": {
										"id": 1435,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1434,
											"name": "OptimisticOracleV3Interface",
											"nameLocations": [
												"828:27:7"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1421,
											"src": "828:27:7"
										},
										"referencedDeclaration": 1421,
										"src": "828:27:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
											"typeString": "contract OptimisticOracleV3Interface"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "b75d4e24",
									"id": 1439,
									"mutability": "constant",
									"name": "assertionLiveness",
									"nameLocation": "905:17:7",
									"nodeType": "VariableDeclaration",
									"scope": 1716,
									"src": "882:47:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 1437,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "882:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"value": {
										"hexValue": "37323030",
										"id": 1438,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "925:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_7200_by_1",
											"typeString": "int_const 7200"
										},
										"value": "7200"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d509b017",
									"id": 1441,
									"mutability": "immutable",
									"name": "defaultIdentifier",
									"nameLocation": "961:17:7",
									"nodeType": "VariableDeclaration",
									"scope": 1716,
									"src": "936:42:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1440,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "936:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "DataAsserter.DataAssertion",
									"id": 1450,
									"members": [
										{
											"constant": false,
											"id": 1443,
											"mutability": "mutable",
											"name": "dataId",
											"nameLocation": "1027:6:7",
											"nodeType": "VariableDeclaration",
											"scope": 1450,
											"src": "1019:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1442,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1019:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1445,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "1085:4:7",
											"nodeType": "VariableDeclaration",
											"scope": 1450,
											"src": "1077:12:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1444,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1077:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1447,
											"mutability": "mutable",
											"name": "asserter",
											"nameLocation": "1149:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1450,
											"src": "1141:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1446,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1141:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1449,
											"mutability": "mutable",
											"name": "resolved",
											"nameLocation": "1213:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1450,
											"src": "1208:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1448,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1208:4:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DataAssertion",
									"nameLocation": "994:13:7",
									"nodeType": "StructDefinition",
									"scope": 1716,
									"src": "987:286:7",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b33893da",
									"id": 1455,
									"mutability": "mutable",
									"name": "assertionsData",
									"nameLocation": "1322:14:7",
									"nodeType": "VariableDeclaration",
									"scope": 1716,
									"src": "1281:55:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_DataAssertion_$1450_storage_$",
										"typeString": "mapping(bytes32 => struct DataAsserter.DataAssertion)"
									},
									"typeName": {
										"id": 1454,
										"keyType": {
											"id": 1451,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "1289:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "1281:33:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_DataAssertion_$1450_storage_$",
											"typeString": "mapping(bytes32 => struct DataAsserter.DataAssertion)"
										},
										"valueType": {
											"id": 1453,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1452,
												"name": "DataAssertion",
												"nameLocations": [
													"1300:13:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1450,
												"src": "1300:13:7"
											},
											"referencedDeclaration": 1450,
											"src": "1300:13:7",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_DataAssertion_$1450_storage_ptr",
												"typeString": "struct DataAsserter.DataAssertion"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "29ae27364abd65b112ad0ac18e7e4f97360c20afa9636864dc91195d4d9204ec",
									"id": 1465,
									"name": "DataAsserted",
									"nameLocation": "1351:12:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"indexed": true,
												"mutability": "mutable",
												"name": "dataId",
												"nameLocation": "1390:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1374:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1456,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1374:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1459,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1415:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1407:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1458,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1407:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1461,
												"indexed": true,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "1446:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1430:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1430:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "1481:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1465:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1462,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:136:7"
									},
									"src": "1345:155:7"
								},
								{
									"anonymous": false,
									"eventSelector": "e49ab75dd8ad20084c43aacc9218434d61af074f44263f887212c41ad2d41c9d",
									"id": 1475,
									"name": "DataAssertionResolved",
									"nameLocation": "1514:21:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1467,
												"indexed": true,
												"mutability": "mutable",
												"name": "dataId",
												"nameLocation": "1562:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1546:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1466,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1546:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1469,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1587:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1579:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1468,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1579:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1471,
												"indexed": true,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "1618:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1602:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1470,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1602:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1473,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "1653:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1637:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1472,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1637:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1535:136:7"
									},
									"src": "1508:164:7"
								},
								{
									"body": {
										"id": 1500,
										"nodeType": "Block",
										"src": "1747:178:7",
										"statements": [
											{
												"expression": {
													"id": 1486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1482,
														"name": "defaultCurrency",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1433,
														"src": "1758:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1484,
																"name": "_defaultCurrency",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1477,
																"src": "1783:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1483,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "1776:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 1485,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1776:24:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"src": "1758:42:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"id": 1487,
												"nodeType": "ExpressionStatement",
												"src": "1758:42:7"
											},
											{
												"expression": {
													"id": 1492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1488,
														"name": "oo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1436,
														"src": "1811:2:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
															"typeString": "contract OptimisticOracleV3Interface"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1490,
																"name": "_optimisticOracleV3",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1479,
																"src": "1844:19:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1489,
															"name": "OptimisticOracleV3Interface",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1421,
															"src": "1816:27:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_OptimisticOracleV3Interface_$1421_$",
																"typeString": "type(contract OptimisticOracleV3Interface)"
															}
														},
														"id": 1491,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1816:48:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
															"typeString": "contract OptimisticOracleV3Interface"
														}
													},
													"src": "1811:53:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
														"typeString": "contract OptimisticOracleV3Interface"
													}
												},
												"id": 1493,
												"nodeType": "ExpressionStatement",
												"src": "1811:53:7"
											},
											{
												"expression": {
													"id": 1498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1494,
														"name": "defaultIdentifier",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1441,
														"src": "1875:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 1495,
																"name": "oo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1436,
																"src": "1895:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																	"typeString": "contract OptimisticOracleV3Interface"
																}
															},
															"id": 1496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1898:17:7",
															"memberName": "defaultIdentifier",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1284,
															"src": "1895:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_bytes32_$",
																"typeString": "function () view external returns (bytes32)"
															}
														},
														"id": 1497,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1895:22:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1875:42:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1499,
												"nodeType": "ExpressionStatement",
												"src": "1875:42:7"
											}
										]
									},
									"id": 1501,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "_defaultCurrency",
												"nameLocation": "1700:16:7",
												"nodeType": "VariableDeclaration",
												"scope": 1501,
												"src": "1692:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "_optimisticOracleV3",
												"nameLocation": "1726:19:7",
												"nodeType": "VariableDeclaration",
												"scope": 1501,
												"src": "1718:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1478,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1718:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1691:55:7"
									},
									"returnParameters": {
										"id": 1481,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1747:0:7"
									},
									"scope": 1716,
									"src": "1680:245:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1527,
										"nodeType": "Block",
										"src": "2121:137:7",
										"statements": [
											{
												"condition": {
													"id": 1514,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2136:37:7",
													"subExpression": {
														"expression": {
															"baseExpression": {
																"id": 1510,
																"name": "assertionsData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1455,
																"src": "2137:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_DataAssertion_$1450_storage_$",
																	"typeString": "mapping(bytes32 => struct DataAsserter.DataAssertion storage ref)"
																}
															},
															"id": 1512,
															"indexExpression": {
																"id": 1511,
																"name": "assertionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1503,
																"src": "2152:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2137:27:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_DataAssertion_$1450_storage",
																"typeString": "struct DataAsserter.DataAssertion storage ref"
															}
														},
														"id": 1513,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2165:8:7",
														"memberName": "resolved",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1449,
														"src": "2137:36:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1519,
												"nodeType": "IfStatement",
												"src": "2132:60:7",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1515,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2183:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 1516,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2190:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 1517,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2182:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 1509,
													"id": 1518,
													"nodeType": "Return",
													"src": "2175:17:7"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1520,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2211:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1521,
																	"name": "assertionsData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1455,
																	"src": "2217:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_DataAssertion_$1450_storage_$",
																		"typeString": "mapping(bytes32 => struct DataAsserter.DataAssertion storage ref)"
																	}
																},
																"id": 1523,
																"indexExpression": {
																	"id": 1522,
																	"name": "assertionId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1503,
																	"src": "2232:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2217:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DataAssertion_$1450_storage",
																	"typeString": "struct DataAsserter.DataAssertion storage ref"
																}
															},
															"id": 1524,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2245:4:7",
															"memberName": "data",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1445,
															"src": "2217:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 1525,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2210:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes32_$",
														"typeString": "tuple(bool,bytes32)"
													}
												},
												"functionReturnParameters": 1509,
												"id": 1526,
												"nodeType": "Return",
												"src": "2203:47:7"
											}
										]
									},
									"functionSelector": "54f6127f",
									"id": 1528,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getData",
									"nameLocation": "2056:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "2072:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "2064:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1502,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2064:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2063:21:7"
									},
									"returnParameters": {
										"id": 1509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "2106:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1505,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2106:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1508,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "2112:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1507,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2112:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2105:15:7"
									},
									"scope": 1716,
									"src": "2047:211:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1658,
										"nodeType": "Block",
										"src": "2793:2016:7",
										"statements": [
											{
												"expression": {
													"id": 1550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1539,
														"name": "asserter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1534,
														"src": "2804:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1540,
																"name": "asserter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1534,
																"src": "2815:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1543,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2835:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1542,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2827:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1541,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2827:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1544,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2827:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2815:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"id": 1548,
															"name": "asserter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1534,
															"src": "2853:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1549,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "2815:46:7",
														"trueExpression": {
															"expression": {
																"id": 1546,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2840:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1547,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2844:6:7",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2840:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2804:57:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1551,
												"nodeType": "ExpressionStatement",
												"src": "2804:57:7"
											},
											{
												"assignments": [
													1553
												],
												"declarations": [
													{
														"constant": false,
														"id": 1553,
														"mutability": "mutable",
														"name": "bond",
														"nameLocation": "2880:4:7",
														"nodeType": "VariableDeclaration",
														"scope": 1658,
														"src": "2872:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1552,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2872:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1561,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1558,
																	"name": "defaultCurrency",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1433,
																	"src": "2913:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1557,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2905:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1556,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2905:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1559,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2905:24:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1554,
															"name": "oo",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "2887:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																"typeString": "contract OptimisticOracleV3Interface"
															}
														},
														"id": 1555,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2890:14:7",
														"memberName": "getMinimumBond",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1366,
														"src": "2887:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2887:43:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2872:58:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1565,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2974:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2978:6:7",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2974:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1569,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2994:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_DataAsserter_$1716",
																		"typeString": "contract DataAsserter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_DataAsserter_$1716",
																		"typeString": "contract DataAsserter"
																	}
																],
																"id": 1568,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2986:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1567,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2986:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2986:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1571,
															"name": "bond",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1553,
															"src": "3001:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1562,
															"name": "defaultCurrency",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1433,
															"src": "2941:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 1564,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2957:16:7",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 173,
														"src": "2941:32:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2941:65:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1573,
												"nodeType": "ExpressionStatement",
												"src": "2941:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1579,
																	"name": "oo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1436,
																	"src": "3053:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																		"typeString": "contract OptimisticOracleV3Interface"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																		"typeString": "contract OptimisticOracleV3Interface"
																	}
																],
																"id": 1578,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3045:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1577,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3045:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3045:11:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1581,
															"name": "bond",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1553,
															"src": "3058:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1574,
															"name": "defaultCurrency",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1433,
															"src": "3017:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 1576,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3033:11:7",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 217,
														"src": "3017:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1582,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3017:46:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1583,
												"nodeType": "ExpressionStatement",
												"src": "3017:46:7"
											},
											{
												"expression": {
													"id": 1638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1584,
														"name": "assertionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1537,
														"src": "3672:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"hexValue": "446174612061737365727465643a203078",
																		"id": 1589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3750:19:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de",
																			"typeString": "literal_string \"Data asserted: 0x\""
																		},
																		"value": "Data asserted: 0x"
																	},
																	{
																		"arguments": [
																			{
																				"id": 1592,
																				"name": "data",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1532,
																				"src": "3878:4:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"expression": {
																				"id": 1590,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "3856:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1591,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3866:11:7",
																			"memberName": "toUtf8Bytes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 983,
																			"src": "3856:21:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes32) pure returns (bytes memory)"
																			}
																		},
																		"id": 1593,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3856:27:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "20666f72206461746149643a203078",
																		"id": 1594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3902:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc",
																			"typeString": "literal_string \" for dataId: 0x\""
																		},
																		"value": " for dataId: 0x"
																	},
																	{
																		"arguments": [
																			{
																				"id": 1597,
																				"name": "dataId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1530,
																				"src": "3960:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"expression": {
																				"id": 1595,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "3938:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1596,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3948:11:7",
																			"memberName": "toUtf8Bytes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 983,
																			"src": "3938:21:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes32) pure returns (bytes memory)"
																			}
																		},
																		"id": 1598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3938:29:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "20616e642061737365727465723a203078",
																		"id": 1599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3986:19:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf",
																			"typeString": "literal_string \" and asserter: 0x\""
																		},
																		"value": " and asserter: 0x"
																	},
																	{
																		"arguments": [
																			{
																				"id": 1602,
																				"name": "asserter",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1534,
																				"src": "4053:8:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 1600,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "4024:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1601,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "4034:18:7",
																			"memberName": "toUtf8BytesAddress",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1016,
																			"src": "4024:28:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (address) pure returns (bytes memory)"
																			}
																		},
																		"id": 1603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4024:38:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "2061742074696d657374616d703a20",
																		"id": 1604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4081:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49",
																			"typeString": "literal_string \" at timestamp: \""
																		},
																		"value": " at timestamp: "
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1607,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "4143:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1608,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4149:9:7",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "4143:15:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1605,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "4117:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1606,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "4127:15:7",
																			"memberName": "toUtf8BytesUint",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1109,
																			"src": "4117:25:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (uint256) pure returns (bytes memory)"
																			}
																		},
																		"id": 1609,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4117:42:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "20696e207468652044617461417373657274657220636f6e7472616374206174203078",
																		"id": 1610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4178:37:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8",
																			"typeString": "literal_string \" in the DataAsserter contract at 0x\""
																		},
																		"value": " in the DataAsserter contract at 0x"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1615,
																						"name": "this",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967268,
																						"src": "4271:4:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_DataAsserter_$1716",
																							"typeString": "contract DataAsserter"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_DataAsserter_$1716",
																							"typeString": "contract DataAsserter"
																						}
																					],
																					"id": 1614,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "4263:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 1613,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "4263:7:7",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1616,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4263:13:7",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 1611,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "4234:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1612,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "4244:18:7",
																			"memberName": "toUtf8BytesAddress",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1016,
																			"src": "4234:28:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (address) pure returns (bytes memory)"
																			}
																		},
																		"id": 1617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4234:43:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "2069732076616c69642e",
																		"id": 1618,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4296:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90",
																			"typeString": "literal_string \" is valid.\""
																		},
																		"value": " is valid."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_bd4bb6e587bcb4e9ccfeb83af87f5ccb8bd2cb66789d7f423172a716009443de",
																			"typeString": "literal_string \"Data asserted: 0x\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_638fd457175c192537aad87792f9f955f696ff6a04cd4ef012ec52d324a42afc",
																			"typeString": "literal_string \" for dataId: 0x\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf",
																			"typeString": "literal_string \" and asserter: 0x\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49",
																			"typeString": "literal_string \" at timestamp: \""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8",
																			"typeString": "literal_string \" in the DataAsserter contract at 0x\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_20bfd04ae1bee43451119cb1b01a54a4c3a07e53130737b515dfe8a851c01b90",
																			"typeString": "literal_string \" is valid.\""
																		}
																	],
																	"expression": {
																		"id": 1587,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "3715:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1588,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3719:12:7",
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "3715:16:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1619,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3715:608:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															{
																"id": 1620,
																"name": "asserter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1534,
																"src": "4338:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1623,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "4369:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_DataAsserter_$1716",
																			"typeString": "contract DataAsserter"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_DataAsserter_$1716",
																			"typeString": "contract DataAsserter"
																		}
																	],
																	"id": 1622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4361:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1621,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4361:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1624,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4361:13:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1627,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4397:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1626,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4389:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1625,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4389:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1628,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4389:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1629,
																"name": "assertionLiveness",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1439,
																"src": "4440:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															{
																"id": 1630,
																"name": "defaultCurrency",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1433,
																"src": "4472:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 1631,
																"name": "bond",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1553,
																"src": "4502:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1632,
																"name": "defaultIdentifier",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1441,
																"src": "4521:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1635,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4561:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1634,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4553:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 1633,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4553:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1636,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4553:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																},
																{
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 1585,
																"name": "oo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1436,
																"src": "3686:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																	"typeString": "contract OptimisticOracleV3Interface"
																}
															},
															"id": 1586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3689:11:7",
															"memberName": "assertTruth",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1328,
															"src": "3686:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_bytes_memory_ptr_$_t_address_$_t_address_$_t_address_$_t_uint64_$_t_contract$_IERC20_$77_$_t_uint256_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory,address,address,address,uint64,contract IERC20,uint256,bytes32,bytes32) external returns (bytes32)"
															}
														},
														"id": 1637,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3686:902:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3672:916:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1639,
												"nodeType": "ExpressionStatement",
												"src": "3672:916:7"
											},
											{
												"expression": {
													"id": 1649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1640,
															"name": "assertionsData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1455,
															"src": "4599:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_DataAssertion_$1450_storage_$",
																"typeString": "mapping(bytes32 => struct DataAsserter.DataAssertion storage ref)"
															}
														},
														"id": 1642,
														"indexExpression": {
															"id": 1641,
															"name": "assertionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1537,
															"src": "4614:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4599:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_DataAssertion_$1450_storage",
															"typeString": "struct DataAsserter.DataAssertion storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1644,
																"name": "dataId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1530,
																"src": "4657:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1645,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1532,
																"src": "4678:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1646,
																"name": "asserter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1534,
																"src": "4697:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 1647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4720:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 1643,
															"name": "DataAssertion",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1450,
															"src": "4629:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_DataAssertion_$1450_storage_ptr_$",
																"typeString": "type(struct DataAsserter.DataAssertion storage pointer)"
															}
														},
														"id": 1648,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4629:107:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_DataAssertion_$1450_memory_ptr",
															"typeString": "struct DataAsserter.DataAssertion memory"
														}
													},
													"src": "4599:137:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DataAssertion_$1450_storage",
														"typeString": "struct DataAsserter.DataAssertion storage ref"
													}
												},
												"id": 1650,
												"nodeType": "ExpressionStatement",
												"src": "4599:137:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1652,
															"name": "dataId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1530,
															"src": "4765:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1653,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1532,
															"src": "4773:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1654,
															"name": "asserter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1534,
															"src": "4779:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1655,
															"name": "assertionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1537,
															"src": "4789:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1651,
														"name": "DataAsserted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1465,
														"src": "4752:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,address,bytes32)"
														}
													},
													"id": 1656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4752:49:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1657,
												"nodeType": "EmitStatement",
												"src": "4747:54:7"
											}
										]
									},
									"functionSelector": "93ee663b",
									"id": 1659,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "assertDataFor",
									"nameLocation": "2660:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "dataId",
												"nameLocation": "2692:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "2684:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1529,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2684:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2717:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "2709:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1531,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2709:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "2740:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "2732:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2732:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2673:82:7"
									},
									"returnParameters": {
										"id": 1538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "2780:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "2772:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1536,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2772:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2771:21:7"
									},
									"scope": 1716,
									"src": "2651:2158:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1708,
										"nodeType": "Block",
										"src": "4975:632:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1673,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1667,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4994:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1668,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4998:6:7",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4994:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1671,
																		"name": "oo",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1436,
																		"src": "5016:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																			"typeString": "contract OptimisticOracleV3Interface"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																			"typeString": "contract OptimisticOracleV3Interface"
																		}
																	],
																	"id": 1670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5008:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1669,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5008:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5008:11:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4994:25:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1666,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4986:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4986:34:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1675,
												"nodeType": "ExpressionStatement",
												"src": "4986:34:7"
											},
											{
												"condition": {
													"id": 1676,
													"name": "assertedTruthfully",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1663,
													"src": "5111:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1705,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "delete",
														"prefix": true,
														"src": "5565:34:7",
														"subExpression": {
															"baseExpression": {
																"id": 1702,
																"name": "assertionsData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1455,
																"src": "5572:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_DataAssertion_$1450_storage_$",
																	"typeString": "mapping(bytes32 => struct DataAsserter.DataAssertion storage ref)"
																}
															},
															"id": 1704,
															"indexExpression": {
																"id": 1703,
																"name": "assertionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1661,
																"src": "5587:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "IndexAccess",
															"src": "5572:27:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_DataAssertion_$1450_storage",
																"typeString": "struct DataAsserter.DataAssertion storage ref"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1706,
													"nodeType": "ExpressionStatement",
													"src": "5565:34:7"
												},
												"id": 1707,
												"nodeType": "IfStatement",
												"src": "5107:492:7",
												"trueBody": {
													"id": 1701,
													"nodeType": "Block",
													"src": "5131:428:7",
													"statements": [
														{
															"expression": {
																"id": 1682,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 1677,
																			"name": "assertionsData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1455,
																			"src": "5146:14:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_DataAssertion_$1450_storage_$",
																				"typeString": "mapping(bytes32 => struct DataAsserter.DataAssertion storage ref)"
																			}
																		},
																		"id": 1679,
																		"indexExpression": {
																			"id": 1678,
																			"name": "assertionId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1661,
																			"src": "5161:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5146:27:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_DataAssertion_$1450_storage",
																			"typeString": "struct DataAsserter.DataAssertion storage ref"
																		}
																	},
																	"id": 1680,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5174:8:7",
																	"memberName": "resolved",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1449,
																	"src": "5146:36:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 1681,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5185:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5146:43:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1683,
															"nodeType": "ExpressionStatement",
															"src": "5146:43:7"
														},
														{
															"assignments": [
																1686
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1686,
																	"mutability": "mutable",
																	"name": "dataAssertion",
																	"nameLocation": "5225:13:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 1701,
																	"src": "5204:34:7",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_DataAssertion_$1450_memory_ptr",
																		"typeString": "struct DataAsserter.DataAssertion"
																	},
																	"typeName": {
																		"id": 1685,
																		"nodeType": "UserDefinedTypeName",
																		"pathNode": {
																			"id": 1684,
																			"name": "DataAssertion",
																			"nameLocations": [
																				"5204:13:7"
																			],
																			"nodeType": "IdentifierPath",
																			"referencedDeclaration": 1450,
																			"src": "5204:13:7"
																		},
																		"referencedDeclaration": 1450,
																		"src": "5204:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_DataAssertion_$1450_storage_ptr",
																			"typeString": "struct DataAsserter.DataAssertion"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1690,
															"initialValue": {
																"baseExpression": {
																	"id": 1687,
																	"name": "assertionsData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1455,
																	"src": "5241:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_DataAssertion_$1450_storage_$",
																		"typeString": "mapping(bytes32 => struct DataAsserter.DataAssertion storage ref)"
																	}
																},
																"id": 1689,
																"indexExpression": {
																	"id": 1688,
																	"name": "assertionId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1661,
																	"src": "5256:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5241:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DataAssertion_$1450_storage",
																	"typeString": "struct DataAsserter.DataAssertion storage ref"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5204:64:7"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1692,
																			"name": "dataAssertion",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1686,
																			"src": "5328:13:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_DataAssertion_$1450_memory_ptr",
																				"typeString": "struct DataAsserter.DataAssertion memory"
																			}
																		},
																		"id": 1693,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5342:6:7",
																		"memberName": "dataId",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1443,
																		"src": "5328:20:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"expression": {
																			"id": 1694,
																			"name": "dataAssertion",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1686,
																			"src": "5367:13:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_DataAssertion_$1450_memory_ptr",
																				"typeString": "struct DataAsserter.DataAssertion memory"
																			}
																		},
																		"id": 1695,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5381:4:7",
																		"memberName": "data",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1445,
																		"src": "5367:18:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"expression": {
																			"id": 1696,
																			"name": "dataAssertion",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1686,
																			"src": "5404:13:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_DataAssertion_$1450_memory_ptr",
																				"typeString": "struct DataAsserter.DataAssertion memory"
																			}
																		},
																		"id": 1697,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5418:8:7",
																		"memberName": "asserter",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1447,
																		"src": "5404:22:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1698,
																		"name": "assertionId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1661,
																		"src": "5445:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1691,
																	"name": "DataAssertionResolved",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1475,
																	"src": "5288:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$_t_bytes32_$returns$__$",
																		"typeString": "function (bytes32,bytes32,address,bytes32)"
																	}
																},
																"id": 1699,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5288:183:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1700,
															"nodeType": "EmitStatement",
															"src": "5283:188:7"
														}
													]
												}
											}
										]
									},
									"functionSelector": "f1b156b2",
									"id": 1709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "assertionResolvedCallback",
									"nameLocation": "4871:25:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1661,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "4915:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "4907:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1660,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4907:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1663,
												"mutability": "mutable",
												"name": "assertedTruthfully",
												"nameLocation": "4942:18:7",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "4937:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1662,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4937:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4896:71:7"
									},
									"returnParameters": {
										"id": 1665,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4975:0:7"
									},
									"scope": 1716,
									"src": "4862:745:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1714,
										"nodeType": "Block",
										"src": "5871:2:7",
										"statements": []
									},
									"functionSelector": "d448a4ec",
									"id": 1715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "assertionDisputedCallback",
									"nameLocation": "5817:25:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1711,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "5851:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "5843:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1710,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5843:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5842:21:7"
									},
									"returnParameters": {
										"id": 1713,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5871:0:7"
									},
									"scope": 1716,
									"src": "5808:65:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1717,
							"src": "720:5156:7",
							"usedErrors": []
						}
					],
					"src": "43:5835:7"
				},
				"id": 7
			}
		}
	}
}